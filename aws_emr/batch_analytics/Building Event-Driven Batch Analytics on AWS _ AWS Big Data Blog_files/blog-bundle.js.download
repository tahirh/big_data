(function () {define('libra/core/libra-namespace',[],function() {
  if (typeof Libra !== 'object') {
    Libra = {};
  }

  return Libra;
});

define('librastandardlib/test-helpers/browser-globals/window',[],function() {
  return window;
});

define('librastandardlib/obj-utils/assign',[],function() {
  // eslint-disable-next-line no-unused-vars
  return function assign(target, args) {
    'use strict';

    if (target === null) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    var to = Object(target);
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      if (source !== null) {
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            to[key] = source[key];
          }
        }
      }
    }

    return to;
  };
});

/* jshint bitwise: false */

define('librastandardlib/id-utils/generateUUID',[],function() {
  'use strict';

  // Returns a random UUID
  function generateUUID() {
    var d = (new Date()).getTime();
    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = (d + Math.random() * 16) % 16 | 0;
      d = Math.floor(d / 16);

      return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });

    return uuid;
  }

  return generateUUID;
});

define('librastandardlib/url-utils/buildQueryString',[],function() {
  'use strict';

  // Returns a built query string from the given parameters
  function buildQueryString(params) {
    var parts = [];

    // Make parts of encoded keys and values
    for (var key in params) {
      if (params.hasOwnProperty(key)) {
        parts[parts.length] = (encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
      }
    }

    return parts.join('&');
  }

  return buildQueryString;
});

define('librastandardlib/url-utils/getQueryStringParam',[],function() {
  'use strict';

  // Returns the value of the query string parameter given a name
  function getQueryStringParam(name, querySrting) {
    // eslint-disable-next-line no-useless-escape
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var re = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var res = re.exec(querySrting);

    if (res === null) {
      return '';
    }

    return decodeURIComponent(res[1].replace(/\+/g, ' '));
  }

  return getQueryStringParam;
});

define('librastandardlib/aws/page-settings',[
  'librastandardlib/obj-utils/assign'
], function(_assign) {
  'use strict';

  var defaults = {
    staticAssetPath: 'https://a0.awsstatic.com',
    jsAssetPath: 'https://a0.awsstatic.com/libra/1',
    isLoggingEnabled: true
  };

  var PageSettings = {};
  if (typeof AWS === 'object' && typeof AWS.PageSettings === 'object') {
    // Add any pre-existing props on global page settings
    _assign(PageSettings, AWS.PageSettings);
  }

  // Get any page settings from data attributes
  var pageInlineSettings = $('html').data();
  if (typeof pageInlineSettings !== 'undefined') {
    PageSettings.staticAssetPath = pageInlineSettings.staticAssets;
    PageSettings.jsAssetPath = PageSettings.staticAssetPath + '/libra/' + pageInlineSettings.jsVersion;
  }

  PageSettings = _assign({}, defaults, PageSettings);

  // Overwrite global page settings
  if (typeof AWS === 'object' && typeof AWS.PageSettings === 'object') {
    AWS.PageSettings = PageSettings;
  }

  return PageSettings;
});

/* !
 * Usage:
 * logger.[level](<message|metricName>, <logType=LOCAL|AI|RAW>, <params={value, units...}>)
 *
 * Create a logger instance with a namespace:
 * $ var logger = new Logger('NamespaceForThisLogger')
 *
 * To view logs in the browser console, use query string: https://aws.amazon.com/?debug<namespace>=<level>
 *
 * `LOG_LEVELS` object defines log granularity: ERROR, WARN, INFO, DEBUG
 *
 *
 * LOCAL LOGS
 * ----------
 * Local to the user's browser console.
 *
 * $ logger.info("hello world")
 * > [INFO][LOCAL] NamespaceForThisLogger: hello; @100ms
 *
 * $ logger.warn("hello world")
 * > [WARN][LOCAL] NamespaceForThisLogger: hello; @100ms
 *
 * AI LOGS
 * -------
 * Reported to AWSM Action Impressions channel. Logs metrics must be
 * whitelisted according to:
 * https://code.amazon.com/packages/AWSMarketingClientSideLoggingWhitelistConfig
 *
 * $ logger.info('awsm_:tm_PageLangUnsupported', 'AI')
 * > [INFO][AI] NamespaceForThisLogger: 'awsm_:tm_PageLangUnsupported'; @100ms;
 * > Default reported value is 1, default reported units is 'c' (count):
 * > new Image.src = http://<ai-endpoint>/?...
 *
 * $ logger.info('awsm_v1_:perf_documentReady', 'AI', { value: 100, units: 'ms' })
 * > [INFO][AI] NamespaceForThisLogger: 'awsm_v1_:perf_documentReady'; @100ms; { value: 100, units: 'ms' }
 * > Reported value and units are given:
 * > new Image.src = http://<ai-endpoint>/?...
 *
 * $ logger.info('awsm_v1_:perf_documentReady', 'AI', { valueSet: 'timeSinceResponseEnd' })
 * > [INFO][AI] NamespaceForThisLogger: 'awsm_v1_:perf_windowLoad'; @100ms; { value: 100, units: 'ms' }
 * > Reported value and units are retrieved from internal value set object:
 * > new Image.src = http://<ai-endpoint>/?...
 *
 * RAW LOGS
 * --------
 * Reported to AWSM FLS endpoint. Can accept raw message string data.
 *
 * $ logger.error("hello world", 'RAW')
 * > [ERROR][RAW] NamespaceForThisLogger: hello; @100ms
 * > new Image.src = http://<raw-endpoint>/?...
 *
 * $ logger.debug("hello world", 'RAW', {})
 * > [DEBUG][RAW] NamespaceForThisLogger: hello; @100ms; {}
 * > new Image.src = http://<raw-endpoint>/?...
 */

define('librastandardlib/logger/logger',[
  'librastandardlib/test-helpers/browser-globals/window',
  'librastandardlib/obj-utils/assign',
  'librastandardlib/id-utils/generateUUID',
  'librastandardlib/url-utils/buildQueryString',
  'librastandardlib/url-utils/getQueryStringParam',
  'librastandardlib/aws/page-settings'
], function(window, _assign, generateUUID, buildQueryString, getQueryStringParam, PageSettings) {
  'use strict';

  var Logger = (function() {
    var LOG_LEVELS = {
      info: { warn: true, error: true },
      warn: { error: true },
      error: {},
      debug: { info: true, warn: true, error: true }
    };

    var RAW_ENDPOINT = 'https://fls-na.amazon.com/1/aws-mktg/1/OE/';
    var AI_ENDPOINT = 'https://fls-na.amazon.com/1/action-impressions/1/OE/aws-mktg/action/';
    var COMMON_AI_PARAMS = {
      marketplaceId: 'A12QK8IU0H0XW5',
      requestId: 'ABCDEFGHIJKLMNOPQRST',
      session: '123-1234567-1234567'
    };

    var DEFAULT_AI_UNITS = 'ms';
    var DEFAULT_AI_VALUE_SET = 'count';
    var AI_VALUE_SETS = {
      count: { value: '1', units: 'c' },
      timeSinceResponseEnd: { valueFunction: 'getElapsedTimeSincePageLoad', units: 'ms' }
    };

    // Must be ordered by subdomain specificity
    var HOSTNAMES_TO_SERVICES = [
      { hostname: 'console.aws.amazon.com', service: 'console' },
      { hostname: 'aws.amazon.com', service: 'awsm' },
      { hostname: 'www.amazonaws.cn', service: 'cn' }
    ];

    var LogType = {
      RAW: 'RAW',
      AI: 'AI',
      LOCAL: 'LOCAL'
    };

    var PlatformType = {
      CMS: 'CMS',
      DEFAULT: 'DEFAULT'
    };

    var SERVICES_TO_PLATFORM_TYPES = {
      awsm: PlatformType.CMS,
      cn: PlatformType.CMS,
      console: PlatformType.DEFAULT
    };

    var CONSOLE_SERVICE_NAME_PREFIX = 'console-';
    var SERVICE_NAME_REGEX = /console\.(aws\.amazon\.com|amazonaws\.cn)\/([a-z0-9]+)\//;

    // These hostnames will allow match on their subdomains e.g us-east-1.console.aws.amazon.com maps to console.aws.amazon.com
    var ALLOWED_HOSTNAME_SUFFIXES = ['console.aws.amazon.com', 'console.amazonaws.cn'];

    // These hostnames will only match if it's an exact match
    var ALLOWED_EXACT_MATCH_HOSTNAMES = { 'aws.amazon.com': 1, 'www.amazonaws.cn': 1 };

    // pageRequestId will be the same across Logger instances
    var pageRequestId = null;

    // Instances of this logger
    var instances = {};

    // eslint-disable-next-line no-shadow
    function Logger(namespace, logLevel) {
      // Force a new logger instantiation of to an existing instance of the
      // same name, partly to avoid one-time instantiation costs
      if (instances.hasOwnProperty(namespace)) {
        // Always update the logLevel if new
        instances[namespace].logLevel = logLevel || instances[namespace].logLevel;

        return instances[namespace];
      }

      this.namespace = namespace;
      this.logLevel = logLevel || this.getLogLevelByQueryString();
      this.pageRequestId = this.getPageRequestId();

      // Get Action Impression parameters
      this.dataSet = this.getDataSet();
      this.service = this.getService();
      this.instance = this.getInstance(this.service);
      this.longLanguage = this.getLongLanguage();
      this.client = this.getClient();
      this.host = this.getHost();

      // Save this instance
      instances[namespace] = this;
    }

    Logger.prototype = {
      getService: function() {
        // Extract service name from path if it's a console location
        // Console Service URL pattern is console.aws.amazon.com/[service-name]/......
        if (typeof (window.location.hostname) !== 'undefined' && typeof (window.location.pathname) !== 'undefined') {
          var consoleServiceNameMatch = (window.location.hostname + window.location.pathname).match(SERVICE_NAME_REGEX);
          if (consoleServiceNameMatch && (consoleServiceNameMatch.length === 3)) {
            return CONSOLE_SERVICE_NAME_PREFIX + consoleServiceNameMatch[2];
          }
        }

        for (var i = 0, len = HOSTNAMES_TO_SERVICES.length; i < len; i++) {
          var hostname = HOSTNAMES_TO_SERVICES[i].hostname;
          var re = new RegExp(hostname + '\\/');
          if (re.test(window.location.hostname + '/') ||
              re.test(window.location.pathname) ||
              re.test(window.location.hash)) {
            return HOSTNAMES_TO_SERVICES[i].service;
          }
        }

        return 'NA';
      },

      getHost: function() {
        if (typeof (window.location.hostname) !== 'undefined') {
          var hostname = window.location.hostname;

          // Evaluate exact match
          if (ALLOWED_EXACT_MATCH_HOSTNAMES.hasOwnProperty(hostname)) {
            return hostname;
          }

          // Evaluate suffix match
          for (var i = 0; i < ALLOWED_HOSTNAME_SUFFIXES.length; i++) {
            var currentHost = ALLOWED_HOSTNAME_SUFFIXES[i];
            var indexOf = hostname.indexOf(currentHost);
            var endsWithCurrentHost = (indexOf >= 0) && (indexOf === (hostname.length - currentHost.length));

            if (endsWithCurrentHost) {
              return currentHost;
            }
          }
        }

        return 'NA';
      },

      getLongLanguage: function() {
        var langAttr = $('html').attr('lang');
        if (typeof langAttr !== 'undefined') {
          return langAttr.replace('-', '_');
        }

        return 'NA';
      },

      getInstance: function(service) {
        var platformType = PlatformType.DEFAULT;
        if (SERVICES_TO_PLATFORM_TYPES.hasOwnProperty(service)) {
          platformType = SERVICES_TO_PLATFORM_TYPES[service];
        }

        if (platformType === PlatformType.CMS) {
          if (window.location.pathname.indexOf('.html') === window.location.pathname.length - 5) {
            if (typeof AWS !== 'undefined' && 'PageSettings' in AWS && 'logInstance' in AWS.PageSettings) {
              return AWS.PageSettings.logInstance;
            }

            return 'NA';
          }

          return 'LIVE';
        }

        return 'LIVE';
      },

      getDataSet: function() {
        if (typeof AWS !== 'undefined' && 'PageSettings' in AWS && 'logDataSet' in AWS.PageSettings) {
          return AWS.PageSettings.logDataSet;
        }

        return 'NA';
      },

      getClient: function() {
        var re = new RegExp(/iPhone|iPod|iPad|Android|(?=.*\bAndroid\b)(?=.*\bMobile\b)|IEMobile|(?=.*\bWindows\b)(?=.*\bTouch\b)|Windows Phone|Opera Mini|(?=.*\bFirefox\b)(?=.*\bMobile\b)|BlackBerry|Nexus 7|BNTV250|Kindle Fire|Silk|webOS|GT-P1000/i);
        if (re.test(window.navigator.userAgent)) {
          return 'mobile';
        }

        return 'dsk';
      },

      // Logs to the AI endpoint
      logAI: function(metric, params) {
        params = params || {};

        var valueSet;
        if (params.hasOwnProperty('valueSet')) {
          if (AI_VALUE_SETS.hasOwnProperty(params.valueSet)) {
            // Use any provided value set if it exists
            valueSet = AI_VALUE_SETS[params.valueSet];
            params.units = valueSet.units;

            if (valueSet.hasOwnProperty('valueFunction')) {
              params.value = this[valueSet.valueFunction]();
            } else {
              params.value = valueSet.value;
            }
          } else {
            // Use the default value set if the provided value set does not exist
            valueSet = AI_VALUE_SETS[DEFAULT_AI_VALUE_SET];
            params.value = valueSet.value;
            params.units = valueSet.units;
          }
        } else if (!params.hasOwnProperty('value')) {
          // Use the default value set if no value provided
          valueSet = AI_VALUE_SETS[DEFAULT_AI_VALUE_SET];
          params.value = valueSet.value;
          params.units = valueSet.units;
        }

        if (!params.hasOwnProperty('units')) {
          params.units = DEFAULT_AI_UNITS;
        }

        var url = AI_ENDPOINT + metric + '@v=' + encodeURIComponent(params.value) + ':u=' + encodeURIComponent(params.units);

        var standardParams = {
          dataset: this.dataSet,
          instance: this.instance,
          service: this.service,
          marketplace: this.longLanguage,
          client: this.client,
          host: this.host
        };

        var queryStringParams = _assign(standardParams, COMMON_AI_PARAMS);
        url += '?' + buildQueryString(queryStringParams);

        this.logUrl(url);
      },

      // Logs to the raw endpoint
      logRaw: function(logLevel, msg, currentTime, pageTime, customParams) {
        var standardParams = {
          cat: this.namespace,
          level: logLevel,
          msg: msg,
          currentTime: currentTime,
          pageTime: pageTime,
          pageRequestId: pageRequestId,
          page: window.location.toString()
        };

        // Standard params overwrite custom params
        var params = _assign({}, customParams, standardParams);

        var url = RAW_ENDPOINT + '?' + buildQueryString(params);

        this.logUrl(url);
      },

      // Logs to the given url
      logUrl: function(url) {
        // Call this out of the main event queue
        if (PageSettings.isLoggingEnabled) {
          setTimeout(function() {
            (new Image()).src = url;
          }, 0);

          // Expose log for testing since mocking new Image() is difficult
          this._lastImageUrl = url;
        }
      },

      // Triggers a custom event with the log data for external subscribers
      // Note: Console relies on this implementation for their metrics
      triggerEvent: function(logLevel, msg, currentTime, pageTime, customParams) {
        var standardParams = {
          cat: this.namespace,
          level: logLevel,
          msg: msg,
          currentTime: currentTime,
          pageTime: pageTime,
          pageRequestId: pageRequestId
        };

        // Standard params overwrite custom params
        var data = _assign({}, customParams, standardParams);

        $(document).trigger('custom_libra_logger_log-stream', data);
      },

      // Returns the log level, if any, from the current url
      getLogLevelByQueryString: function() {
        var level = getQueryStringParam('debug' + this.namespace, window.location.search);
        if (level === '') {
          return null;
        }

        return level;
      },

      // Returns `performance.timing.responseEnd` or -1 if not supported
      getElapsedTimeSincePageLoad: function() {
        if ('performance' in window && 'timing' in window.performance) {
          return (new Date()).getTime() - window.performance.timing.responseEnd;
        }

        return -1;
      },

      // Returns a static unique random page request id
      getPageRequestId: function() {
        pageRequestId = pageRequestId || generateUUID();

        return pageRequestId;
      },

      // Expose raw endpoint for testing
      _rawEndpoint: RAW_ENDPOINT,

      // Expose AI endpoint for testing
      _aiEndpoint: AI_ENDPOINT
    };

    // Add a method for each log level which logs to the console and the
    // logging endpoint
    for (var level in LOG_LEVELS) {
      if (LOG_LEVELS.hasOwnProperty(level)) {
        // eslint-disable-next-line no-shadow
        (function(level) {
          Logger.prototype[level] = function(msg, logType, params) {
            logType = logType || 'LOCAL';

            var currentTime = (new Date()).getTime();
            var pageTime = this.getElapsedTimeSincePageLoad();
            var logLevelStr = level.toUpperCase();

            this.triggerEvent(logLevelStr, msg, currentTime, pageTime, params);

            if (logType === LogType.AI) {
              this.logAI(msg, params);
            } else if (logType === LogType.RAW) {
              this.logRaw(logLevelStr, msg, currentTime, pageTime, params);
            }

            if (this.logLevel !== null) {
              // Only output to console if the log level matches
              if (level === this.logLevel || LOG_LEVELS[this.logLevel].hasOwnProperty(level)) {
                // When the logType belongs to RAW/AI/LOCAL, objects are not supported
                if (LogType.hasOwnProperty(logType)) {
                  var out = '[' + logLevelStr + '][' + LogType[logType] + '] ' + this.namespace + ': ' + msg + '; @' + pageTime + 'ms';
                  if (typeof params !== 'undefined') {
                    out += '; ' + JSON.stringify(params);
                  }
                  // eslint-disable-next-line no-console
                  console.log(out);

                  // Expose log for testing since mocking console is difficult
                  this._lastConsoleLog = out;
                } else {
                  var args = Array.prototype.slice.call(arguments);
                  var logObjPrefix = '[' + logLevelStr + '][' + LogType.LOCAL + '] ' + this.namespace + ': ' + args[0];
                  // eslint-disable-next-line no-console
                  console.log(logObjPrefix, [].concat(args.slice(1)));
                }
              }
            }
          };
        })(level);
      }
    }

    return Logger;
  })();

  return Logger;
});

define('librastandardlib/event-utils/polling-registrar',[
  'librastandardlib/id-utils/generateUUID'
], function(generateUUID) {
  'use strict';

  var pollGroups = {};

  function loop(pollGroup) {
    var key;

    // Need to avoid allowing new events to enter conditions mid-process so
    // activate all at the beginning of the poll loop
    for (key in pollGroup.events) {
      if (pollGroup.events.hasOwnProperty(key)) {
        pollGroup.events[key].isActive = true;
      }
    }

    for (key in pollGroup.events) {
      if (pollGroup.events.hasOwnProperty(key)) {
        var event = pollGroup.events[key];
        if (event.isActive) {
          if (event.condition()) {
            event.resolve();
          } else if ((new Date()).getTime() - event.startTime > event.timeout) {
            event.reject();
          }
        }
      }
    }

    var hasEvents = false;
    for (key in pollGroup.events) {
      if (pollGroup.events.hasOwnProperty(key)) {
        hasEvents = true;
        break;
      }
    }

    if (hasEvents) {
      setTimeout(function() {
        loop(pollGroup);
      }, pollGroup.interval);
    } else {
      // Poll groups are never deleted, just inactive
      pollGroup.isPolling = false;
    }
  }

  var PollingRegistrar = {
    register: function(condition, done, fail, timeout, interval) {
      var event = {
        key: generateUUID(),
        isActive: false,
        startTime: (new Date()).getTime(),
        condition: condition,
        done: done,
        fail: fail,
        timeout: timeout,
        interval: interval,
        resolve: function() {
          // Destroy before callback execution since poll loop is running
          var fct = this.done;
          this.destroy();
          fct();
        },
        reject: function() {
          // Destroy before callback execution since poll loop is running
          var fct = this.fail;
          this.destroy();
          fct();
        },
        destroy: function() {
          delete pollGroups[this.interval].events[this.key];
        }
      };

      var pollGroup;
      if (!pollGroups.hasOwnProperty(interval)) {
        // Create a new poll group for this interval if it doesn't yet exist
        pollGroup = {};
        pollGroup.events = {};
        pollGroup.interval = interval;
        pollGroup.isPolling = false;
        pollGroups[interval] = pollGroup;
      } else {
        pollGroup = pollGroups[interval];
      }

      // Add this event to the poll group
      pollGroup.events[event.key] = event;

      // Start looping this poll group if not already
      if (!pollGroup.isPolling) {
        pollGroup.isPolling = true;
        loop(pollGroup);
      }
    },

    // Reference to enclosed variable for testing
    _pollGroups: pollGroups
  };

  return PollingRegistrar;
});

define('librastandardlib/event-utils/onWindowLoad',[],function() {
  'use strict';

  var onWindowLoad = function(cb, context) {
    context = context || this;

    if (document.readyState === 'complete') {
      cb.call(context);
    } else {
      document.addEventListener('readystatechange', function() {
        if (document.readyState === 'complete') {
          cb.call(context);
        }
      }, false);
    }
  };

  return onWindowLoad;
});

define('librastandardlib/event-utils/onDOMContentLoaded',[
  'librastandardlib/event-utils/onWindowLoad'
], function(onWindowLoad) {
  'use strict';

  var onDOMContentLoaded = function(cb, context) {
    context = context || this;
    var resolved = false;

    if (document.readyState === 'complete' ||
       (document.readyState !== 'loading' && !document.documentElement.doScroll)) {
      resolved = true;
      cb.call(context);
    } else {
      document.addEventListener('DOMContentLoaded', function() {
        if (!resolved) {
          resolved = true;
          cb.call(context);
        }
      }, false);

      // Fallback to onWindowLoad if DOMContentLoaded has not fired.
      onWindowLoad(function() {
        if (!resolved) {
          resolved = true;
          cb.call(context);
        }
      });
    }
  };

  return onDOMContentLoaded;
});

define('libra/core/libra-require',[
  'libra/core/libra-namespace',
  'librastandardlib/logger/logger',
  'librastandardlib/event-utils/polling-registrar',
  'librastandardlib/event-utils/onWindowLoad',
  'librastandardlib/event-utils/onDOMContentLoaded'
], function(Libra, Logger, PollingRegistrar, onWindowLoad, onDOMContentLoaded) {
  'use strict';

  var InitTime = {
    immediate: 'immediate',
    documentReady: 'documentReady',
    windowLoad: 'windowLoad'
  };

  var logger = new Logger('LibraRequire');
  var loadedComponentRegistry = {};
  var eventQueue = [];
  var hasDocumentReadyFired = false;
  var hasWindowLoadFired = false;
  var pollingInterval = 100;
  var pageLoadTimeout = 20000;

  // AWS.PageSettings.pageLoadTimeout is set only in the edit mode
  // to avoid the malfunction of the components inside parts due to the timeout error.
  if (AWS && AWS.PageSettings && AWS.PageSettings.pageLoadTimeout) {
    pageLoadTimeout = AWS.PageSettings.pageLoadTimeout;
  }

  // To override this path, add the path with a colon to the component name and lb-comp
  // e.g. directories:directory-cards
  var defaultComponentPath = 'libra/components/';

  // Define methods on 'Libra' and 'Libra.Comp' one by one to ensure any
  // already-existing object references are not overwritten
  if (typeof Libra.Comp !== 'object') {
    Libra.Comp = {};
  }

  // Component registry for external use
  Libra.Comp.registry = {};

  // Immediately initializes the given event
  function initEvent(name, elem) {
    logger.info("Init event: '" + name + "'");
    loadedComponentRegistry[name].initFct(elem);
    Libra.Comp.registry[name].initCount++;
  }

  // Processes the given event by its registered initialization function or
  // adds the event to the initialization queue if its 'initTime' has not been
  // reached.
  function processEvent(name, elem) {
    var msg = "Process event: '" + name + "'; ";
    var initTime = loadedComponentRegistry[name].initTime;
    if (hasDocumentReadyFired && initTime === InitTime.documentReady) {
      // Document ready already fired, so initialize the component immediately
      logger.debug(msg + 'document ready already fired');
      initEvent(name, elem);
    } else if (hasWindowLoadFired && initTime === InitTime.windowLoad) {
      // Window onload already fired, so initialize the component immediately
      logger.debug(msg + 'window load already fired');
      initEvent(name, elem);
    } else if (initTime === InitTime.immediate) {
      // initTime is immediate so initialize now
      logger.debug(msg + 'immediate');
      initEvent(name, elem);
    } else {
      // Otherwise, add to event queue for later execution
      logger.debug(msg + "add to event queue '" + initTime + "'");
      eventQueue.push({
        name: name,
        elem: elem
      });
    }
  }

  // Polls for the given event to become registered. For example, a component
  // script may be loaded async. Since component scripts register their own
  // event name, the event can't be instantiated until the initialization
  // method is registered after the script has been downloaded.
  function waitForEventAvailability(name, elem) {
    logger.debug("Wait for event registration: '" + name + "'");

    // Check initially without waiting at all
    if (name in loadedComponentRegistry) {
      processEvent(name, elem);

      return;
    }

    // Poll until component script is loaded before initializing component
    PollingRegistrar.register(function() {
      return (name in loadedComponentRegistry);
    }, function() {
      processEvent(name, elem);
    }, function() {
      logger.error('awsm_v2_:comp_ScriptTimeoutError', 'AI', { msg: "Failed to recognize component script within the timeout: '" + name + "'" });
    }, 15000, pollingInterval);
  }

  // Initializes events in the queue for the given 'initTime'
  function processEventQueue(initTime) {
    for (var i = 0, len = eventQueue.length; i < len; i++) {
      var event = eventQueue[i];
      if (event.name in loadedComponentRegistry) {
        if (loadedComponentRegistry[event.name].initTime === initTime) {
          initEvent(event.name, event.elem);
        }
      }
    }
  }

  // Calls Libra require for all unregistered components in the DOM
  function findUnregisteredComponents() {
    var elems = $('[data-lb-comp]:not([data-lb-comp-registered])');

    for (var i = 0, len = elems.length; i < len; i++) {
      var elem = elems[i];
      var $elem = $(elem);
      $elem.attr('data-lb-comp-registered', 'true');
      var name = $elem.attr('data-lb-comp');

      Libra.require(name, elem);
    }
  }

  // Sets a custom event handler on 'document' that triggers DOM component
  // lookup upon firing
  function watchForNewComponents() {
    $(document).on('custom_libra_require_new-content', function() {
      findUnregisteredComponents();
    });
  }

  // Polls the DOM to find unregistered components and the page-end element,
  // which calls Libra require for all components as they are found. Polling
  // stops when the page-end signal is found.
  function pollToFindUnregisteredComponents() {
    PollingRegistrar.register(function() {
      findUnregisteredComponents();

      if (document.getElementById('lb-page-end')) {
        logger.info('Saw Page end');

        return true;
      }

      return false;
    }, function() {
      // Success - NOP
    }, function() {
      logger.error('awsm_v2_:comp_PageEndTimeoutError', 'AI', { msg: 'Failed to recognize page end within the timeout' });
    }, pageLoadTimeout, pollingInterval);
  }

  // Create a script path
  function getScriptPath(str) {
    return (str.indexOf(':') > -1) ? str.replace(':', '/') : (defaultComponentPath + str);
  }

  Libra.Comp.register = function(event) {
    loadedComponentRegistry[event.name] = {
      initFct: event.initFct,
      initTime: event.initTime
    };

    // Add to registry with initialization count of 0
    Libra.Comp.registry[event.name] = { initCount: 0 };
  };

  Libra.require = function(eventName, elem) {
    if (eventName in loadedComponentRegistry) {
      processEvent(eventName, elem);
    } else {
      var scriptPath = getScriptPath(eventName);

      try {
        logger.debug("Require '" + scriptPath + "'");
        require([scriptPath]);
      } catch (ex) {
        // Catch requirejs errors
        logger.error(ex.message);
      } finally {
        // Wait for load, still, because this event could be in an
        // already-loaded script
        waitForEventAvailability(eventName, elem);
      }
    }
  };

  var LibraRequire = {

    // Initializes Libra require event handlers and processes
    init: function() {
      onDOMContentLoaded(function() {
        logger.info('Saw document ready');
        hasDocumentReadyFired = true;
        processEventQueue(InitTime.documentReady);
      });

      onWindowLoad(function() {
        logger.info('Saw window load');
        hasWindowLoadFired = true;
        processEventQueue(InitTime.windowLoad);
      });

      pollToFindUnregisteredComponents();
      watchForNewComponents();
    }
  };

  return LibraRequire;
});

define('libra/navigation/utils/navigation-utils',[],function() {
  'use strict';

  var Util = {

    // Object cache of boolean flag results from Util functions
    simpleCache: {},

    // Returns true if the current device is touch-capable. This is a complex
    // topic, but this test should work for most devices.
    isTouchCapable: function() {
      if (typeof Util.simpleCache.isTouchCapable === 'undefined') {
        var res = window.Modernizr.touchevents;
        Util.simpleCache.isTouchCapable = res;

        return res;
      }

      return Util.simpleCache.isTouchCapable;
    },

    // Returns true if the device is a mobile device. Returns userAgent match
    // or assumes the device is mobile if it's touch-capable.
    isMobile: function() {
      if (typeof Util.simpleCache.isMobile === 'undefined') {
        var re = new RegExp(/iPhone|iPod|iPad|Android|(?=.*\bAndroid\b)(?=.*\bMobile\b)|IEMobile|(?=.*\bWindows\b)(?=.*\bTouch\b)|Windows Phone|Opera Mini|(?=.*\bFirefox\b)(?=.*\bMobile\b)|BlackBerry|Nexus 7|BNTV250|Kindle Fire|Silk|webOS|GT-P1000/i);
        var res = re.test(navigator.userAgent);
        Util.simpleCache.isMobile = res;

        return res;
      }

      return Util.simpleCache.isMobile;
    },

    isLikelyMobile: function() {
      if (typeof Util.simpleCache.isLikelyMobile === 'undefined') {
        var res = Util.isMobile() || (Util.isTouchCapable() && ($(window).width <= 800));
        Util.simpleCache.isLikelyMobile = res;

        return res;
      }

      return Util.simpleCache.isLikelyMobile;
    },

    // Returns true if the device userAgent is iPad
    isIPad: function() {
      if (typeof Util.simpleCache.isIPad === 'undefined') {
        var res = (navigator.userAgent.indexOf('iPad') !== -1);
        Util.simpleCache.isIPad = res;

        return res;
      }

      return Util.simpleCache.isIPad;
    },

    // Executes the given function after a given window event
    debounceWindowEvent: function(func, eventName, timeout, context) {
      var that = context || this;
      var count = 0;

      $(window).on(eventName, function() {
        var id = (++count);

        setTimeout(function() {
          if (id === count) {
            func.call(that);
          }
        }, timeout);
      });
    }
  };

  return Util;
});

/*!
 * Copyright (c) Tristen Brown
 * MIT LICENSE
 * https://github.com/tristen/hoverintent/blob/b17a178574f80bd794238783e57ae66fb5301fc1/LICENCE
 */

define('librastandardlib/vendor/hoverintent/hoverIntent',[],function() {
  'use strict';

  var hoverIntent = function(el, onOver, onOut) {

    var x, y, pX, pY;
    var h = {},
      state = 0,
      timer = 0;

    var options = {
      sensitivity: 7,
      interval: 100,
      timeout: 0
    };

    function delay(el, e) {
      if (timer) timer = clearTimeout(timer);
      state = 0;
      return onOut.call(el, e);
    }

    function tracker(e) {
      x = e.clientX;
      y = e.clientY;
    }

    function compare(el, e) {
      if (timer) timer = clearTimeout(timer);
      if ((Math.abs(pX - x) + Math.abs(pY - y)) < options.sensitivity) {
        state = 1;
        return onOver.call(el, e);
      } else {
        pX = x;
        pY = y;
        timer = setTimeout(function() {
          compare(el, e);
        }, options.interval);
      }
    }

    // Public methods
    h.options = function(opt) {
      options = $.extend({}, options, opt);
      return h;
    };

    function dispatchOver(e) {
      if (timer) timer = clearTimeout(timer);
      el.removeEventListener('mousemove', tracker, false);

      if (state !== 1) {
        pX = e.clientX;
        pY = e.clientY;

        el.addEventListener('mousemove', tracker, false);

        timer = setTimeout(function() {
          compare(el, e);
        }, options.interval);
      }

      return this;
    }

    function dispatchOut(e) {
      if (timer) timer = clearTimeout(timer);
      el.removeEventListener('mousemove', tracker, false);

      if (state === 1) {
        timer = setTimeout(function() {
          delay(el, e);
        }, options.timeout);
      }

      return this;
    }

    h.remove = function() {
      if (!el) return;
      el.removeEventListener('mouseover', dispatchOver, false);
      el.removeEventListener('mouseout', dispatchOut, false);
    };

    if (el) {
      el.addEventListener('mouseover', dispatchOver, false);
      el.addEventListener('mouseout', dispatchOut, false);
    }

    return h;
  };

  return hoverIntent;
});

define('libra/navigation/dropdown',[
  'libra/navigation/utils/navigation-utils',
  'librastandardlib/vendor/hoverintent/hoverIntent'
], function(Util, hoverIntent) {
  'use strict';

  var defaults = {
    footerSelector: '#aws-page-footer',
    dropdownSelector: '.aws-nav-popover',
    jQueryEventNamespace: 'aws_nav-dropdown',
    isTouchOnly: false,
    isAnimated: true,

    // Hover intent sensitivity for a dropdown
    hoverSensitivity: 7,

    // Hover intent interval (ms) for a dropdown
    hoverInterval: 50,

    // Delay (ms) before a dropdown is hidden
    timeout: 260,

    // Vertical distance (px) traveled by a dropdown upon fade-in
    verticalTravelDistance: 14,

    // Offset (px) to correct the horizontal position of the dropdown with
    // respect to the width of the dropdown trigger triangle and the
    // dropdown target triangle
    horizontalOffset: 15,

    // Offset (px) to position the dropdown below the top of the dropdown
    // trigger
    verticalOffset: 30,

    // Initial opacity for a dropdown fade-in
    startingOpacity: 0.1
  };

  var activeRegistry = {};
  var instantiationCount = 0;

  function Dropdown(triggerEl, group, options) {
    this.options = $.extend({}, defaults, options);

    this.instantiationId = instantiationCount;
    instantiationCount++;

    this.$trigger = $(triggerEl);
    this.$triggerIcon = this.$trigger.find('i');
    this.id = this.$trigger.attr('data-dropdown');
    this.$target = $('#' + this.id);

    // Reference to this dropdown's group
    this.group = group;

    // True if the dropdown is active
    this.isActive = false;

    // True if dropdown is enabled and trigger prevents default clicks
    this.isEnabled = true;

    // Timeout reference to clear upon mouseenter
    this.timeout = null;

    // Starting top position of the dropdown animation
    this.topStart = 0;

    // Ending top position of the dropdown animation
    this.topDest = 0;
  }

  Dropdown.prototype = {
    init: function() {
      if (!this.beforeInit()) {
        return;
      }

      // Don't instantiate if already
      if (this.$target.data('registered')) {
        return;
      }
      this.$target.attr('data-registered', 'true');


      if (Util.isLikelyMobile() || this.options.isTouchOnly) {
        this.options.isTouchOnly = true;
        this.bindTouchEvents();
      } else {
        this.bindTouchEvents();
        this.bindHoverEvents();
      }

      this.bindWindowResizeEvent();
    },

    // Bind Event Handlers
    // ----------------------------------------------------------------------

    // Binds hover events on this dropdown
    bindHoverEvents: function() {
      var that = this;

      hoverIntent(
        this.$trigger[0],
        function() {
          if (!that.isActive) {
            that.activate();
          }
        }, function() {
        // Out is a custom implementation
        }).options({
        // Timeout is a custom implementation
        timeout: 0,

        sensitivity: this.options.hoverSensitivity,
        interval: this.options.hoverInterval
      });

      // Entering the trigger or the target will clear any timeouts which are
      // set to close the dropdown

      var enterTrigger = function() {
        // Clear any timeout that is set to deactivate the dropdown
        clearTimeout(that.timeout);
      };
      this.$trigger.on('mouseenter', enterTrigger);

      var enterTarget = function() {
        // Clear any timeout that is set to deactivate the dropdown
        clearTimeout(that.timeout);
      };
      this.$target.on('mouseenter', enterTarget);

      // Leaving the trigger or the target will set timeouts which are set to
      // close the dropdown

      var leaveTrigger = function() {
        that.timeout = setTimeout(function() {
          that.deactivate();
        }, that.options.timeout);
      };
      this.$trigger.on('mouseleave', leaveTrigger);

      var leaveTarget = function() {
        that.timeout = setTimeout(function() {
          that.deactivate();
        }, that.options.timeout);
      };
      this.$target.on('mouseleave', leaveTarget);
    },

    // Bind touch event handlers on all dropdowns
    bindTouchEvents: function() {
      var that = this;
      this.$trigger.on('click', function(e) {
        if (that.isEnabled) {
          // Prevent default clicks if the trigger is an anchor
          e.preventDefault();
        }

        that.toggle();
      });

      this.listenForCloseEvent();
    },

    // Reposition targets to follow triggers on window resize. Use the
    // instantiationId in order to be able to later remove the event for
    // this popover only.
    bindWindowResizeEvent: function() {
      var that = this;
      Util.debounceWindowEvent(function() {
        that.setPosition();

        // Need extra timeout since target element sometimes takes extra
        // rendering time to get correct position
        setTimeout(function() {
          that.setPosition();
        }, 300);
      }, 'resize.' + this.options.jQueryEventNamespace + '_' + this.instantiationId, 20, this);
    },

    // Removes the resize event for this dropdown from the window
    destroyWindowResizeEvent: function() {
      $(window).off('resize.' + this.options.jQueryEventNamespace + '_' + this.instantiationId);
    },

    // Listens for a custom event that can be called from foreign elements in
    // order to hide this dropdown. Note that without a unique identifier,
    // this works to close all nav dropdowns which is actually the desired
    // outcome.
    listenForCloseEvent: function() {
      var that = this;
      $(document).on('custom_' + this.options.jQueryEventNamespace + '_close', function() {
        that.deactivate();
      });
    },

    // Events
    // ----------------------------------------------------------------------

    // Hides this dropdown if active, otherwise shows and binds click handler
    // on document to hide the dropdown
    toggle: function() {
      if (this.isActive) {
        this.deactivate();
      } else {
        this.activate();
        this.bindDocumentClickHandler();
      }
    },

    bindDocumentClickHandler: function() {
      var eventName;
      if ('ontouchstart' in window) {
        eventName = 'touchstart.' + this.options.jQueryEventNamespace + '_' + this.instantiationId;
      } else {
        eventName = 'click.' + this.options.jQueryEventNamespace + '_' + this.instantiationId;
      }

      var that = this;
      $(document).on(eventName, function(event) {
        var $eventTarget = $(event.target);

        // Only deactivate if event originated from outside a dropdown
        // trigger or target
        if (!$eventTarget.closest('[data-dropdown]').length &&
            !$eventTarget.closest(that.options.dropdownSelector).length) {
          that.deactivate();
        }
      });
    },

    destroyDocumentClickHandler: function() {
      var eventName;
      if ('ontouchstart' in window) {
        eventName = 'touchstart.' + this.options.jQueryEventNamespace + '_' + this.instantiationId;
      } else {
        eventName = 'click.' + this.options.jQueryEventNamespace + '_' + this.instantiationId;
      }

      $(document).off(eventName);
    },

    // Shows and adds active styles to this dropdown
    activate: function() {
      if (!this.isEnabled) {
        return;
      }

      // Deactivate any other dropdowns in the group that are currently active
      for (var key in activeRegistry) {
        if (activeRegistry.hasOwnProperty(key)) {
          activeRegistry[key].deactivate();
        }
      }

      this.setPosition();
      this.isActive = true;
      activeRegistry[this.id] = this;
      $(this.options.footerSelector).css('z-index', 6000);
      this.$target.removeClass('inactive');
      this.$target.addClass('active');
      this.$trigger.addClass('active');
    },

    // Hides and removes active styles from this dropdown
    deactivate: function() {
      // Set as inactive and remove from group's active registry
      this.isActive = false;
      delete activeRegistry[this.id];

      if (this.$target.hasClass('active')) {
        setTimeout((function() {
          $(this.options.footerSelector).css('z-index', 6001);
        }).bind(this), 110);
        this.$target.removeClass('active');
        this.$target.addClass('inactive');
        this.$trigger.removeClass('active');
      }

      this.destroyDocumentClickHandler();
    },

    // Sets the position of this dropdown's target relative to its trigger
    setPosition: function() {
      var triggerOffset = this.$triggerIcon.offset();
      var triggerPos = this.$triggerIcon.position();
      var topDest = this.group.$container.position().top + triggerPos.top + this.options.verticalOffset;
      var topStart = topDest - this.options.verticalTravelDistance;
      var targetWidth = this.$target.width();
      var left = triggerOffset.left - (targetWidth / 2) - this.options.horizontalOffset;

      if (this.isActive || !this.options.isAnimated) {
        // Position at top destination if already active
        this.$target.css({
          top: topDest,
          left: left
        });
      } else {
        this.$target.css({
          top: topStart,
          left: left
        });
      }
    },

    // Callbacks
    // ----------------------------------------------------------------------

    // Callback called at the start of #init()
    // Returns false if init should stop
    beforeInit: function() {
      return true;
    }
  };

  return Dropdown;
});

define('libra/navigation/cookie-manager',[],function() {
  'use strict';

  function CookieManager(name) {
    this.name = name;
    this.exists = false;
    this.rawValue = null;
    this.value = null;
    this.domain = null;

    // Default expire time at 1 day
    this.expireSeconds = 86400;

    if (document.cookie.length && document.cookie.indexOf(this.name) !== -1) {
      this.exists = true;
    }
  }

  CookieManager.prototype = {

    // Reads this cookie and stores the needed values in this
    read: function() {
      var found = false;

      if (document.cookie.length) {
        var cookieStart = document.cookie.indexOf(this.name);

        if (cookieStart !== -1) {
          found = true;

          var valueStart = cookieStart + this.name.length + 1;
          var cookieEnd = document.cookie.indexOf(';', valueStart);

          // If last cookie in document.cookie, then use length of
          // document.cookie as cookie end
          if (cookieEnd === -1) {
            cookieEnd = document.cookie.length;
          }

          this.rawValue = document.cookie.substring(valueStart, cookieEnd);
        }
      }

      if (!found) {
        this.exists = false;
      }
    },

    // Sets this cookie
    write: function() {
      var options = {};
      options.value = this.name + '=' + this.rawValue;

      var expiresDate = new Date();
      expiresDate.setSeconds(expiresDate.getSeconds() + this.expireSeconds);
      options.expires = '; expires=' + expiresDate.toUTCString();
      options.path = '; path=/';

      // If the domain is not specified then use the current domain
      var domain = this.domain || this.getCurrentHostname();

      // Still override the selected hostname if on localhost because of it's
      // special requirements (it must be an empty string)
      domain = (document.location.hostname === 'localhost') ? '' : domain;

      options.domain = '; domain=' + domain;

      document.cookie = [
        options.value,
        options.expires,
        options.path,
        options.domain
      ].join('');

      this.exists = true;
    },

    // Returns the domain from the hostname but removes all but the first
    // subdomain. This is needed for cases such as portal.aws.amazon.com
    getCurrentHostname: function() {
      var hostname = document.location.hostname;
      var periodCount = hostname.split('.').length - 1;
      if (periodCount > 2) {
        var lastIndex = 0;
        var unneededPeriods = periodCount - 2;
        for (var i = 0, len = unneededPeriods; i < len; i++) {
          lastIndex = hostname.indexOf('.', lastIndex + 1);
        }

        hostname = hostname.substring(lastIndex + 1);
      }

      // If hostname is 'localhost' then set empty hostname
      hostname = (hostname === 'localhost') ? '' : hostname;

      return hostname;
    }
  };

  return CookieManager;
});

define('libra/navigation/utils/language-utils',[
  'libra/navigation/cookie-manager'
], function(CookieManager) {
  'use strict';

  // A mixin to extend language-related functionality on dropdown and footer
  var LanguageUtils = {

    // Name of the cookie which holds the user's language preference
    languageCookieName: 'aws_lang',

    // Adds the language code from the corresponding data attribute and appends
    // the current pathname to the language links
    addCurrentPathnameToLanguageLinks: function(selector) {
      var langLinks = $(selector).find('li[data-language]');
      var origin = window.location.protocol + '//' + window.location.host;
      var pathname = window.location.pathname || '/';
      for (var i = 0, len = langLinks.length; i < len; i++) {
        var $langLink = $(langLinks[i]);

        // Replace the link with the current url, but localized, and keeping
        // any existing query string
        var linkUrl = $langLink.find('a').attr('href');
        var linkQueryString = '';

        var parts = linkUrl.split('?');
        if (parts.length > 1) {
          linkQueryString = '?' + parts[1];
        }

        var langCode = $langLink.attr('data-language');
        if (langCode !== '') {
          var found = false;
          var j = 0;
          var len2 = this.options.supportedLanguages.length;
          while (!found && j < len2) {
            var codeInPath = '/' + this.options.supportedLanguages[j] + '/';
            var idx = pathname.indexOf(codeInPath);
            if (idx === 0) {
              // Remove the existing language code from the pathname
              pathname = pathname.substr(3, pathname.length);
              found = true;
            }

            j++;
          }

          var newUrl;
          if (langCode === this.options.defaultLanguage) {
            newUrl = origin + pathname + linkQueryString;
          } else {
            newUrl = origin + '/' + langCode + pathname + linkQueryString;
          }
          $langLink.find('a').attr('href', newUrl);
        }
      }
    },

    // Updates language cookie on language link selection
    bindPreferredLanguageSelectionEvent: function(selector) {
      var that = this;
      $(selector).on('click', 'li[data-language] a', function() {
        that.setLanguageCookie($(this).data('language'));
      });
    },

    // Sets the language cookie given a value
    setLanguageCookie: function(val) {
      // Determine the top-level domain.
      var parentDomain = '.' + window.location.hostname.split('.').slice(-2).join('.');
      var langCookie = new CookieManager(this.languageCookieName);
      langCookie.rawValue = val;
      langCookie.expireSeconds = 2592000;
      langCookie.domain = parentDomain;
      langCookie.write();
    },

    // Removes upsupported languages from a list of links.
    removeUnsupportedLanguages: function(languageLinkSelector) {
      var $languageLinkContainer = $(languageLinkSelector);
      var langLinks = $languageLinkContainer.find('li[data-language]');

      for (var i = 0, len = langLinks.length; i < len; i++) {
        var $langLink = $(langLinks[i]);
        var langCode = $langLink.data('language');
        if ($.inArray(langCode, this.options.supportedLanguages) === -1) {
          $langLink.remove();
        }
      }
    }
  };

  return LanguageUtils;
});

define('libra/navigation/language-dropdown-mixin',[
  'libra/navigation/utils/language-utils'
], function(LanguageUtils) {
  'use strict';

  // A mixin to extend language dropdown properties to a Dropdown object
  var LanguageDropdownMixin = {

    languageDropdownSelector: '#aws-nav-dropdown-lang',

    hasAlternateLanguages: true,

    // Callback overrides Dropdown#beforeInit
    beforeInit: function() {
      $.extend(this, LanguageUtils);

      // Remove unnecessary options from the language dropdown.
      this.removeUnsupportedLanguages(this.languageDropdownSelector);
      this.removeCurrentLanguage();
      if (!this.hasAlternateLanguages) {
        return false;
      }

      this.addCurrentPathnameToLanguageLinks(this.languageDropdownSelector);
      this.bindPreferredLanguageSelectionEvent(this.languageDropdownSelector);

      return true;
    },

    // Removes current language option from the dropdown.
    removeCurrentLanguage: function() {
      var currentLanguage = this.$trigger.data('language');
      var $languageDropdown = $(this.languageDropdownSelector);
      var langLinks = $languageDropdown.find('li[data-language]');
      var i = 0;
      var len = langLinks.length;
      var linksRemaining = langLinks.length;

      while (i < len) {
        var $langLink = $(langLinks[i]);
        var langCode = $langLink.data('language');

        // Remove the active language
        if (langCode === currentLanguage) {
          $langLink.remove();
          linksRemaining--;
        }
        i++;
      }

      // If there are no alternate languages left, remove the dropdown.
      if (linksRemaining <= 0) {
        this.$trigger.remove();
        $languageDropdown.remove();
        this.hasAlternateLanguages = false;
      }
    }
  };

  return LanguageDropdownMixin;
});

define('libra/navigation/megamenu-mixin',[
  'libra/navigation/utils/navigation-utils'
], function(Util) {
  'use strict';

  var MegamenuMixin = {

    megamenuWidthThreshold: 1260,

    // Horizontal offset of the menu left position to its arrow's left position
    horizontalOffset: 114,

    // Horizontal correction for the trigger icon arrow
    arrowOffset: 3,

    // Padding to ensure between the megamenu and the left of the viewport
    leftWindowPadding: 20,

    // Padding to ensure between the megamenu and the right of the viewport
    rightWindowPadding: 30,

    // Callback overrides Dropdown#beforeInit
    beforeInit: function() {
      if (Util.isLikelyMobile()) {
        // Don't instantiate megamenu
        return false;
      }

      this.doOnWidthThreshold();
      this.watchResize();

      return true;
    },

    // Watches the window resize event and performs actions at debounced
    // intervals
    watchResize: function() {
      var resizeEventName = 'resize.' + this.jQueryEventNamespace + '_deactivate-megamenu';
      Util.debounceWindowEvent(this.doOnWidthThreshold, resizeEventName, 40, this);
    },

    // Performs actions on megamenu given different widths
    doOnWidthThreshold: function() {
      if ($(window).width() < this.megamenuWidthThreshold) {
        if (this.isActive) {
          this.deactivate();
        }

        this.isEnabled = false;
        if (this.$trigger.hasClass('enabled')) {
          this.$trigger.removeClass('enabled');
          this.$trigger.find('a').attr('data-mbox-ignore', 'false');
        }
      } else {
        this.isEnabled = true;
        if (!this.$trigger.hasClass('enabled')) {
          this.$trigger.addClass('enabled');
          this.$trigger.find('a').attr('data-mbox-ignore', 'true');
        }
      }
    },

    // Sets the position of this dropdown's target relative to its trigger
    setPosition: function() {
      var triggerOffset = this.$triggerIcon.offset();
      var triggerPos = this.$triggerIcon.position();
      var triggerLeft = triggerOffset.left;
      var dropdownWidth = this.$target.outerWidth();
      var topDest = this.group.$container.position().top + triggerPos.top + this.options.verticalOffset;
      var topStart = topDest - this.options.verticalTravelDistance;

      // Ideal left is trigger left - offset
      var leftDest = triggerLeft - this.horizontalOffset;

      // Max right of menu is no greater than window width - padding
      var maxLeft = $(window).width() - this.rightWindowPadding - dropdownWidth;
      if (leftDest > maxLeft) {
        leftDest = maxLeft;
      }

      // Min left of menu is window left + padding
      var minLeft = this.leftWindowPadding;
      if (leftDest < minLeft) {
        leftDest = minLeft;
      }

      var leftArrowDest = triggerLeft - leftDest + this.arrowOffset;
      this.$target.find('.aws-nav-popover-arrow').css('left', leftArrowDest);
      this.$target.find('.aws-nav-popover-arrow-inner').css('left', leftArrowDest);

      if (this.isActive || !this.options.isAnimated) {
        // Position at top destination if already active
        this.$target.css({
          top: topDest,
          left: leftDest
        });
      } else {
        this.$target.css({
          top: topStart,
          left: leftDest
        });
      }
    }
  };

  return MegamenuMixin;
});

define('libra/navigation/dropdown-group',[
  'libra/navigation/dropdown',
  'libra/navigation/language-dropdown-mixin',
  'libra/navigation/megamenu-mixin'
], function(Dropdown, LanguageDropdownMixin, MegamenuMixin) {
  'use strict';

  var DropdownGroup = {

    defaults: {
      isTouchOnly: false,
      isAnimated: true
    },

    init: function($container, options) {
      this.options = $.extend({}, this.defaults, options);
      this.$container = $container;

      // Find all dropdowns in the container
      var triggers = this.$container.find('[data-dropdown]');
      for (var i = 0, len = triggers.length; i < len; i++) {
        var id = $(triggers[i]).data('dropdown');
        var dropdown = new Dropdown(triggers[i], this, this.options);

        if (id === 'aws-nav-dropdown-lang') {
          $.extend(dropdown, LanguageDropdownMixin);
        } else if ($('#' + id).hasClass('aws-nav-megamenu')) {
          $.extend(dropdown, MegamenuMixin);
        }

        dropdown.init();
      }

      return this;
    }
  };

  return DropdownGroup;
});

define('libra/navigation/quick-links',[
  'librastandardlib/event-utils/polling-registrar',
  'librastandardlib/logger/logger',
  'librastandardlib/url-utils/getQueryStringParam',
  'libra/navigation/dropdown-group',
  'libra/navigation/utils/navigation-utils'
], function(PollingRegistrar, Logger, getQueryStringParam, DropdownGroup, Util) {
  'use strict';

  var METRIC_ID_QSP_KEY = 'awsm';
  var METRIC_ID_QSP_VALUE = 'ql';

  var defaults = {
    quicklinksSelector: '#aws-nav-quicklinks',
    quicklinksOverflowSelector: '#aws-nav-quicklinks-overflow',
    quicklinksSeparator: '#aws-nav-quicklinks-separator',
    quicklinkSelector: '.aws-nav-quicklink',
    quicklinksDropdownListSelector: '#aws-nav-dropdown-quicklinks ul',
    headerRightSelector: '#aws-nav-header-right',
    jQueryEventNamespace: 'aws_nav-quicklinks',
    quicklinksDropdownTriggerWidth: 85,
    availableWidthCorrection: 18
  };

  // True if the quicklinks have been initialized
  var isQuicklinksShown = false;

  var logger = new Logger('AWSNav');

  function QuicklinksController($container, options) {
    this.options = $.extend({}, defaults, options);
    this.$container = $container;

    this.quicklinks = [];
    this.quicklinksInDropdown = [];
    this.linkWidths = [];
    this.leftBound = null;

    this.$quicklinksContainer = this.$container.find(this.options.quicklinksSelector);
    this.$quicklinksOverflow = this.$container.find(this.options.quicklinksOverflowSelector);
    this.$quicklinksSeparator = this.$container.find(this.options.quicklinksSeparator);
    this.$headerRight = this.$container.find(this.options.headerRightSelector);

    this.logOnQuicklinkParam();

    // Poll to initialize since Quicklinks offer could be in flight
    var that = this;
    var pollingTimeout = 4000;
    var pollingInterval = 100;
    var additionalRenderingTime = 300;
    PollingRegistrar.register(function() {
      // Only instantiate if Quicklinks exist
      that.$quicklinksContainer = that.$container.find(that.options.quicklinksSelector);
      if (that.$quicklinksContainer.length) {
        // Initialize after an additonal arbitrary rendering time to better get
        // the correct dimensions for the Quicklinks layout. This specific time
        // yielded good results for avoiding any Quicklinks irregularities or
        // flicker.
        setTimeout(function() {
          that.init();
        }, additionalRenderingTime);

        return true;
      }
    }, function() {
      // Success is internalized in iteration function
    }, function() {
      // Failure - NOP
    }, pollingTimeout, pollingInterval);
  }

  QuicklinksController.prototype = {
    init: function() {
      this.updateLinksWithMetricIdentifier();
      this.copyAllLinksToDropdown();
      this.getAreaDimensions();
      this.updatePositions();
      this.watchResize();
      this.pollForHeaderRightWidthChange();

      // Initialize any new Dropdowns inside Quicklinks
      DropdownGroup.init(this.$container, this.options);
    },

    // Logs a metric if the Quicklink param is set in the url, in order to
    // detect a potential drop in Quicklinks clicks indicative of a larger
    // issue with the navigation.
    // https://issues.amazon.com/issues/AWSDOM-1681
    logOnQuicklinkParam: function() {
      if (getQueryStringParam(METRIC_ID_QSP_KEY, window.location.search).indexOf(METRIC_ID_QSP_VALUE) === 0) {
        logger.debug('awsm_:comp_nav_QuicklinkClick', 'AI');
      }
    },

    // Appends identifier as query string param to all Quicklinks in order
    // to carry through to next page for metric reporting.
    updateLinksWithMetricIdentifier: function() {
      this.$quicklinksContainer.find('a').each(function(idx, a) {
        var str = [encodeURIComponent(METRIC_ID_QSP_KEY), encodeURIComponent(METRIC_ID_QSP_VALUE + '-' + idx)].join('=');
        var $a = $(a);
        var url = $a.attr('href');
        var separator = (url.indexOf('?') === -1) ? '?' : '&';
        url += separator + str;
        $a.attr('href', url);
      });
    },

    // Bind Event Handlers
    // ----------------------------------------------------------------------

    // Watches the window resize event and performs actions at debounced
    // intervals
    watchResize: function() {
      Util.debounceWindowEvent(function() {
        this.updatePositions();
      }, 'resize.' + this.options.jQueryEventNamespace, 20, this);
    },

    // Polls for change in width in header right area, and updates positions
    // once if changed. Need to do this in order to compensate for CTA button
    // offer which may be in flight, and having a different width than default.
    pollForHeaderRightWidthChange: function() {
      var that = this;
      var pollingTimeout = 2000;
      var pollingInterval = 100;
      var lastWidth = this.$headerRight.outerWidth(true);
      PollingRegistrar.register(function() {
        if (that.$headerRight.outerWidth(true) !== lastWidth) {
          return true;
        }
      }, function() {
        that.updatePositions();
      }, function() {
        // Failure - NOP
      }, pollingTimeout, pollingInterval);
    },

    // Events
    // ----------------------------------------------------------------------

    // Updates the quicklink positions depending on current viewport width
    updatePositions: function() {
      var constrainWidth = $(window).width() - this.leftBound - this.$headerRight.outerWidth(true);
      this.$quicklinksContainer.width(constrainWidth);
      var availableWidth = constrainWidth - this.options.quicklinksDropdownTriggerWidth - this.options.availableWidthCorrection;

      var totalWidth = 0;
      var hasOverflowed = false;
      var overflowedAtIdx = -1;
      for (var i = 0, len = this.quicklinks.length; i < len; i++) {
        totalWidth += this.linkWidths[i];

        if (totalWidth > availableWidth) {
          this.hideLink(i);
          hasOverflowed = true;

          // Remember the index at first overflow
          if (overflowedAtIdx === -1) {
            overflowedAtIdx = i;
          }
        } else {
          this.showLink(i);
        }
      }

      if (hasOverflowed && overflowedAtIdx !== 0) {
        this.$quicklinksOverflow.css('visibility', 'visible');
      } else {
        this.$quicklinksOverflow.css('visibility', 'hidden');
      }

      if (!isQuicklinksShown) {
        this.$quicklinksContainer.css('visibility', 'visible');

        if (this.quicklinks.length) {
          this.$quicklinksSeparator.css('visibility', 'visible');
        }

        isQuicklinksShown = true;
      }
    },

    // Shows a quicklink in the header and hides it in the quicklink dropdown
    showLink: function(idx) {
      $(this.quicklinks).eq(idx).show();

      // Deprioritize hiding quicklink in dropdown
      var that = this;
      setTimeout(function() {
        $(that.quicklinksInDropdown).eq(idx).hide();
      }, 0);
    },

    // Hides a quicklink in the quicklink dropdown and shows it in the header
    hideLink: function(idx) {
      $(this.quicklinks).eq(idx).hide();

      // Deprioritize showing quicklink in dropdown
      var that = this;
      setTimeout(function() {
        $(that.quicklinksInDropdown).eq(idx).show();
      }, 0);
    },

    // Copies all quicklinks in the header to the quicklinks dropdown
    copyAllLinksToDropdown: function() {
      this.$container.find(this.options.quicklinksDropdownListSelector).empty();
      this.quicklinks = this.$quicklinksContainer.find(this.options.quicklinkSelector);
      for (var i = 0, len = this.quicklinks.length; i < len; i++) {
        var $quicklink = $(this.quicklinks[i]);
        this.$container.find(this.options.quicklinksDropdownListSelector)
          .append($('<li><a href="' + $quicklink.children().first().attr('href') + '">' + $quicklink.children().first().html() + '</a></li>'));
      }

      this.quicklinksInDropdown = this.$container.find(this.options.quicklinksDropdownListSelector + ' li');
    },

    // Gets dimensions for the available area of the quicklinks
    getAreaDimensions: function() {
      this.leftBound = this.$quicklinksContainer.offset().left;
      this.linkWidths.length = 0;
      this.quicklinks = this.$quicklinksContainer.find(this.options.quicklinkSelector);
      for (var i = 0, len = this.quicklinks.length; i < len; i++) {
        var $quicklink = $(this.quicklinks[i]);
        var quicklinkClientRect = this.quicklinks[i].getBoundingClientRect();

        // Fallback to outerWidth for IE8
        this.linkWidths[this.linkWidths.length] = ('width' in quicklinkClientRect) ? Math.ceil(quicklinkClientRect.width) : $quicklink.outerWidth();
      }
    }
  };

  return QuicklinksController;
});

define('librastandardlib/obj-utils/mixin',[],function() {
  'use strict';

  // Copies the properties of the source object to the target object.
  // parameters:
  // - target: object, object prototype, or object instance
  // - source: object, or object prototype
  function mixin(target, source) {
    if (typeof target !== 'object' || typeof source !== 'object') {
      return target;
    }

    Object.keys(source).forEach(function(key) {
      if (!target.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    });

    return target;
  }

  return mixin;
});

define('libra/components/pixel-mixin',[],function() {
  'use strict';

  return {
    firePixel: function() {
      if (this.pixelUrl) {
        var url = this.pixelUrl;

        // Add window origin if absolute path, making it easier to test fixtures
        if (/^\/(?!\/)/.test(url)) {
          url = window.location.origin + url;
        }

        setTimeout(function() {
          // Remember fired pixel for testing purposes
          this._firedPixel = url;

          (new Image()).src = url;
        }.bind(this), 0);
      }
    }
  };
});

define('librastandardlib/aws/aws-namespace',[],function() {
  if (typeof AWS !== 'object') {
    AWS = {};
  }

  return AWS;
});

define('libra/core/aws-current-user',[
  'librastandardlib/aws/aws-namespace'
], function() {
  function CurrentUser() {
    this.cookies = $.cookie();
    this.getCurrentUserData();
  }

  CurrentUser.prototype = {
    // Assign attributes based on cookies.
    getCurrentUserData: function() {
      this.isAuthenticated = this.getAuthenticationStatus();
      this.isIAMUser = this.getIsIAMUser();
      this.registrationStatus = this.cookies.regStatus || 'pre-register';
      this.awsAccountId = this.cookies['aws-reg-aid'] || null;
      this.targetVisitorId = this.cookies['aws-target-visitor-id'] || null;
      this.urchinId = this.cookies.__utmc || null;
      this.munchkinId = this.cookies._mkto_trk || null;

      // Use 1st party fallback cookie for SiteCatalyst.
      this.siteCatalystFallbackId = this.cookies.s_fid || null;
    },

    // Set authentication status based on cookie presence.
    getAuthenticationStatus: function() {
      return !!this.cookies['aws-x-main'];
    },

    getIsIAMUser: function() {
      return !!this.cookies['aws-account-alias'];
    }
  };

  AWS.CurrentUser = new CurrentUser();

  return AWS.CurrentUser;
});

define('libra/components/google-rlsa-pixel',[
  'librastandardlib/obj-utils/mixin',
  'libra/components/pixel-mixin',
  'libra/core/aws-current-user'
], function(mixin, PixelMixin, CurrentUser) {
  'use strict';

  var PIXEL_URL = 'https://googleads.g.doubleclick.net/pagead/viewthroughconversion/952612511/?guid=ON&script=0';
  var hasFired = false;
  var regStatusMap = {
    registered: 100,
    'pre-register': 200,
    registering: 300
  };

  function GoogleRLSAPixel() {
    // Only fire once per page
    if (!hasFired) {
      hasFired = true;
      this.pixelUrl = PIXEL_URL + '&data.rs=' + encodeURIComponent(regStatusMap[CurrentUser.registrationStatus]);
      this.firePixel();
    }
  }

  mixin(GoogleRLSAPixel.prototype, PixelMixin);

  Libra.Comp.register({
    name: 'google-rlsa-pixel',
    initFct: function() {
      new GoogleRLSAPixel();
    },
    initTime: 'documentReady'
  });

  return GoogleRLSAPixel;
});

define('libra/footer/page-footer',[
  'libra/navigation/utils/language-utils',
  'libra/components/google-rlsa-pixel'
], function(LanguageUtils) {
  'use strict';

  var PageFooter = {

    defaults: {
      footerLanguageSelector: '#aws-page-footer-lang-links'
    },

    hasAlternateLanguages: false,

    init: function($container, options) {
      this.options = $.extend({}, this.defaults, options);
      $.extend(this, LanguageUtils);
      this.removeUnsupportedLanguages(this.options.footerLanguageSelector);
      this.checkForAlternateLanguages(this.options.footerLanguageSelector);

      if (!this.hasAlternateLanguages) {
        $(this.options.footerLanguageSelector).remove();
      } else {
        this.addCurrentPathnameToLanguageLinks(this.options.footerLanguageSelector);
        this.bindPreferredLanguageSelectionEvent(this.options.footerLanguageSelector);
      }

      return this;
    },

    checkForAlternateLanguages: function(selector) {
      var $languageList = $(selector);
      var currentLanguage = $languageList.data('language');
      var langLinks = $languageList.find('li[data-language]');
      var i = 0;
      var len = langLinks.length;

      while (i < len) {
        var $langLink = $(langLinks[i]);
        var langCode = $langLink.data('language');

        if (langCode !== currentLanguage) {
          this.hasAlternateLanguages = true;
          break;
        }
        i++;
      }
    }
  };

  return PageFooter;
});

define('libra/navigation/popover',[
  'libra/navigation/cookie-manager',
  'libra/navigation/utils/navigation-utils'
], function(CookieManager, Util) {
  'use strict';

  var PopoverController = {

    defaults: {
      isAnimated: true
    },

    init: function($container, options) {
      this.options = $.extend({}, this.defaults, options);
      this.$container = $container;

      new Popover(
        $('.aws-nav-popover[data-popover-anchor="aws-nav-flyout-trigger"]'),
        this.$container,
        this.options
      );

      return this;
    }
  };

  var defaults = {
    popoverSelector: '.aws-nav-popover',
    closeButtonSelector: '.aws-nav-popover-close',
    jQueryEventNamespace: 'aws_nav-popover',
    isAnimated: true,

    // Duration (ms) to fade in a popover
    fadeInDuration: 140,

    // Duration (ms) to fade out a popover
    fadeOutDuration: 90,

    // Initial opacity for a popover fade-in
    startingOpacity: 0.1,

    // Visual width (px) of the popover arrow to correct for horizontal anchor
    // position
    visualArrowWidth: 8,

    // Offset (px) to position the popover below the bottom of its anchor
    verticalOffset: 8,

    // Horizontal offset (px) of the popover arrow relative to its sides
    arrowHorizontalOffset: 20,

    // Duration (ms) to wait before showing the popover
    waitToShowDuration: 600,

    // True if the popover should close on a click outside of itself
    closeOnDocumentClick: true,

    // Durations (ms) to automatically close the popover after initial show.
    // Set a falsy value for no auto-close.
    autoCloseDuration: false,

    // True if the popover should show only on the user's first visit
    onlyFirstVisit: false,

    // Duration (s) to keep track of first time visitors
    firstVisitDuration: 2592000
  };

  var instantiationCount = 0;

  // Cache cookies across popover instantiations
  var firstVisitCookieExists = null;

  function Popover(el, $container, options) {
    this.options = $.extend({}, defaults, options);

    this.instantiationId = instantiationCount;
    instantiationCount++;

    this.$el = $(el);
    this.popoverAnchorId = this.$el.attr('data-popover-anchor');
    this.$anchor = $container.find('#' + this.popoverAnchorId);

    // Override options with any data attributes of the same name
    $.extend(this.options, this.$el.data());

    // Ensure popover has an anchor
    if (this.$anchor.length === 1) {
      if (this.showOnLoad()) {
        this.init();
      }
    }
  }

  Popover.prototype = {
    init: function() {
      this.setPosition();
      this.bindCloseButtonEvent();

      var that = this;
      setTimeout(function() {
        that.activate();
      }, this.options.waitToShowDuration);

      if (this.options.closeOnDocumentClick) {
        this.bindDocumentClickHandler();
      }

      this.listenForCloseEvent();
    },

    // Bind Event Handlers
    // ----------------------------------------------------------------------

    bindCloseButtonEvent: function() {
      var that = this;
      this.$el.find(this.options.closeButtonSelector).on('click', function() {
        that.deactivate();
      });
    },

    // Reposition targets to follow anchors on window resize. Use the
    // instantiationId in order to be able to later remove the event for
    // this popover only.
    bindWindowResizeEvent: function() {
      var that = this;
      Util.debounceWindowEvent(function() {
        that.setPosition();

        // Need extra timeout since target element sometimes takes extra
        // rendering time to get correct position
        setTimeout(function() {
          that.setPosition();
        }, 300);
      }, 'resize.' + this.options.jQueryEventNamespace + '_' + this.instantiationId, 20, this);
    },

    // Removes the resize event for this popover from the window
    destroyWindowResizeEvent: function() {
      $(window).off('resize.' + this.options.jQueryEventNamespace + '_' + this.instantiationId);
    },

    // Binds click handler to document in order to hide popover
    bindDocumentClickHandler: function() {
      var eventNames = [];
      if ('ontouchstart' in window) {
        eventNames.push('touchstart.' + this.options.jQueryEventNamespace + '_' + this.instantiationId);
      }

      // Always add click for multi-input devices
      eventNames.push('click.' + this.options.jQueryEventNamespace + '_' + this.instantiationId);

      var that = this;
      $(document).on(eventNames.join(' '), function(event) {
        // Don't hide if the event originated from within the popover
        if (!$(event.target).closest(that.options.popoverSelector).length) {
          for (var i = 0, len = eventNames.length; i < len; i++) {
            $(document).off(eventNames[i]);
          }
          that.deactivate();
        }
      });
    },

    // Listens for a custom event that can be called from foreign elements in
    // order to hide this popover
    listenForCloseEvent: function() {
      var that = this;
      var eventName = 'custom_' + this.options.jQueryEventNamespace + '_close_' + this.popoverAnchorId;
      $(document).on(eventName, function() {
        that.deactivate();
        $(document).off(eventName);
      });
    },

    // Events
    // ----------------------------------------------------------------------

    // Adds active styles to this popover
    activate: function() {
      if (this.options.isAnimated) {
        this.$el.css({
          opacity: this.options.startingOpacity,
          visibility: 'visible'
        }).animate({
          opacity: 1
        }, {
          duration: this.options.fadeInDuration
        });
      } else {
        this.$el.css({
          opacity: 1,
          visibility: 'visible'
        });
      }

      // Set autoclose if the option is set
      // If autoclose is set, then there's no need for the window resize event
      if (this.options.autoCloseDuration) {
        var that = this;
        setTimeout(function() {
          that.deactivate();
        }, this.options.autoCloseDuration);
      } else {
        this.bindWindowResizeEvent();
      }
    },

    // Removes active styles from this popover
    deactivate: function() {
      if (this.options.isAnimated) {
        this.$el.fadeOut(this.options.fadeOutDuration, function() {
          $(this).css({
            visibility: 'hidden',
            display: 'block',
            top: 0,
            left: 0
          });
        });
      } else {
        this.$el.css({
          visibility: 'hidden',
          top: 0,
          left: 0
        });
      }

      this.destroyWindowResizeEvent();
    },

    setPosition: function() {
      var anchorPos = this.$anchor.offset();
      var anchorWidth = this.$anchor.outerWidth();
      var anchorHeight = this.$anchor.outerHeight();
      var anchorMiddlePos = anchorPos.left + (anchorWidth / 2);
      var popoverWidth = this.$el.outerWidth();
      var popoverPos = this.$el.offset();

      // Position of the arrow in the middle
      var popoverTopMiddleArrowPos = popoverPos.left + (popoverWidth / 2);
      var leftDestOfAnchorHavingTopMiddleArrow = anchorMiddlePos - (popoverTopMiddleArrowPos - popoverPos.left);

      // Position of the arrow on the top left of the popover
      var popoverTopLeftArrowPos = popoverPos.left + this.options.arrowHorizontalOffset;
      var leftDestOfAnchorHavingTopLeftArrow = anchorMiddlePos - (popoverTopLeftArrowPos - popoverPos.left + this.options.visualArrowWidth);

      // Position of the arrow on the top right of the popover
      var popoverTopRightArrowPos = popoverPos.left + popoverWidth - this.options.arrowHorizontalOffset;
      var leftDestOfAnchorHavingTopRightArrow = anchorMiddlePos - (popoverTopRightArrowPos - popoverPos.left - this.options.visualArrowWidth);

      var leftDest = leftDestOfAnchorHavingTopMiddleArrow;

      var navHeaderMargin = 0;
      if (leftDestOfAnchorHavingTopMiddleArrow < navHeaderMargin) {
        this.$el.addClass('aws-top-left');
        leftDest = leftDestOfAnchorHavingTopLeftArrow;
      } else if ((leftDestOfAnchorHavingTopMiddleArrow + popoverWidth) > ($(window).width() - navHeaderMargin)) {
        this.$el.addClass('aws-top-right');
        leftDest = leftDestOfAnchorHavingTopRightArrow;
      }

      this.$el.css({
        top: (anchorPos.top + anchorHeight + this.options.verticalOffset),
        left: leftDest
      });
    },

    // Show/Hide Conditions
    // ----------------------------------------------------------------------

    // Returns a boolean of whether to show the popover on load
    showOnLoad: function() {
      if (this.options.onlyFirstVisit) {
        if (!this.isFirstTimeVisitor()) {
          return false;
        }
      }

      // Show on initialization by default
      return true;
    },

    // Returns true if the visitor has not visited the site in 30 days
    isFirstTimeVisitor: function() {
      if (firstVisitCookieExists === null) {
        var visitorCookie = new CookieManager('aws-first-visit-2');
        firstVisitCookieExists = visitorCookie.exists;
        visitorCookie.domain = '.' + window.location.hostname;
        visitorCookie.expireSeconds = this.options.firstVisitDuration;
        visitorCookie.rawValue = '0';
        visitorCookie.write();
      }

      return !firstVisitCookieExists;
    }
  };

  return PopoverController;
});

define('libra/navigation/mouse-tracker',[],function() {
  'use strict';

  // Keeps track of intersection rectangles and fires callback events when the mouse
  // enters or leaves the set of rectangles.
  //
  // This hash holds objects with the following members:
  // @rects: {Array of Arrays}, 4-tuples representing rectangles [x, y, width, height]
  //   Mouse can be inside any rectangle to be considered in bounds
  // @mouseMove: {Function} (optional), called when mouse goes over
  // @mouseOut: {Function} (optional), called when mouse goes out

  var regions = [], // array of regions
    n = 3, // number of cursor positions to remember
    cursor = [{ x: 0, y: 0 }], // array of current and prior positions, which rotate via c
    c = 0, // 0..n-1: which element in cursor reflects the most recent coordinates
    listening = false;

  var callbackArgs = function() {
    var pCursors = [];

    // Build array of prior cursors, where elem 0 is immediate prior, elem 1 is prior to that, etc.
    for (var i = 1; i < n; i++) {
      pCursors.push(cursor[(c - i + n) % n]);
    }

    // Deep copy, so internal cursor objects are never exposed
    return $.extend(true, {}, { cursor: cursor[c], priorCursors: pCursors });
  };

  // Check if the cursor has 'flipped' from being inside to outside or vice versa.
  var check = function(immediately) {
    for (var i = 0; i < regions.length; i++) {
      var r = regions[i];

      var inside = $.grep(r.rects, function(j) {
        return cursor[c].x >= j[0] && cursor[c].y >= j[1] && cursor[c].x < j[0] + j[2] && cursor[c].y < j[1] + j[3];
      }).length > 0;

      // Callbacks only called on the transition, not continuously
      if (r.inside !== null && inside && !r.inside && r.mouseEnter) {
        r.inside = r.mouseEnter(callbackArgs());
      } else if (r.inside !== null && !inside && r.inside && r.mouseLeave) {
        r.inside = !r.mouseLeave(immediately, callbackArgs());
      }
    }
  };

  var startListening = function() {
    $(document).mousemove(function(e) {
      c = (c + 1) % n;
      cursor[c] = { x: e.pageX, y: e.pageY };
      check();
    });
    listening = true;
  };

  return {
    // The mouseTracker starts listening for DOM events the first
    // time anyone registers their region. This has two benefits over
    // doing it on domReady:
    // 1.)  Now it can listen while the page is still parsing, so mouseleave
    //      events fire as expected
    // 2.)  MouseMove isn't bound unless a popover actually gets displayed,
    //      which is good because the MouseMove event -- firing constantly
    //      while the mouse moves -- is resource intensive.
    //
    add: function(rectsArray, options) {
      if (!listening) {
        startListening();
      }

      var r = $.extend({ rects: rectsArray }, options);
      regions.push(r);

      return r;
    },

    remove: function(region) {
      for (var i = 0; i < regions.length; i++) {
        if (regions[i] === region) {
          regions.splice(i, 1);

          return;
        }
      }
    },

    checkNow: function() {
      check(true);
    },

    getCallbackArgs: function() {
      return callbackArgs();
    }
  };
});

define('libra/navigation/calculate-delay',[],function() {
  'use strict';

  var mouseTrackerDefaults = {
    mouseTrackerMajorDelay: 220,
    mouseTrackerMinorDelay: 80
  };

  // Returns a two character code indicating where the cursor is in relation to
  // the rectangle
  var cursorPosition = function(cursor, rect) {
    var h = 'c', // default, centered horizontally on the rect
      v = 'c'; // default, centered vertically on the rect

    // Depending on where the cursor is relative to each potential destination rect
    if (cursor && rect) {
      if (cursor.x < rect.x1) {
        // To the left of the rect
        h = 'l';
      } else if (cursor.x > rect.x2) {
        // To the right of the rect
        h = 'r';
      }

      if (cursor.y < rect.y1) {
        // To the top of the rect
        v = 't';
      } else if (cursor.y > rect.y2) {
        // To the bottom of the rect
        v = 'b';
      }
    }

    return v + h;
  };

  // Calculates a delay in ms for use in setTimeout(), based on cursor movement
  var calculateDelay = function(args, rect) {
    // If the cursor is leaving the category, but we think it's headed to another part of the same category,
    //    (the subcategory pane) we wait to give the user time to get there.
    // The first call to this function is always on a transition from one area to another;
    // subsequent calls may be "chained" (via setTimeout()), as we wait to see where the cursor stops.
    var delay = 0,
      c = args.cursor,
      p1 = args.priorCursors[0] || {},
      p2 = args.priorCursors[1] || {};

    // If the user is mousing very slowly, horizontal motion may not be detectable, because of coordinates
    //    are limited to the pixel grid.  So, if that appears to be the case, wait a brief time instead of
    //    trying to discern where the cursor is headed.
    if (c.x === p1.x && Math.abs(c.y - p1.y) < 2 && c.x > p2.x) {
      delay = mouseTrackerDefaults.mouseTrackerMinorDelay;
    } else {
      var r = rect,
        pts = [c, p1];

      // ...pick the two most extreme corners of that destination rect.
      // (current design means it's only possible for cursor to be to the left of the dest rect)
      switch (cursorPosition(c, r)) {
        case 'tl':
          pts.push({ x: r.x1, y: r.y2 }, { x: r.x2, y: r.y1 });
          break;
        case 'bl':
          pts.push({ x: r.x1, y: r.y1 }, { x: r.x2, y: r.y2 });
          break;
        case 'cl':
          pts.push({ x: r.x1, y: r.y1 }, { x: r.x1, y: r.y2 });
          break;
        default:
          pts.push({ x: 0, y: 0 }, { x: 0, y: 0 });
          delay = -1;
      }

      if (delay === 0) {
        // The original mouse position and the two extreme corners from the potential destination
        // rect form a triangle.  If the new mouse position is inside that triangle, then we
        // can conclude that the user is moving the mouse towards the destination rect.
        //
        // The math: Take the new mouse position and each pair of points from the previous triangle.
        // This gives three new triangles.  If the total area of the three new triangles is the same
        // as the original triangle, the new mouse position must be within the original triangle,
        // and the user must be moving towards the destination.
        // The cheapest math I could find for these computations uses barycentric coordinates,
        // cribbed from:  http://steve.hollasch.net/cgindex/math/barycentric.html
        var b0 = (pts[2].x - pts[1].x) * (pts[3].y - pts[1].y) - (pts[3].x - pts[1].x) * (pts[2].y - pts[1].y),
          b1 = ((pts[2].x - pts[0].x) * (pts[3].y - pts[0].y) - (pts[3].x - pts[0].x) * (pts[2].y - pts[0].y)) / b0,
          b2 = ((pts[3].x - pts[0].x) * (pts[1].y - pts[0].y) - (pts[1].x - pts[0].x) * (pts[3].y - pts[0].y)) / b0,
          b3 = ((pts[1].x - pts[0].x) * (pts[2].y - pts[0].y) - (pts[2].x - pts[0].x) * (pts[1].y - pts[0].y)) / b0;

        delay = (b1 > 0 && b2 > 0 && b3 > 0 ? mouseTrackerDefaults.mouseTrackerMajorDelay : 0);
      }
    }

    return delay;
  };

  return calculateDelay;
});

define('libra/navigation/flyout',[
  'libra/navigation/utils/navigation-utils',
  'libra/navigation/mouse-tracker',
  'libra/navigation/calculate-delay'
], function(Util, MouseTracker, calculateDelay) {
  'use strict';

  var defaults = {
    isAnimated: true,
    isTouchOnly: false,

    // Duration (ms) to expand a flyout
    expandDuration: 170,

    // Duration (ms) to collapse a flyout
    collapseDuration: 210,

    // Delay (ms) before a flyout is collapsed
    timeout: 280,

    // The outer height of the flyout triggers used by mousetracker
    triggerOuterHeight: 33,

    // A high and arbitrary base for flyout zIndexes to work backwards from
    zIndexBase: 5900
  };

  // Animated state is one of collapsed: 'x', collapsing: '-', expanded: 'o', expanding: '+'
  var AnimatedState = {
    COLLAPSED: 'x',
    COLLAPSING: '-',
    EXPANDED: 'o',
    EXPANDING: '+'
  };

  function Flyout(triggerEl, group, options) {
    this.options = $.extend({}, defaults, options);

    // Trigger element
    this.$trigger = $(triggerEl);

    // Element id
    this.id = this.$trigger.attr('data-flyout');

    // The element that contains content
    this.$target = $('#' + this.id);

    // Reference to the instantiating flyout group
    this.group = group;

    // The containing element that moves positions horizontally
    this.$container = this.$target.closest(this.group.options.flyoutPanelSelector);

    // Reference to the parent flyout
    this.parent = null;

    // 0-based level in the tree
    this.level = null;

    // Initial Animated state
    this.state = AnimatedState.COLLAPSED;

    // True if mouse trackers are enabled for this flyout
    this.isMouseTrackerEnabled = false;

    // Timeout set to clear the timeouts of descendants
    this.clearTimeoutsOfDescendants = null;

    // Function derived from setTimeout used for the root flyout only
    this.timeout = null;
  }

  Flyout.prototype = {

    // Events
    // ----------------------------------------------------------------------

    // Toggles this flyout
    toggle: function() {
      // eslint-disable-next-line default-case
      switch (this.state) {
        case AnimatedState.COLLAPSED:
          this.expand();
          break;
        case AnimatedState.EXPANDED:
          this.collapse();
          break;
        case AnimatedState.EXPANDING:
          this.collapse();
          break;
        case AnimatedState.COLLAPSING:
          this.expand();
          break;
      }
    },

    // Expands this flyout
    expand: function() {
      var i, len;

      // If parent is not expanded then don't expand this flyout
      if (this.parent.state === AnimatedState.COLLAPSED || this.parent.state === AnimatedState.COLLAPSING) {
        return true;
      }

      // Locally cache siblings
      var siblings = this.siblings();

      // Give zIndex priority over siblings for all scenarios
      this.giveZIndexPriority(siblings);

      var that = this;
      var newLeftPos = this.group.flyoutPanelLeftPositions[this.level];

      if (this.state === AnimatedState.EXPANDED || this.state === AnimatedState.EXPANDING) {
        // Done checking anything else from this point
        return true;
      } else if (this.state === AnimatedState.COLLAPSING) {
        this.state = AnimatedState.EXPANDING;

        // Disable any mousetrackers on siblings
        for (i = 0, len = siblings.length; i < len; i++) {
          siblings[i].isMouseTrackerEnabled = false;
        }

        // This flyout is collapsing so stop any existing animations and
        // reverse direction
        this.$container.stop({ clearQueue: true }).animate({
          left: newLeftPos
        }, {
          duration: this.options.expandDuration,
          done: function() {
            // Only execute if expected state has not been changed by siblings
            if (that.state === AnimatedState.EXPANDING) {
              that.state = AnimatedState.EXPANDED;
              that.isMouseTrackerEnabled = true;
            }
          }
        });

        // Immediately add active class to trigger
        this.$trigger.addClass('active');

        // Done checking anything else from this point
        return true;
      }

      // State must be collapsed at this point

      if (this.level === 0) {
        this.group.onRootFlyoutActivation();
      }

      if (this.hasExpandedSiblings(siblings)) {
        // Collapse any active children of active siblings
        var activeChildrenOfActiveSiblings = this.activeChildrenOfActiveSiblings();
        for (i = 0, len = activeChildrenOfActiveSiblings.length; i < len; i++) {
          activeChildrenOfActiveSiblings[i].collapse();
        }

        // Has already-expanded siblings so just need to give zIndex priority
        // to this flyout (already done above)
        this.state = AnimatedState.EXPANDED;
        this.giveMouseTrackerPriority(siblings);
        for (i = 0, len = siblings.length; i < len; i++) {
          siblings[i].state = AnimatedState.COLLAPSED;
          siblings[i].$trigger.removeClass('active');
          siblings[i].$target[0].scrollTop = 0;
        }
      } else if (this.hasExpandingSiblings(siblings)) {
        // Has currently expanding siblings so allow common container to
        // continue to animate and show this flyout
        this.state = AnimatedState.EXPANDED;
        this.giveMouseTrackerPriority(siblings);
        for (i = 0, len = siblings.length; i < len; i++) {
          siblings[i].state = AnimatedState.COLLAPSED;
          siblings[i].$trigger.removeClass('active');
          siblings[i].$target[0].scrollTop = 0;
        }
      } else if (this.hasCollapsingSiblings(siblings)) {
        // Has currently collapsing siblings so stop any existing animations
        // and reverse direction

        this.state = AnimatedState.EXPANDING;
        for (i = 0, len = siblings.length; i < len; i++) {
          siblings[i].state = AnimatedState.COLLAPSED;
          siblings[i].$trigger.removeClass('active');
          siblings[i].$target[0].scrollTop = 0;
        }

        this.$container.stop({ clearQueue: true }).animate({
          left: newLeftPos
        }, {
          duration: this.options.expandDuration,
          done: function() {
            // Only execute if expected state has not been changed by siblings
            if (that.state === AnimatedState.EXPANDING) {
              that.state = AnimatedState.EXPANDED;
              that.isMouseTrackerEnabled = true;
            }
          }
        });
      } else {
        // This flyout and its siblings are collapsed so position under parent
        // and show, then animate to the right

        // eslint-disable-next-line no-lonely-if
        if (this.options.isAnimated) {
          this.state = AnimatedState.EXPANDING;

          // Immediately move the given flyout under its parent and show
          this.$container[0].style.left = this.group.flyoutPanelParentLeftPositions[this.level] + 'px';
          this.$container[0].style.visibility = 'visible';

          this.$container.animate({
            left: newLeftPos
          }, {
            duration: this.options.expandDuration,
            done: function() {
              // Only execute if state has not been changed by its siblings
              if (that.state === AnimatedState.EXPANDING) {
                that.state = AnimatedState.EXPANDED;
                that.isMouseTrackerEnabled = true;
              }
            }
          });
        } else {
          this.state = AnimatedState.EXPANDED;
          this.$container[0].style.left = newLeftPos + 'px';
          this.$container[0].style.visibility = 'visible';
          that.isMouseTrackerEnabled = true;
        }
      }

      // Immediately add active class to trigger for all scenarios
      this.$trigger.addClass('active');
    },

    // Collapses this flyout
    collapse: function() {
      var i, len;
      var that = this;

      // eslint-disable-next-line new-cap
      var dfd = $.Deferred();

      var onCollapsed = function() {
        that.state = AnimatedState.COLLAPSED;

        that.$container[0].style.visibility = 'hidden';

        if (that.level === 0) {
          that.group.onRootFlyoutDeactivation();
        }

        that.$target[0].scrollTop = 0;

        dfd.resolve();
      };

      var onDone = function() {
        // Only execute if expected state has not been changed by siblings
        if (that.state === AnimatedState.COLLAPSING) {
          onCollapsed();
        }
      };

      var onFail = function() {
        dfd.reject();
      };

      if (this.state === AnimatedState.COLLAPSED || this.state === AnimatedState.COLLAPSING) {
        // Don't do anything if this is already collapsed or collapsing
        return false;
      } else if (this.state === AnimatedState.EXPANDING) {
        this.state = AnimatedState.COLLAPSING;
        this.isMouseTrackerEnabled = false;

        // This flyout is expanding so stop any existing animations and
        // reverse direction
        this.$container.stop({ clearQueue: true }).animate({
          left: that.group.flyoutPanelParentLeftPositions[that.level]
        }, {
          duration: this.options.collapseDuration,
          done: onDone,
          fail: onFail
        });
      } else if (this.state === AnimatedState.EXPANDED) {
        this.state = AnimatedState.COLLAPSING;
        this.isMouseTrackerEnabled = false;
        var activeChildren = this.activeChildren();

        if (this.options.isAnimated) {
          // Create animation functions for any active children
          var animations = [];
          for (i = 0, len = activeChildren.length; i < len; i++) {
            animations[animations.length] = (function(j) {
              return activeChildren[j].collapse();
            })(i);
          }

          var childAnimation = {};
          if (activeChildren.length) {
            // Only need to collapse 1 active child because all children
            // will be part of the same panel
            childAnimation = animations[0];
          }

          $.when(childAnimation).done(function() {
            // Collapse this
            that.$container.animate({
              left: that.group.flyoutPanelParentLeftPositions[that.level]
            }, {
              duration: that.options.collapseDuration,
              done: onDone,
              fail: onFail
            });
          });
        } else {
          // Animations are disabled so immediately collapse this and any
          // active children
          for (i = 0, len = activeChildren.length; i < len; i++) {
            activeChildren[i].collapse();
          }
          onCollapsed();
        }
      }

      // Remove active class from trigger for all scenarios
      this.$trigger.removeClass('active');

      // Return the promise for collapse recursion
      return dfd.promise();
    },

    // Sets up a mouseTracker for the given flyout
    setupMouseTrackers: function(viewportHeight) {
      var that = this;

      // Find the would-be coordinates of the destination rectangle
      var x1 = this.group.flyoutPanelLeftPositions[this.level];
      var y1 = this.$target.offset().top;
      var destinationRect = {
        x1: x1,
        y1: y1,
        x2: x1 + this.group.options.flyoutPanelWidths[this.level],
        y2: y1 + viewportHeight
      };

      var leaveTarget = function() {
        if (that.isMouseTrackerEnabled) {
          that.inTarget = false;

          // Clear any timeouts at this level because we're setting a new one
          that.group.clearTimeoutRegistry(that.level);

          if (that.level === 1) {
            // Set a short timeout to clear any timeouts set to close
            // descendants. Set this to the variable below so it can be
            // canceled upon entering any triggers.
            that.clearTimeoutsOfDescendants = setTimeout(function() {
              that.group.clearTimeoutRegistry(2);
            }, 10);
          }

          // Set a timeout to collapse this flyout
          that.group.timeoutRegistry[that.group.timeoutRegistry.length] = {
            level: that.level,
            fn: setTimeout(function() {
              // Collapse either this flyout or the root flyout (which will close
              // this flyout in a deferred manner) depending on whether the mouse
              // is inside the root target.
              if (that.parent.inTarget) {
                that.collapse();
              } else {
                // If collapsing the root flyout, the whole menu is going down so
                // clear the registry to prevent other flyouts with timeouts from
                // collapsing. This would ruin the interaction because the
                // other flyouts collapsing asynchronously would immediately
                // collapse their siblings.
                that.group.clearTimeoutRegistry();

                that.group.rootFlyout.collapse();
              }
            }, that.options.timeout)
          };
        }
      };
      this.$container.on('mouseleave', leaveTarget);
      this.group.eventStack[this.group.eventStack.length] = {
        obj: this.$container,
        eventType: 'mouseleave',
        handler: leaveTarget
      };

      var enterTarget = function() {
        if (that.state === AnimatedState.EXPANDED || that.state === AnimatedState.EXPANDING) {
          // Set a state that is used to determine whether mousing off child
          // target will close itself or the root target instead (in the case
          // that the mouse moves off the entire flyout).
          that.inTarget = true;

          // Clear any existing timeouts in the timeout registry
          that.group.clearTimeoutRegistry();
          clearTimeout(that.group.rootFlyout.timeout);
        }
      };
      this.$container.on('mouseenter', enterTarget);
      this.group.eventStack[this.group.eventStack.length] = {
        obj: this.$container,
        eventType: 'mouseenter',
        handler: enterTarget
      };

      var leaveTrigger = function() {
        if (that.parent.isMouseTrackerEnabled) {
          // Clear any timeouts at this level because there's a new one set
          // below
          that.group.clearTimeoutRegistry(that.level);

          // Set a timeout to collapse this flyout
          that.group.timeoutRegistry[that.group.timeoutRegistry.length] = {
            level: that.level,
            fn: setTimeout(function() {
              that.collapse();
            }, that.options.timeout)
          };
        }
      };
      this.$trigger.on('mouseleave', leaveTrigger);
      this.group.eventStack[this.group.eventStack.length] = {
        obj: this.$trigger,
        eventType: 'mouseleave',
        handler: leaveTrigger
      };

      // mouseEnter function to be passed to mouseTracker
      var enterTrigger = function(args) {
        if (that.parent.isMouseTrackerEnabled) {
          var delay = calculateDelay(args, destinationRect);

          // Clear any timeouts at this level because we're setting a new one
          that.group.clearTimeoutRegistry(that.level);

          // Clear timeout set on leaveTrigger that's set to clear timeouts of descendants because it would cancel the timeout set below
          clearTimeout(that.group.rootFlyout.clearTimeoutsOfDescendants);
          clearTimeout(that.clearTimeoutsOfDescendants);

          if (that.hasActiveSiblings()) {
            // Set a timeout to expand this flyout using the timeout delay
            // calculated by mousetracker
            that.group.timeoutRegistry[that.group.timeoutRegistry.length] = {
              level: that.level,
              fn: setTimeout(function() {
                that.expand();
              }, delay)
            };
          } else {
            // Don't need the mousetracker delay if this is the first sibling
            // to expand
            that.expand();
          }

          return true;
        }
      };

      // Call the mouse tracker and pass it the coordinates of the trigger
      // along with the enterTrigger function above

      // This hash holds objects with the following members:
      // @rects: {Array of Arrays}, 4-tuples representing rectangles [x, y, width, height]
      //   Mouse can be inside any rectangle to be considered in bounds
      // @mouseMove: {Function} (optional), called when mouse goes over
      // @mouseOut: {Function} (optional), called when mouse goes out
      this.group.mouseTrackerRegistry[this.id] = MouseTracker.add(
        [
          [
            this.group.flyoutPanelLeftPositions[this.level - 1],
            this.$trigger.offset().top,
            this.group.options.flyoutPanelWidths[this.level - 1],
            this.options.triggerOuterHeight
          ]
        ],
        {
          inside: false,
          mouseEnter: enterTrigger,

          // Mouse leave for mouse tracker is unused in this implementation
          mouseLeave: function() {
            return true;
          }
        }
      );
    },

    // Traversal
    // ----------------------------------------------------------------------

    // Returns an array of flyout object siblings of this flyout
    siblings: function() {
      var tree = this.group.tree;
      var siblings = [];

      for (var key in tree) {
        if (tree.hasOwnProperty(key)) {
          var node = tree[key];

          if (node.level === this.level) {
            if (key !== this.id) {
              siblings[siblings.length] = node;
            }
          }
        }
      }

      return siblings;
    },

    // Returns an array of flyout object children of this flyout
    children: function() {
      var tree = this.group.tree;
      var children = [];

      for (var key in tree) {
        if (tree.hasOwnProperty(key)) {
          var node = tree[key];

          if (node.level === this.level + 1) {
            children[children.length] = node;
          }
        }
      }

      return children;
    },

    // Returns an array of flyout object descendants of this flyout
    descendants: function() {
      var tree = this.group.tree;
      var descendants = [];

      for (var key in tree) {
        if (tree.hasOwnProperty(key)) {
          var node = tree[key];

          // Only check the node if it is possibly a descendant, having a
          // level greater than the given node
          if (node.level > this.level) {
            if (node.hasAncestor(this)) {
              descendants[descendants.length] = node;
            }
          }
        }
      }

      return descendants;
    },

    // Returns an array of active children of any active siblings of this flyout
    activeChildrenOfActiveSiblings: function() {
      var tree = this.group.tree;
      var children = [];

      for (var key in tree) {
        if (tree.hasOwnProperty(key)) {
          var node = tree[key];

          if (node.level === this.level) {
            if (node.state === AnimatedState.EXPANDED || node.state === AnimatedState.EXPANDING) {
              children = children.concat(node.activeChildren());
            }
          }
        }
      }

      return children;
    },

    // Returns true if the given flyout is an ancestor of this flyout
    hasAncestor: function(possibleAncestor) {
      if (this.parent.id === possibleAncestor.id) {
        // Found the possibleAncestor in the ancestor chain
        return true;
      } else if (this.parent.level === 0) {
        // Reached the top of the tree
        return false;
      }

      // Continue to recurse up the tree
      // eslint-disable-next-line no-useless-call
      return this.parent.hasAncestor.call(this.parent, possibleAncestor);
    },

    // Returns true if this flyout has any expanded siblings
    hasExpandedSiblings: function(siblings) {
      siblings = siblings || this.siblings();
      var found = false;
      var i = 0;
      var len = siblings.length;
      while (!found && i < len) {
        if (siblings[i].state === AnimatedState.EXPANDED) {
          found = true;
        }
        i++;
      }

      return found;
    },

    // Returns true if this flyout has any currently expanding siblings
    hasExpandingSiblings: function(siblings) {
      siblings = siblings || this.siblings();
      var found = false;
      var i = 0;
      var len = siblings.length;
      while (!found && i < len) {
        if (siblings[i].state === AnimatedState.EXPANDING) {
          found = true;
        }
        i++;
      }

      return found;
    },

    // Returns true if this flyout has any expanded or expanding siblings
    hasActiveSiblings: function(siblings) {
      siblings = siblings || this.siblings();
      var found = false;
      var i = 0;
      var len = siblings.length;
      while (!found && i < len) {
        if (siblings[i].state === AnimatedState.EXPANDED || siblings[i].state === AnimatedState.EXPANDING) {
          found = true;
        }
        i++;
      }

      return found;
    },

    // Returns true if this flyout has any currently collapsing siblings
    hasCollapsingSiblings: function(siblings) {
      siblings = siblings || this.siblings();
      var found = false;
      var i = 0;
      var len = siblings.length;
      while (!found && i < len) {
        if (siblings[i].state === AnimatedState.COLLAPSING) {
          found = true;
        }
        i++;
      }

      return found;
    },

    // Returns all children that are in a state of expanded or expanding
    activeChildren: function() {
      var children = this.children();
      var activeChildren = [];

      for (var i = 0, len = children.length; i < len; i++) {
        var child = children[i];
        if (child.state === AnimatedState.EXPANDED || child.state === AnimatedState.EXPANDING) {
          activeChildren[activeChildren.length] = child;
        }
      }

      return activeChildren;
    },

    // Style Manipulations
    // ----------------------------------------------------------------------

    // Set zIndex on the flyout container
    setContainerZIndex: function() {
      this.$container[0].style.zIndex = this.options.zIndexBase - (parseInt(this.level, 10) * 100);
    },

    // Gives css zIndex priority to this flyout amongst its siblings
    giveZIndexPriority: function(siblings) {
      var zIndexBase = this.options.zIndexBase - (parseInt(this.level, 10) * 100);

      // First give the given flyout the highest zIndex
      this.$target[0].style.zIndex = zIndexBase + siblings.length;

      // Assign zIndexes starting at the base to other flyouts at this level
      for (var i = 0, len = siblings.length; i < len; i++) {
        siblings[i].$target[0].style.zIndex = zIndexBase++;
      }
    },

    // Enables mousetracker on this flyout and disables for all its siblings
    giveMouseTrackerPriority: function(siblings) {
      for (var i = 0, len = siblings.length; i < len; i++) {
        siblings[i].isMouseTrackerEnabled = false;
      }
      this.isMouseTrackerEnabled = true;
    }
  };

  return Flyout;
});

define('libra/navigation/flyout-group',[
  'libra/navigation/utils/navigation-utils',
  'libra/navigation/mouse-tracker',
  'libra/navigation/calculate-delay',
  'libra/navigation/flyout',
  'librastandardlib/vendor/hoverintent/hoverIntent',
  'librastandardlib/event-utils/onWindowLoad'
], function(Util, MouseTracker, calculateDelay, Flyout, hoverIntent, onWindowLoad) {
  'use strict';

  var defaults = {
    rootFlyoutTriggerSelector: '#aws-nav-flyout-trigger',
    searchfieldSelector: '#aws-nav-search',
    navSelector: '#aws-nav',
    footerSelector: '#aws-page-footer',
    flyoutPanelSelector: '.aws-nav-flyout',
    flyoutPanelContentSelector: '.aws-nav-flyout-content',
    jQueryEventNamespace: 'aws_nav-flyout-group',
    isAnimated: true,
    isTouchOnly: false,

    // Hover intent sensitivity for the root flyout hover
    hoverSensitivity: 7,

    // Hover intent interval (ms) for the root flyout hover
    hoverInterval: 50,

    // Viewport width (px) at which the mobile layout will cease
    mobileLayoutWidthThreshold: 768,

    // Width (px) of each flyout panel
    flyoutPanelWidths: [281, 320, 320]
  };

  var buildTree = function(parent, tree, level) {
    // If the tree is empty, initialize it and add the parent object as the
    // root
    if (tree === undefined) {
      tree = {};
      parent.parent = 0;
      parent.level = 0;
      tree[parent.id] = parent;
    }

    level = level || 1;

    // Find any triggers within the parent object
    var triggers = parent.$target.find('a[data-flyout]');

    // Add all the child flyouts as objects to the tree
    for (var i = 0, len = triggers.length; i < len; i++) {
      var flyout = new Flyout(triggers[i], this, this.options);
      flyout.parent = parent;
      flyout.level = level;
      tree[flyout.id] = flyout;

      // Recursively add all the child flyout descendants to the tree
      buildTree.call(this, flyout, tree, level + 1);
    }

    return tree;
  };

  // Simple cached values
  var footerHeight = null;
  var headerHeight = null;
  var flyoutPanelElemsStyles = null;
  var $flyoutPanelContentElems = null;

  function FlyoutGroup($container, options) {
    this.options = $.extend({}, defaults, options);

    // The HTML element that contains the flyout group
    this.$container = $container;

    // A tree data structure of flyout objects within the container element
    this.tree = {};

    // The root flyout in the tree
    this.rootFlyout = null;

    // Registry of timeouts by id
    this.timeoutRegistry = [];

    // An array of objects containing currently active events in the
    // form of [{ obj, eventType, handler }]
    this.eventStack = [];

    // Registry of mouseTracker regions by flyout id
    this.mouseTrackerRegistry = {};

    // True if the flyout should lock the body scroll when open
    this.isFixedPositionLayout = true;

    // List of flyouts having enabled mousetrackers to be remembered at
    // beginning of scroll and restored at end of scroll.
    this.flyoutsHavingEnabledMouseTrackersAtScrollTime = [];

    // Viewport height change after input focus. This is needed for iOS7
    // UIWebView, specifically Mobile Chrome on iOS7
    this.viewportHeightBeforeInputFocus = null;
    this.viewportHeightChangeAfterInputFocus = 0;

    // Header z-index should be lower than the footer z-index when the flyout is open
    // because the flyout should be below the footer.
    // When the flyout is closed, the header z-index should be higher than the footer z-index,
    // because the expanded card (whose z-index = 6002) should be over the footer and below the header.
    this.footerZIndexFlyoutClosed = 6001;
    this.footerZIndexFlyoutOpen = 6003;
    this.$footer = $(this.options.footerSelector);

    // Precalculate flyout panel left target positions
    this.flyoutPanelLeftPositions = [];
    this.flyoutPanelParentLeftPositions = [];
    this.calculateFlyoutPanelLeftPositions();

    this.init();
  }

  FlyoutGroup.prototype = {
    init: function() {
      this.rootFlyout = new Flyout(this.options.rootFlyoutTriggerSelector, this, this.options);
      this.tree = buildTree.call(this, this.rootFlyout);

      // Immediately cache heights
      this.cacheHeaderHeight();
      this.cacheFooterHeight();

      // Bind events depending on touch capability
      if (Util.isLikelyMobile() || this.options.isTouchOnly) {
        this.options.isTouchOnly = true;
        this.bindTouchEvents();

        if (Util.isLikelyMobile()) {
          // If ChromeOS on iOS7 - specifically UIWebView on iOS7, watch inputs
          // for focus because virtual keyboard will change the viewport height
          // (to normal viewport minus the keyboard height). Since the viewport
          // height is used to calculate the flyout panel content heights, we
          // need to figure this adjustment into the viewport calculations for
          // the flyout panel content height resizing.
          this.watchOrientationChangeEvent();
          this.watchInputFocusEvents();
        }
      } else {
        this.bindTouchEvents();
        this.bindHoverEventsOnRootFlyout();
      }

      // Resize flyout heights on window load in case long loading images
      // change the viewport height
      var that = this;

      onWindowLoad(function() {
        // Don't resize if not at the mobile layout because mobile document
        // height will be longer than desktop and if flyout heights are
        // resized to a long length then the entire document height will be
        // lengthened at mobile.
        if ($(window).width > this.options.mobileLayoutWidthThreshold) {
          this.resizeFlyoutHeights();
        }
      }.bind(this));


      this.setContainerZIndexes();

      // Add opacity to flyout panels if not mobile except iPad
      if (!Util.isLikelyMobile() || Util.isIPad()) {
        this.$container.find(this.options.flyoutPanelSelector).addClass('opacity');
      }

      this.bindSearchfieldFocusEvent();

      // Don't toggle fixed for mobile since it's glitchy, instead
      // lock the body scroll and fix the menu until deactivation
      if (Util.isLikelyMobile()) {
        this.isFixedPositionLayout = false;
      }

      if (this.isFixedPositionLayout) {
        this.applyFixedPositioning();
      }

      // Collapse the root flyout without animation otherwise it will remain
      // open after using the browser back button
      setTimeout(function() {
        // Temporarily disable animation, collapse the root flyout, and
        // deactivate the nav
        var isAnimated = that.options.isAnimated;
        that.options.isAnimated = false;
        that.rootFlyout.collapse();
        that.options.isAnimated = isAnimated;
      }, 0);
    },

    // Bind event handlers
    // ----------------------------------------------------------------------

    // Bind hover event handler on the root flyout only
    bindHoverEventsOnRootFlyout: function() {
      var that = this;

      hoverIntent(
        $(this.rootFlyout.$trigger)[0],
        function() {
          // Clear any timeouts set to close this root flyout
          clearTimeout(that.rootFlyout.timeout);

          that.rootFlyout.expand();
        }, function() {
          // Out is a custom implementation
        }
      ).options({
        // Timeout is a custom implementation
        timeout: 0,

        sensitivity: this.options.hoverSensitivity,
        interval: this.options.hoverInterval
      });

      var leaveTarget = function() {
        that.rootFlyout.inTarget = false;

        // Set a short timeout to clear any timeouts set to close
        // descendants. Set this to the variable below so it can be
        // canceled upon entering any triggers.
        that.rootFlyout.clearTimeoutsOfDescendants = setTimeout(function() {
          that.clearTimeoutRegistry(1);
          that.clearTimeoutRegistry(2);
        }, 10);

        // Don't need to clear other timeouts at this level becuase there is
        // only one flyout panel for this level

        // Set a timeout to collapse this flyout
        that.rootFlyout.timeout = setTimeout(function() {
          that.rootFlyout.collapse();
        }, that.rootFlyout.options.timeout);
      };
      this.rootFlyout.$container.on('mouseleave', leaveTarget);

      var enterTarget = function() {
        // Set a state that is used to determine whether mousing off child
        // target will close itself or the root target instead (in the case
        // that the mouse moves off the entire flyout).
        that.rootFlyout.inTarget = true;

        // Clear any existing timeouts on the root flyout when the mouse
        // enters the target
        clearTimeout(that.rootFlyout.timeout);
      };
      this.rootFlyout.$container.on('mouseenter', enterTarget);

      // Set a timeout to collapse the flyout when the mouse leaves the trigger
      var leaveTrigger = function() {
        that.rootFlyout.timeout = setTimeout(function() {
          that.rootFlyout.collapse();
        }, that.rootFlyout.options.timeout);
      };
      this.rootFlyout.$trigger.on('mouseleave', leaveTrigger);

      // Even though the hover intent serves as the main "enter trigger"
      // event, it may lag due to the nature of hover intent. So moving
      // between the target and the trigger may collapse the target. To
      // prevent this, set another "enter trigger" even which fires
      // immediately to stop any timeouts set to close the target.
      var enterTrigger = function() {
        // Clear any existing timeouts on the root flyout when the mouse
        // enters the trigger
        clearTimeout(that.rootFlyout.timeout);

        clearTimeout(that.rootFlyout.clearTimeoutsOfDescendants);
      };
      this.rootFlyout.$trigger.on('mouseenter', enterTrigger);
    },

    // Bind touch event handlers on all flyouts
    bindTouchEvents: function() {
      var that = this;
      this.rootFlyout.$trigger.on('click', function() {
        that.rootFlyout.toggle();
      });
      this.$container.find('a[data-flyout][href^="javascript"]').each(function() {
        var flyout = that.findByTrigger(this);
        flyout.$trigger.on('click', function() {
          flyout.toggle();
        });
      });
    },

    // Binds touch handler to document in order to close flyout menu and remove
    // once successful
    bindCloseRootFlyoutOnDocumentClickEvent: function() {
      var eventName;
      if ('ontouchstart' in window) {
        eventName = 'touchstart.' + this.options.jQueryEventNamespace + '_close';
      } else {
        eventName = 'click.' + this.options.jQueryEventNamespace + '_close';
      }

      var that = this;
      $(document).on(eventName, function(event) {
        var $eventTarget = $(event.target);

        // Don't collapse if event originated from within the flyout
        if (!$eventTarget.closest(that.options.flyoutPanelSelector).length &&
             !$eventTarget.closest(that.options.rootFlyoutTriggerSelector).length) {
          $(document).off(eventName);
          that.rootFlyout.collapse();
        }
      });
    },

    // Removes click handler on document which closes root flyout menu
    destroyCloseRootFlyoutOnDocumentClickEvent: function() {
      $(document).off('click.' + this.options.jQueryEventNamespace + '_close');
    },

    // Binds focus event on searchfield input to toggle the active class on the
    // parent element
    bindSearchfieldFocusEvent: function() {
      var $input = this.$container.find(this.options.searchfieldSelector + ' input[type="text"]');
      $input.on('focus', function() {
        $(this).parent().addClass('active');
      }).on('blur', function() {
        $(this).parent().removeClass('active');
      });
    },

    // Sets fixed positioning on the flyout panels
    applyFixedPositioning: function() {
      $(this.options.flyoutPanelSelector).addClass('fixed');
      this.setFlyoutPanelTops();
    },

    // Watches the window scroll event to perform actions without debouncing
    watchScroll: function() {
      var that = this;
      $(window).on('scroll.' + this.options.jQueryEventNamespace + '_watch-scroll', function() {
        that.setFlyoutPanelTops();
      });
    },

    // Removes watch-scroll event from the window
    destroyWatchScroll: function() {
      $(window).off('scroll.' + this.options.jQueryEventNamespace + '_watch-scroll');
    },

    // Watches the window scroll event to perform actions at small
    // intervals
    watchScrollAtSmallDebouncedInterval: function() {
      var that = this;
      Util.debounceWindowEvent(function() {
        for (var key in that.tree) {
          if (that.tree.hasOwnProperty(key)) {
            var node = that.tree[key];
            if (node.isMouseTrackerEnabled) {
              that.flyoutsHavingEnabledMouseTrackersAtScrollTime[that.flyoutsHavingEnabledMouseTrackersAtScrollTime.length] = node;
            }
          }
        }
        that.tearDownAllMouseTrackers();
      }, 'scroll.' + this.options.jQueryEventNamespace + '_watch-small-scroll', 20, this);
    },

    // Removes watch-small-scroll event from the window
    destroyWatchScrollAtSmallDebouncedInterval: function() {
      $(window).off('scroll.' + this.options.jQueryEventNamespace + '_watch-small-scroll');
    },

    // Watches the window scroll event to perform actions at large debounced
    // intervals
    watchScrollAtLargeDebouncedInterval: function() {
      var that = this;
      Util.debounceWindowEvent(function() {
        that.setupAllMouseTrackers();
        for (var i = 0, len = that.flyoutsHavingEnabledMouseTrackersAtScrollTime.length; i < len; i++) {
          that.flyoutsHavingEnabledMouseTrackersAtScrollTime[i].isMouseTrackerEnabled = true;
        }

        // Clear saved flyouts having enabled mouse trackers at scroll time
        that.flyoutsHavingEnabledMouseTrackersAtScrollTime.length = 0;
      }, 'scroll.' + this.options.jQueryEventNamespace + '_watch-large-scroll', 300, this);
    },

    // Removes watch-large-scroll event from the window
    destroyWatchScrollAtLargeDebouncedInterval: function() {
      $(window).off('scroll.' + this.options.jQueryEventNamespace + '_watch-large-scroll');
    },

    // Watches the window resize event and performs actions at debounced
    // intervals
    watchResize: function() {
      Util.debounceWindowEvent(function() {
        // Height changes could happen on resize and they should be set before
        // they are used by #resizeFlyoutHeights
        this.cacheHeaderHeight();
        this.cacheFooterHeight();
        this.resizeFlyoutHeights();
      }, 'resize.' + this.options.jQueryEventNamespace + '-watch_resize', 40, this);
    },

    // Removes the resize event for this flyout group from the window
    destroyWatchResize: function() {
      $(window).off('resize.' + this.options.jQueryEventNamespace + '-watch_resize');
    },

    // Watches window orientationchanged event to set a new baseline viewport
    // height used to detect if the viewport height has changed on input focus
    // due to the virtual keyboard
    watchOrientationChangeEvent: function() {
      this.options.viewportHeightBeforeInputFocus = $(window).height();

      var that = this;
      $(window).on('orientationchange.' + this.options.jQueryEventNamespace, function() {
        that.options.viewportHeightBeforeInputFocus = $(window).height();
        that.rootFlyout.collapse();
      });
    },

    // Watches input focus events in order to tell if the viewport height has
    // been changed on input focus due to the virtual keyboard
    watchInputFocusEvents: function() {
      var that = this;
      $(':input[type="text"]').one('focus.' + this.options.jQueryEventNamespace, function() {
        that.viewportHeightChangeAfterInputFocus = that.viewportHeightBeforeInputFocus - $(window).height();
      });
    },

    // Events
    // ----------------------------------------------------------------------

    // Actions to perform when activating the root flyout
    onRootFlyoutActivation: function() {
      this.$footer.css('z-index', this.footerZIndexFlyoutOpen);

      // Cache heights again because this script could have been initialized
      // at the mobile level
      this.cacheHeaderHeight();
      this.cacheFooterHeight();
      this.resizeFlyoutHeights();

      if (this.isFixedPositionLayout) {
        this.setFlyoutPanelTops();
        this.watchScroll();
      }
      this.watchResize();

      if (!this.options.isTouchOnly) {
        this.setupAllMouseTrackers();
        this.watchScrollAtSmallDebouncedInterval();
        this.watchScrollAtLargeDebouncedInterval();
      }

      // Trigger events to close the popovers and dropdowns
      this.$container.trigger('custom_aws_nav-popover_close_aws-nav-flyout-trigger');
      this.$container.trigger('custom_aws_nav-dropdown_close');

      var $rootFlyout = $(this.options.flyoutPanelSelector + '.level-0');
      $rootFlyout.trigger('custom_aws_nav-flyout_before-root-open');
      setTimeout(function() {
        $rootFlyout.trigger('custom_aws_nav-flyout_after-root-open');
      }, this.rootFlyout.options.expandDuration);

      this.bindCloseRootFlyoutOnDocumentClickEvent();
    },

    // Actions to perform when deactivating the root flyout
    onRootFlyoutDeactivation: function() {
      this.$footer.css('z-index', this.footerZIndexFlyoutClosed);

      // Tear down mouse trackers and flush the events that they set
      if (!this.options.isTouchOnly) {
        this.tearDownAllMouseTrackers();
        this.destroyWatchScrollAtSmallDebouncedInterval();
        this.destroyWatchScrollAtLargeDebouncedInterval();
      }

      this.destroyWatchResize();

      if (this.isFixedPositionLayout) {
        this.destroyWatchScroll();
      }

      if (Util.isLikelyMobile()) {
        // Trigger blur on the search input in order to hide the mobile
        // virtual keyboard if it's open
        $(this.options.searchfieldSelector + ' input[type="text"]').blur();

        // Scroll to top after virtual keyboard close
        window.scroll(0, 0);
      }

      this.destroyCloseRootFlyoutOnDocumentClickEvent();
    },

    // Helpers
    // ----------------------------------------------------------------------

    // Clears all timeouts in the timeout registry. If given a level, only
    // clear timeouts having a key which is that level.
    clearTimeoutRegistry: function(level) {
      for (var i = 0, len = this.timeoutRegistry.length; i < len; i++) {
        if (this.timeoutRegistry[i].level === level || typeof level === 'undefined') {
          clearTimeout(this.timeoutRegistry[i].fn);
          // Don't bother splicing cleared timeouts out of the array. All
          // timeouts will be cleared at a regular basis so just remove all
          // items from the array when that happens.
        }
      }

      // Clear all items from the array if we needed to clear all timeouts
      if (typeof level === 'undefined') {
        this.timeoutRegistry.length = 0;
      }
    },

    // Removes all handlers in the event stack and empties the event stack
    flushEventStack: function() {
      for (var i = 0, len = this.eventStack.length; i < len; i++) {
        var event = this.eventStack[i];
        event.obj.off(event.eventType, event.handler);
      }

      this.eventStack.length = 0;
    },

    // Returns a flyout object by its HTML trigger element
    findByTrigger: function(el) {
      var $trigger = $(el);
      var id = $trigger.attr('data-flyout');

      return this.tree[id];
    },

    // Caches the current height of the site header
    cacheHeaderHeight: function() {
      headerHeight = $(this.options.navSelector).height();
    },

    // Caches the current height of the site footer
    cacheFooterHeight: function() {
      if (this.$footer.length) {
        // More reliable than $footer.height()
        footerHeight = $(document).height() - this.$footer.offset().top;
      } else {
        footerHeight = 0;
      }
    },

    // Calculates left positions for flyout panels from the flyout panel
    // widths
    calculateFlyoutPanelLeftPositions: function() {
      var widths = this.options.flyoutPanelWidths;
      var leftPositions = [];
      var parentLeftPositions = [];
      var total = 0;
      leftPositions[leftPositions.length] = total;
      parentLeftPositions[parentLeftPositions.length] = -widths[0];
      parentLeftPositions[parentLeftPositions.length] = widths[0] - widths[1];

      for (var i = 0, len = widths.length - 1; i < len; i++) {
        if (i !== 0) {
          parentLeftPositions[parentLeftPositions.length] = total - (widths[i + 1] - widths[i]);
        }
        total += widths[i];
        leftPositions[leftPositions.length] = total;
      }

      this.flyoutPanelLeftPositions = leftPositions;
      this.flyoutPanelParentLeftPositions = parentLeftPositions;
    },

    // Style manipulations
    // ----------------------------------------------------------------------

    // Set z-index on all flyout containers
    setContainerZIndexes: function() {
      for (var node in this.tree) {
        if (this.tree.hasOwnProperty(node)) {
          this.tree[node].setContainerZIndex();
        }
      }
    },

    // Updates the top positions of the flyout panels depending on the
    // floating state of the flyout panels
    setFlyoutPanelTops: function() {
      var $document = $(document);
      var documentHeight = $document.height();
      var scrollTop = $document.scrollTop();
      var viewportHeight = $(window).height();
      var i, len;
      var targetTop = headerHeight;

      // Cache for performance since this runs on window scroll
      if (flyoutPanelElemsStyles === null) {
        var $flyoutPanelElems = $(this.options.flyoutPanelContentSelector);
        flyoutPanelElemsStyles = [];
        for (i = 0, len = $flyoutPanelElems.length; i < len; i++) {
          flyoutPanelElemsStyles[flyoutPanelElemsStyles.length] = $flyoutPanelElems[i].style;
        }
      }

      if (targetTop !== null) {
        for (i = 0, len = flyoutPanelElemsStyles.length; i < len; i++) {
          flyoutPanelElemsStyles[i].top = targetTop + 'px';
        }

        // A new top was set, so also resize panel content heights
        this.resizeFlyoutContentHeights(documentHeight, viewportHeight, scrollTop);

        // Provide some latent correction because of Safari bugginess
        var that = this;
        setTimeout(function() {
          that.resizeFlyoutContentHeights();
        }, 500);
      }
    },

    // Resizes flyout panel and flyout content heights
    resizeFlyoutHeights: function() {
      var documentHeight = $(document).height();
      var viewportHeight = $(window).height();
      this.resizeFlyoutPanelHeights(documentHeight);
      this.resizeFlyoutContentHeights(documentHeight, viewportHeight);
    },

    // Resizes flyout panel heights
    resizeFlyoutPanelHeights: function(documentHeight) {
      var footerBottom = this.$footer.offset().top + this.$footer.height();
      var targetHeight = Math.min(footerBottom, documentHeight);
      $(this.options.flyoutPanelSelector).css({
        height: targetHeight
      });
    },

    // Resizes flyout content heights
    // eslint-disable-next-line no-unused-vars
    resizeFlyoutContentHeights: function(documentHeight, viewportHeight, scrollTop) {
      documentHeight = documentHeight || $(document).height();
      viewportHeight = viewportHeight || $(window).height();
      scrollTop = scrollTop || $(window).scrollTop();

      // Set a new baseline viewport height used to detect if the viewport
      // height has changed on input focus due to the virtual keyboard
      if (Util.isLikelyMobile()) {
        this.viewportHeightBeforeInputFocus = viewportHeight;
      }

      // The first rule defines that content panels should extend the height
      // of the viewport, underneath the header, and down to the scroll point.
      // The second rule enforces a maximum on the height of the panel content
      // so they do not extend past the footer.

      var ruleA, ruleB;
      var footerHeightOffset = this.getVisibleFooterHeight();

      ruleA = viewportHeight - headerHeight - footerHeightOffset;
      ruleB = documentHeight - headerHeight - footerHeight;

      // Cache for performance since this runs on window scroll
      if ($flyoutPanelContentElems === null) {
        $flyoutPanelContentElems = $(this.options.flyoutPanelContentSelector);
      }
      $flyoutPanelContentElems.css({
        height: Math.min(ruleA, ruleB)
      });
    },

    // Sets up mouseTrackers on all flyouts except the root flyout
    setupAllMouseTrackers: function() {
      var viewportHeight = $(window).height();
      var tree = this.tree;
      for (var key in tree) {
        if (tree.hasOwnProperty(key)) {
          var node = tree[key];
          if (node !== this.rootFlyout) {
            node.setupMouseTrackers(viewportHeight);
          }
        }
      }
    },

    // Teardown all mouse trackers on all flyouts
    tearDownAllMouseTrackers: function() {
      for (var id in this.mouseTrackerRegistry) {
        if (this.mouseTrackerRegistry.hasOwnProperty(id)) {
          MouseTracker.remove(this.mouseTrackerRegistry[id]);
          delete this.mouseTrackerRegistry[id];
        }
      }

      // Flush the event stack
      this.flushEventStack();

      // Set all mousetrackers as disabled
      var tree = this.tree;
      for (var key in tree) {
        if (tree.hasOwnProperty(key)) {
          tree[key].isMouseTrackerEnabled = false;
        }
      }
    },

    getVisibleFooterHeight: function() {
      var scrollTop = $(window).scrollTop();
      var scrollBottom = scrollTop + $(window).height();
      var footerTop = this.$footer.offset().top;
      var footerBottom = footerTop + this.$footer.outerHeight();
      var visibleTop = footerTop;
      var visibleBottom = footerBottom;

      if (footerTop < scrollTop) {
        visibleTop = scrollTop;
      }

      if (footerBottom > scrollBottom) {
        visibleBottom = scrollBottom;
      }

      if (visibleBottom - visibleTop > 0) {
        return visibleBottom - visibleTop;
      }

      return 0;
    }
  };

  return FlyoutGroup;
});

/* globals window, AWS */

define('libra/navigation/navigation-mobile',[],function() {
  'use strict';

  var Util = {

    // Executes the given function after a given window event
    debounceWindowEvent: function(func, eventName, timeout, context) {
      var that = context || this;
      var count = 0;

      $(window).on(eventName, function() {
        var id = (++count);

        window.setTimeout(function() {
          if (id === count) {
            func.call(that);
          }
        }, timeout);
      });
    }
  };

  // AWSNavMobile
  // --------------------------------------------------------------------------

  var defaults = {

    navMobileSelector: '#aws-nav-mobile',

    // Selector for the mobile dropdowns
    mobileDropdownSelector: '.aws-nav-mobile-dropdown',

    // Selector for the mobile dropdown menu
    mobileDropdownMenuSelector: '#aws-nav-mobile-dropdown-menu',

    // Selector for the mobile dropdown menu list item group
    mobileDropdownMenuGroupSelector: '.aws-nav-mobile-menu-group',

    // Selector for the page content
    pageContentSelector: '#aws-page-content',

    // Selector for the mobile nav header
    headerSelector: '#aws-nav-mobile-header',

    // Selector for the page content
    footerSelector: '#aws-page-footer',

    // Selector for the mobile nav search form
    searchFormSelector: '#aws-nav-mobile-dropdown-search form',

    // Selector for the sticky subnav
    subnavSelector: '.lb-sticky-subnav',

    // jQuery event namespace
    jQueryEventNamespace: 'aws-nav-mobile',

    // Duration for the jQuery show animation on menu items per child
    menuItemShowDurationPerChild: 130,

    // Duration for the jQuery hide animation on menu items
    menuItemHideDuration: 160,

    // Hide active siblings upon menu item selection (accordion style)
    hideActiveSiblings: true,

    // Viewport width (px) at which the mobile layout will cease
    mobileLayoutWidthThreshold: 768
  };

  function NavMobile() {
    // Grab any options on an optional predefined global AWSNav object
    var configOptions = (typeof AWS.NavMobile !== 'undefined') ? AWS.NavMobile : {};
    this.options = $.extend({}, defaults, configOptions);
    this.$el = $(this.options.navMobileSelector);

    // Return to exit instantation if nav element doesn't exist
    if (!this.$el.length) {
      return;
    }

    this.init();
  }

  NavMobile.prototype = {
    init: function() {
      if ($(window).width() > this.options.mobileLayoutWidthThreshold) {
        this.isMobileLayoutActive = false;
      } else {
        this.isMobileLayoutActive = true;
        this.bindDeactivateMobileLayoutResizeEvent();
      }

      this.bindDropdownEvents();
      this.bindMenuItemEvents();
      this.preventEmptySearch();
    },

    // Bind Event Handlers
    // ------------------------------------------------------------------------

    // Bind event handlers to dropdowns
    bindDropdownEvents: function() {
      var that = this;

      this.$el.find('div[data-dropdown]').each(function() {
        var $this = $(this);
        var id = $this.attr('data-dropdown');
        var eventName = 'click.' + that.options.jQueryEventNamespace;

        $this.on(eventName, function() {
          var target = that.$el.find('#' + id);
          that.toggleDropdown(this, target);
        });
      });
    },

    // Bind event handlers to menu
    bindMenuItemEvents: function() {
      var that = this;
      var eventName = 'click.' + that.options.jQueryEventNamespace;

      $(this.options.mobileDropdownMenuSelector).on(eventName, 'a[href^="javascript"]', function() {
        var $this = $(this);
        if ($this.next(that.options.mobileDropdownMenuGroupSelector).length) {
          that.toggleMenuItem($this.parent());
        }
      });
    },

    // Debounce window resize to perform page content height fix
    bindPageContentHeightResizeEvent: function() {
      var resizeEventName = 'resize.' + this.options.jQueryEventNamespace + '_page-content-height';
      Util.debounceWindowEvent(this.setPageContentHeightToActiveDropdownHeight, resizeEventName, 80, this);
    },

    // Removes the resize event for the mobile nav dropdowns from the window
    destroyPageContentHeightResizeEvent: function() {
      var eventName = 'resize.' + this.options.jQueryEventNamespace + '_page-content-height';
      $(window).off(eventName);
    },

    // Debounce window resize to perform page content height fix
    bindDeactivateMobileLayoutResizeEvent: function() {
      var resizeEventName = 'resize.' + this.options.jQueryEventNamespace + '_deactivate-mobile-layout';
      Util.debounceWindowEvent(this.deactivateMobileLayout, resizeEventName, 40, this);
    },

    // Removes the resize event for the mobile nav dropdowns from the window
    destroyDeactivateMobileLayoutResizeEvent: function() {
      var eventName = 'resize.' + this.options.jQueryEventNamespace + '_deactivate-mobile-layout';
      $(window).off(eventName);
    },

    // Menu Item Events
    // ------------------------------------------------------------------------

    // Shows the given menu item element if active, hides otherwise
    toggleMenuItem: function(el) {
      var $el = $(el);
      if ($el.hasClass('expanded')) {
        this.hideMenuItem(el);
      } else if ($el.hasClass('expanding')) {
        this.hideMenuItem(el);
      } else if ($el.hasClass('collapsing')) {
        this.showMenuItem(el);
      } else {
        // Otherwise collapsed
        this.showMenuItem(el);
      }
    },

    // Shows the given menu item using animations
    showMenuItem: function(el) {
      var that = this;
      var $el = $(el);
      var $group = $el.children(this.options.mobileDropdownMenuGroupSelector).first();

      // Current group level used to determine if child li's are at the same level
      var groupLevel = $group.parentsUntil(this.options.navMobileSelector, this.options.mobileDropdownMenuGroupSelector).length + 1;

      $el.addClass('active expanding').removeClass('expanded collapsing');
      $el.parentsUntil(this.options.navMobileSelector, '.active').addClass('aws-has-active-children');

      // Vary the show duration by the number of child li's

      var childLiCount = $group.find('.aws-link').filter(function(idx, elem) {
        var elGroupLevel = $(elem).parentsUntil(that.options.navMobileSelector, that.options.mobileDropdownMenuGroupSelector).length;
        if (groupLevel === elGroupLevel) {
          return true;
        }

        return false;
      }).length;

      var duration = (this.options.menuItemShowDurationPerChild * childLiCount) * (Math.pow(0.88, childLiCount));
      duration = Math.ceil(duration);

      // Enforce min and max bounds for duration
      duration = Math.max(duration, 100);
      duration = Math.min(duration, 2000);

      $group.slideToggle({
        duration: duration,
        done: function() {
          // Only complete the action if the menu item is still expanding
          if ($el.hasClass('expanding')) {
            $el.addClass('expanded').removeClass('expanding');
          }
        }
      });

      // Immediately hide any other active siblings
      if (this.options.hideActiveSiblings) {
        $el.closest(this.options.mobileDropdownMenuGroupSelector).find('.aws-parent.active').not($el).each(function() {
          that.hideMenuItemNow(this);
          that.hideDescendantMenuItems(this);
        });
      }
    },

    // Hides the given menu item using animations
    hideMenuItem: function(el) {
      var that = this;
      var $el = $(el);

      $el.addClass('collapsing').removeClass('expanded expanding');

      $el.children(this.options.mobileDropdownMenuGroupSelector).first().slideToggle({
        duration: this.options.menuItemHideDuration,
        done: function() {
          // Only complete the action if the menu item is still collapsing
          if ($el.hasClass('collapsing')) {
            $el.removeClass('active collapsing');

            // Immediately close all descendant menus on complete
            that.hideDescendantMenuItems(this);

            // Remove aws-has-active-children helper class if no other active siblings
            if (!$el.closest(that.options.mobileDropdownMenuGroupSelector).closest('.aws-has-active-children').find('.aws-parent.active').length) {
              $el.parentsUntil(that.options.navMobileSelector, '.aws-has-active-children').removeClass('aws-has-active-children');
            }
          }
        }
      });
    },

    // Immediately hides the given menu item
    hideMenuItemNow: function(el) {
      var $el = $(el);
      $el.removeClass('active expanded expanding collapsing');
      $el.children(this.options.mobileDropdownMenuGroupSelector).hide();

      // Remove aws-has-active-children helper class if no other active siblings
      if (!$el.closest(this.options.mobileDropdownMenuGroupSelector).closest('.aws-has-active-children').find('.aws-parent.active').length) {
        $el.parentsUntil(this.options.navMobileSelector, '.aws-has-active-children').removeClass('aws-has-active-children');
      }
    },

    // Immediately hides descendant menu items
    hideDescendantMenuItems: function(el) {
      var that = this;
      $(el).find('.aws-parent.active').each(function() {
        that.hideMenuItemNow(this);
      });
    },

    // Immediately hides all the menu items
    hideAllMenuItems: function() {
      var that = this;
      $(this.options.mobileDropdownMenuSelector).find('.aws-parent.active').each(function() {
        that.hideMenuItemNow(this);
      });
    },

    // Dropdown Events
    // ------------------------------------------------------------------------

    // Returns the current height of the site header
    getHeaderHeight: function() {
      var $header = $(this.options.headerSelector);
      var headerHeight = $header.outerHeight() + $header.offset().top;

      return headerHeight;
    },

    // Shows the given dropdown element if active, hides otherwise
    // Also hides any other active dropdowns
    toggleDropdown: function(el, target) {
      if ($(target).is(':visible')) {
        this.hideDropdown(el, target);
      } else {
        this.hideAllDropdowns();
        this.showDropdown(el, target);
      }
    },

    // Shows the given dropdown element
    showDropdown: function(el, target) {
      var $target = $(target);
      $(el).addClass('active');
      $target.css('top', this.getHeaderHeight());
      $target.show();
      this.hidePageContent();
      this.bindPageContentHeightResizeEvent();

      if (!this.isMobileLayoutActive) {
        this.isMobileLayoutActive = true;
        this.bindDeactivateMobileLayoutResizeEvent();
      }
    },

    // Hides the given dropdown element
    hideDropdown: function(el, target) {
      $(el).removeClass('active');
      this.showPageContent();
      $(target).hide();

      // If the element is the mobile dropdown selector then close all menu
      // items within dropdown on complete
      var that = this;
      if ('#' + $(this).attr('id') === that.options.mobileDropdownMenuSelector) {
        that.hideAllMenuItems();
      }

      this.destroyPageContentHeightResizeEvent();
    },

    // Immediately hides all active dropdowns
    hideAllDropdowns: function() {
      this.$el.find('div[data-dropdown]').each(function() {
        var $this = $(this);
        $this.removeClass('active');
        var id = $this.attr('data-dropdown');
        var $el = $('#' + id);
        $el.hide();
      });

      this.hideAllMenuItems();
    },

    // Shows the page content
    showPageContent: function() {
      $(this.options.footerSelector).show();

      // Reset the height of the page content to auto
      $(this.options.pageContentSelector).css('height', 'auto').css('overflow', 'visible');
    },

    // Hides the page content
    hidePageContent: function() {
      $(this.options.footerSelector).hide();
      this.setPageContentHeightToActiveDropdownHeight();
    },

    // Sets the height of the page content to the height of the active dropdown
    setPageContentHeightToActiveDropdownHeight: function() {
      var $activeDropdown = $(this.options.mobileDropdownSelector).filter(':visible');
      if ($activeDropdown.length) {
        // Height of dropdown adjusted for any margin of mobile header
        var dropdownHeight = $activeDropdown.height() -
          ($(this.options.headerSelector).outerHeight(true) - $(this.options.headerSelector).height());

        // If there is a subnav, subtrack the subnav height as well
        if ($(this.options.subnavSelector).length > 0) {
          dropdownHeight -= $(this.options.subnavSelector).outerHeight(true);
        }

        $(this.options.pageContentSelector).css('height', dropdownHeight).css('overflow', 'hidden');
      }

      // Also update the header tops
      $(this.options.mobileDropdownSelector).css('top', this.getHeaderHeight());
    },

    // Deactivates active items in the mobile layout if the window width is
    // greater than the defined mobile layout width threshold
    deactivateMobileLayout: function() {
      if (($(window).width() > this.options.mobileLayoutWidthThreshold) &&
           this.isMobileLayoutActive) {
        this.isMobileLayoutActive = false;
        this.hideAllDropdowns();
        this.showPageContent();
        this.destroyDeactivateMobileLayoutResizeEvent();
      }
    },

    // Prevent searching for a blank string.
    preventEmptySearch: function() {
      this.$el.on('submit', $(this.options.searchFormSelector), function(e) {
        var $requiredFields = $(this).find('[data-aws-required]');

        for (var i = 0, len = $requiredFields.length; i < len; i++) {
          if ($requiredFields[i].value === '') {
            e.preventDefault();
          }
        }
      });
    }
  };

  // Add NavMobile to the AWS namespace
  AWS.NavMobile = NavMobile;

  // Initialize on document ready
  $(document).ready(function() {
    new NavMobile();
  });
});

/*! modernizr 3.5.0 (Custom Build) | MIT *
 * https://modernizr.com/download/?-touchevents-setclasses !*/
define('libra/vendor/modernizr',[],function() {!function(e,n,t){function o(e,n){return typeof e===n}function s(){var e,n,t,s,a,i,r;for(var l in c)if(c.hasOwnProperty(l)){if(e=[],n=c[l],n.name&&(e.push(n.name.toLowerCase()),n.options&&n.options.aliases&&n.options.aliases.length))for(t=0;t<n.options.aliases.length;t++)e.push(n.options.aliases[t].toLowerCase());for(s=o(n.fn,"function")?n.fn():n.fn,a=0;a<e.length;a++)i=e[a],r=i.split("."),1===r.length?Modernizr[r[0]]=s:(!Modernizr[r[0]]||Modernizr[r[0]]instanceof Boolean||(Modernizr[r[0]]=new Boolean(Modernizr[r[0]])),Modernizr[r[0]][r[1]]=s),f.push((s?"":"no-")+r.join("-"))}}function a(e){var n=u.className,t=Modernizr._config.classPrefix||"";if(p&&(n=n.baseVal),Modernizr._config.enableJSClass){var o=new RegExp("(^|\\s)"+t+"no-js(\\s|$)");n=n.replace(o,"$1"+t+"js$2")}Modernizr._config.enableClasses&&(n+=" "+t+e.join(" "+t),p?u.className.baseVal=n:u.className=n)}function i(){return"function"!=typeof n.createElement?n.createElement(arguments[0]):p?n.createElementNS.call(n,"http://www.w3.org/2000/svg",arguments[0]):n.createElement.apply(n,arguments)}function r(){var e=n.body;return e||(e=i(p?"svg":"body"),e.fake=!0),e}function l(e,t,o,s){var a,l,f,c,d="modernizr",p=i("div"),h=r();if(parseInt(o,10))for(;o--;)f=i("div"),f.id=s?s[o]:d+(o+1),p.appendChild(f);return a=i("style"),a.type="text/css",a.id="s"+d,(h.fake?h:p).appendChild(a),h.appendChild(p),a.styleSheet?a.styleSheet.cssText=e:a.appendChild(n.createTextNode(e)),p.id=d,h.fake&&(h.style.background="",h.style.overflow="hidden",c=u.style.overflow,u.style.overflow="hidden",u.appendChild(h)),l=t(p,e),h.fake?(h.parentNode.removeChild(h),u.style.overflow=c,u.offsetHeight):p.parentNode.removeChild(p),!!l}var f=[],c=[],d={_version:"3.5.0",_config:{classPrefix:"",enableClasses:!0,enableJSClass:!0,usePrefixes:!0},_q:[],on:function(e,n){var t=this;setTimeout(function(){n(t[e])},0)},addTest:function(e,n,t){c.push({name:e,fn:n,options:t})},addAsyncTest:function(e){c.push({name:null,fn:e})}},Modernizr=function(){};Modernizr.prototype=d,Modernizr=new Modernizr;var u=n.documentElement,p="svg"===u.nodeName.toLowerCase(),h=d._config.usePrefixes?" -webkit- -moz- -o- -ms- ".split(" "):["",""];d._prefixes=h;var m=d.testStyles=l;Modernizr.addTest("touchevents",function(){var t;if("ontouchstart"in e||e.DocumentTouch&&n instanceof DocumentTouch)t=!0;else{var o=["@media (",h.join("touch-enabled),("),"heartz",")","{#modernizr{top:9px;position:absolute}}"].join("");m(o,function(e){t=9===e.offsetTop})}return t}),s(),a(f),delete d.addTest,delete d.addAsyncTest;for(var v=0;v<Modernizr._q.length;v++)Modernizr._q[v]();e.Modernizr=Modernizr}(window,document);});

/* globals AWS */

define('libra/navigation/navigation',[
  'libra/navigation/utils/navigation-utils',
  'libra/navigation/quick-links',
  'libra/navigation/dropdown-group',
  'libra/footer/page-footer',
  'libra/navigation/popover',
  'libra/navigation/flyout-group',
  'librastandardlib/event-utils/onWindowLoad',
  'libra/navigation/navigation-mobile',
  'libra/vendor/modernizr'
], function(Util, QuicklinksController, DropdownGroup, PageFooter, PopoverController, FlyoutGroup, onWindowLoad) {
  'use strict';

  var Nav = {

    defaults: {
      navSelector: '#aws-nav',

      // Enable animations throughout the nav
      animationsEnabled: true,

      // Force touch to replace mouseover and mouseout handlers on triggers
      // with touch-friendly tap handlers
      forceTouch: false,
      supportedLanguages: ['en'],
      defaultLanguage: 'en',
      searchFormSelector: '#aws-nav-search form'
    },

    init: function() {
      // Grab any options on an optional predefined global AWSNav object
      var configOptions = (typeof AWS.Nav !== 'undefined') ? AWS.Nav : {};
      this.options = $.extend({}, this.defaults, configOptions);
      this.$el = $(this.options.navSelector);

      // Return to exit instantiation if nav element doesn't exist
      if (!this.$el.length) {
        return;
      }

      // If PageSettings is defined, copy parts of it into options.
      if (AWS.PageSettings && AWS.PageSettings.supportedLanguages) {
        this.options.supportedLanguages = AWS.PageSettings.supportedLanguages;
      }

      // If PageSettings is defined, copy parts of it into options.
      if (AWS.PageSettings && AWS.PageSettings.defaultLanguage) {
        this.options.defaultLanguage = AWS.PageSettings.defaultLanguage;
      }

      //
      // DEVELOPMENT ONLY
      //

      // Force touch-only with these options:
      // this.options.forceTouch = true;
      // $('html').removeClass('no-touch');

      //
      // END DEVELOPMENT ONLY
      //

      // Force touch only for debugging purposes
      this.isTouchOnly = this.options.forceTouch;

      // Disable all animations if device is mobile and not iPad
      if (Util.isLikelyMobile() && !Util.isIPad()) {
        this.options.animationsEnabled = false;
      }

      // Prevent searching for a blank string.
      this.$el.on('submit', $(this.options.searchFormSelector), function(e) {
        var $requiredFields = $(this).find('[data-aws-required]');

        for (var i = 0, len = $requiredFields.length; i < len; i++) {
          if ($requiredFields[i].value === '') {
            e.preventDefault();
          }
        }
      });

      // Initialize nav objects and pass any options

      this.quicklinksController = new QuicklinksController(
        this.$el,
        {
          isTouchOnly: this.isTouchOnly,
          isAnimated: this.options.animationsEnabled,
          supportedLanguages: this.options.supportedLanguages,
          defaultLanguage: this.options.defaultLanguage
        }
      );

      this.dropdownGroup = DropdownGroup.init(
        this.$el,
        $.extend(
          {},
          {
            isTouchOnly: this.isTouchOnly,
            isAnimated: this.options.animationsEnabled,
            supportedLanguages: this.options.supportedLanguages,
            defaultLanguage: this.options.defaultLanguage
          },
          this.options.dropdown
        )
      );

      this.pageFooter = PageFooter.init(
        this.$el,
        $.extend(
          {},
          {
            supportedLanguages: this.options.supportedLanguages,
            defaultLanguage: this.options.defaultLanguage
          },
          this.options.pageFooter
        )
      );

      this.popoverController = PopoverController.init(
        this.$el,
        $.extend(
          {},
          {
            isTouchOnly: this.isTouchOnly,
            isAnimated: this.options.animationsEnabled
          },
          this.options.popover
        )
      );

      this.flyoutGroup = new FlyoutGroup(
        this.$el,
        $.extend(
          {},
          {
            isTouchOnly: this.isTouchOnly,
            isAnimated: (this.options.animationsEnabled && !Util.isIPad())
          },
          this.options.flyout
        )
      );
    },

    // True if the device has been recognized as touch-only
    isTouchOnly: false
  };

  AWS.Nav = Nav;

  // Initialize on native browser event/state since jQuery documentReady is
  // still held by TargetMediator script in the Components V1 framework and the
  // intention of hard-coding Quicklinks is to show ASAP, not wait for Target
  // offers. This can be changed back to jQuery ready after key pages are
  // moved to Components V2 framework.
  //
  // Browser compatible document ready method used in latest jQuery and Zepto:
  // https://github.com/madrobby/zepto/pull/1235
  //
  if (document.readyState === 'complete' ||
     (document.readyState !== 'loading' && !document.documentElement.doScroll)) {
    Nav.init();
  } else {
    var hasFired = false;

    document.addEventListener('DOMContentLoaded', function() {
      if (!hasFired) {
        hasFired = true;
        Nav.init();
      }
    }, false);

    // A fallback to window.onload, that will always work
    onWindowLoad(function() {
      if (!hasFired) {
        hasFired = true;
        Nav.init();
      }
    });
  }
});

define('librastandardlib/dom-utils/breakpoint-helper',[
  'librastandardlib/test-helpers/browser-globals/window'
], function(window) {
  return {

    breakpoints: {
      tiny: 480,
      small: 768,
      mid: 980,
      large: 1200,
      xlarge: 1920
    },

    isTinyOnly: function() {
      return window.innerWidth <= this.breakpoints.tiny;
    },

    isSmallOnly: function() {
      return (window.innerWidth > this.breakpoints.tiny &&
        window.innerWidth <= this.breakpoints.small);
    },

    isMidOnly: function() {
      return (window.innerWidth > this.breakpoints.small &&
        window.innerWidth <= (this.breakpoints.mid - 1));
    },

    isLargeOnly: function() {
      return (window.innerWidth > (this.breakpoints.mid - 1) &&
        window.innerWidth <= (this.breakpoints.large - 1));
    },

    isTinyUp: function() {
      return true;
    },

    isSmallUp: function() {
      return window.innerWidth > this.breakpoints.tiny;
    },

    isMidUp: function() {
      return window.innerWidth > this.breakpoints.small;
    },

    isLargeUp: function() {
      return window.innerWidth > (this.breakpoints.mid - 1);
    },

    isXlargeUp: function() {
      return window.innerWidth > (this.breakpoints.large - 1);
    }
  };
});

/* global DocumentTouch: true */
define('librastandardlib/detection-utils/detection-utils',[
  'librastandardlib/test-helpers/browser-globals/window'
], function(window) {
  'use strict';

  var DetectionUtils = {

    // Object cache of boolean flag results from Util functions
    cache: {},

    // Returns true if the device is a mobile device. Returns userAgent match
    // or assumes the device is mobile if it's touch-capable.
    isMobile: function() {
      if (typeof DetectionUtils.cache.isMobile === 'undefined') {
        var re = new RegExp(/iPhone|iPod|iPad|Android|(?=.*\bAndroid\b)(?=.*\bMobile\b)|IEMobile|(?=.*\bWindows\b)(?=.*\bTouch\b)|Windows Phone|Opera Mini|(?=.*\bFirefox\b)(?=.*\bMobile\b)|BlackBerry|Nexus 7|BNTV250|Kindle Fire|Silk|webOS|GT-P1000/i);
        var res = re.test(window.navigator.userAgent);
        DetectionUtils.cache.isMobile = res;

        return res;
      }

      return DetectionUtils.cache.isMobile;
    },

    // Returns true if the current device is most likely mobile using a simple
    // heuristic.
    isLikelyMobile: function() {
      if (typeof DetectionUtils.cache.isLikelyMobile === 'undefined') {
        var res = DetectionUtils.isMobile() || (DetectionUtils.isTouchCapable() && (window.innerWidth <= 800));
        DetectionUtils.cache.isLikelyMobile = res;

        return res;
      }

      return DetectionUtils.cache.isLikelyMobile;
    },

    // Returns true if the current device is touch-capable. This is a
    // best-effort, but this test should work for most devices.
    isTouchCapable: function() {
      if (typeof DetectionUtils.cache.isTouchCapable === 'undefined') {
        var res = !!(
          ('Modernizr' in window && window.Modernizr.touchevents) ||
          window.navigator.maxTouchPoints ||
          window.navigator.msMaxTouchPoints ||
          (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch)
        );

        DetectionUtils.cache.isTouchCapable = res;

        return res;
      }

      return DetectionUtils.cache.isTouchCapable;
    }
  };

  return DetectionUtils;
});

define('librastandardlib/event-utils/debounceWindowEvent',[
  'librastandardlib/test-helpers/browser-globals/window'
], function(window) {
  'use strict';

  var debounceWindowEvent = function(fct, eventName, timeout, context) {
    var that = context || this,
      count = 0;

    $(window).on(eventName, function() {
      var id = (++count);

      window.setTimeout(function() {
        if (id === count) {
          fct.call(that);
        }
      }, timeout);
    });
  };

  return debounceWindowEvent;
});

define('libraui/components/popover',[
  'librastandardlib/test-helpers/browser-globals/window',
  'librastandardlib/obj-utils/assign',
  'librastandardlib/dom-utils/breakpoint-helper',
  'librastandardlib/detection-utils/detection-utils',
  'librastandardlib/event-utils/debounceWindowEvent',
  'librastandardlib/vendor/hoverintent/hoverIntent'
], function(window, _assign, BreakpointHelper, DetectionUtils, debounceWindowEvent, hoverIntent) {
  'use strict';

  // Binds debounced resize handler to set positions of all popovers
  function bindWindowResizeEvent(resizeEvent) {
    // Deactivate all popovers at beginning of resize
    debounceWindowEvent(function() {
      popoverRegistry.forEach(function(popover) {
        if (popover.isActive) {
          popover.deactivate();
        }
      });
    }, resizeEvent, 40);

    // Reset all popover positions after resize
    debounceWindowEvent(function() {
      popoverRegistry.forEach(function(popover) {
        // Need to remove any previous classes on resize,
        // because collision can happen on resize.
        popover.resetStyle = true;

        popover.setPosition();

        setTimeout(function() {
          popover.setPosition();
        }, 400);
      });
    }, resizeEvent, 100);
  }

  var defaults = {
    popoverSelector: '.lb-popover',
    triggerSelector: 'data-lb-popover-trigger',
    mountSelector: '.lb-trigger-mount',
    activeClass: 'lb-active',
    inactiveClass: 'lb-inactive',
    openClass: 'lb-open',
    readyClass: 'lb-ready',
    arrowClass: 'lb-arrow',
    innerArrowClass: 'lb-arrow-inner',

    // Activation action
    action: 'click',

    // Anchor position relative to the popover content
    position: 'top',

    // Offset (px) used if the anchor is positioned in a corner
    anchorOffset: 10,

    // The long side length (px) of the popover arrow
    arrowWidth: 9,

    // Smallest margin (px) to keep a popover away from viewport
    viewportMargin: 20,

    // HoverIntent sensitivity
    hoverSensitivity: 7,

    // HoverIntent interval (ms)
    hoverInterval: 50,

    // Delay (ms) before hiding
    timeout: 260
  };

  // 'true' if primary axis is vertical, 'false' if horizontal
  var positions = {
    'top-left': true,
    'top': true,
    'top-right': true,
    'bottom-left': true,
    'bottom': true,
    'bottom-right': true,
    'left-top': false,
    'left': false,
    'left-bottom': false,
    'right-top': false,
    'right': false,
    'right-bottom': false
  };

  var opposites = {
    top: 'bottom',
    bottom: 'top',
    left: 'right',
    right: 'left'
  };

  var instantiationCount = 0;
  var hasSetClassHandlers = false;
  var popoverRegistry = [];

  var Popover = function(elem) {
    this.$elem = $(elem);
    this.options = _assign({}, defaults, this.$elem.data());
    this.uid = ++instantiationCount;
    this.$trigger = $('[' + this.options.triggerSelector + '="' + this.options.id + '"]');

    // Don't do much unless a corresponding trigger is found
    if (this.$trigger.length) {
      // Move elem to bottom of page so its stacking context is outside of any
      // page elements
      this.$elem.detach().appendTo('body');

      var $mount = this.$trigger.find(this.options.mountSelector);
      if ($mount.length) {
        this.$mount = $mount;
      } else {
        this.$mount = this.$trigger;
      }

      this.clickEvent = 'click.' + this.options.popoverSelector + '_' + this.uid;
      this.resizeEvent = 'resize.' + this.options.popoverSelector;
      this.scrollEvent = 'scroll.' + this.options.popoverSelector + '_' + this.uid;

      this.isActive = false;
      this.timeout = null;
      this.hasActivatedByHover = false;
      this.isTriggerFixed = false;
      this.hasDeterminedFixedPosition = false;
      this.resetStyle = true;

      this.bindActivationHandlers();
      this.addArrow();
      this.$arrow = this.$elem.find('.' + this.options.arrowClass);
      popoverRegistry.push(this);

      // Set class handlers once across instances
      if (!hasSetClassHandlers) {
        bindWindowResizeEvent(this.resizeEvent);
        hasSetClassHandlers = true;
      }
    }
  };

  Popover.prototype = {
    bindActivationHandlers: function() {
      if (this.options.action === 'hover') {
        this.bindClickEvents();
        if (!DetectionUtils.isLikelyMobile()) {
          this.bindHoverEvents();
        }
      } else if (this.options.action === 'clickAndHover') {
        if (DetectionUtils.isLikelyMobile()) {
          this.bindClickEvents();
        } else {
          this.bindHoverEvents();
        }
      } else {
        // Default to click only
        this.bindClickEvents();
      }
    },

    bindClickEvents: function() {
      this.$trigger.on(this.clickEvent, (function(e) {
        e.preventDefault();

        // Prematurely exit if hover has already opened this popover
        if (this.options.action === 'hover' && this.hasActivatedByHover) {
          return;
        }

        this.toggle();
      }).bind(this));
    },

    bindHoverEvents: function() {
      var that = this;

      hoverIntent(
        this.$trigger[0],
        function() {
          that.hasActivatedByHover = true;
          if (!that.isActive) {
            that.activate();
          }
        }, function() {
        // Out is a custom implementation
        }).options({
        // Timeout is a custom implementation
        timeout: 0,

        sensitivity: this.options.hoverSensitivity,
        interval: this.options.hoverInterval
      });

      // Entering the trigger or the target will clear any timeouts which are
      // set to close the dropdown

      var enterTrigger = function() {
        // Clear any timeout that is set to deactivate the dropdown
        clearTimeout(that.timeout);
      };
      this.$trigger.on('mouseenter', enterTrigger);

      var enterTarget = function() {
        // Clear any timeout that is set to deactivate the dropdown
        clearTimeout(that.timeout);
      };
      this.$elem.on('mouseenter', enterTarget);

      // Leaving the trigger or the target will set timeouts which are set to
      // close the dropdown

      var leaveTrigger = function() {
        that.timeout = setTimeout(function() {
          that.deactivate();
        }, that.options.timeout);
      };
      this.$trigger.on('mouseleave', leaveTrigger);

      var leaveTarget = function() {
        that.timeout = setTimeout(function() {
          that.deactivate();
        }, that.options.timeout);
      };
      this.$elem.on('mouseleave', leaveTarget);
    },

    setPosition: function() {
      var $window = $(window);

      // Remove any previous classes setting arrow direction if the trigger is not fixed
      if (this.resetStyle) {
        this.removeClassesHavingPrefix(this.$elem, this.options.openClass);
      }

      // Reset any explicit width or arrow position
      this.$elem.css('width', '');
      this.$arrow.css({ left: '', top: '' });

      var parts = this.options.position.split('-');
      var side = parts[0];
      var offsetSide = (parts.length > 1) ? parts[1] : 'center';
      var isDirectionVertical = positions[this.options.position];

      // Get trigger mount dimensions
      var mountWidth = this.$mount.outerWidth();
      var mountHeight = this.$mount.outerHeight();
      var mountOffset = this.$mount.offset();
      var mountPos = {};

      mountPos.top = mountOffset.top;
      mountPos.left = mountOffset.left;
      mountPos.bottom = mountPos.top + mountHeight;
      mountPos.right = mountPos.left + mountWidth;
      var targetWidth = this.$elem.outerWidth();
      var targetHeight = this.$elem.outerHeight();
      var arrowWidth = this.options.arrowWidth;

      // Switch to vertical direction on mobile because of limited viewport
      if (!BreakpointHelper.isMidUp() && !isDirectionVertical) {
        side = 'top';
        offsetSide = 'center';
        isDirectionVertical = true;
      }

      // Returns a potential popover (target) position given the preferred side
      // eslint-disable-next-line no-shadow
      function getTargetPosition(side, correction) {
        var top;
        var left;

        if (isDirectionVertical) {
          top = mountPos[opposites[side]] + arrowWidth;
          if (side === 'bottom') {
            top -= targetHeight + (arrowWidth * 2);
          }

          left = mountPos.left + (mountWidth / 2) + correction;
          if (offsetSide === 'center') {
            // Set center of popover to match up wth center of mount
            left += -(targetWidth / 2);
          } else if (offsetSide === 'left') {
            left += -(arrowWidth) - this.options.anchorOffset;
          } else if (offsetSide === 'right') {
            left += arrowWidth - targetWidth + this.options.anchorOffset;
          }

          if (correction !== 0) {
            var arrowLeft = mountPos.left + (mountWidth / 2) - left;
            this.$arrow.css('left', arrowLeft + 'px');
          }
        } else {
          left = mountPos[opposites[side]] + arrowWidth;
          if (side === 'right') {
            left -= targetWidth + (arrowWidth * 2);
          }

          top = mountPos.top + (mountHeight / 2) + correction;
          if (offsetSide === 'center') {
            // Set center of popover to match up wth center of mount
            top += -(targetHeight / 2);
          } else if (offsetSide === 'top') {
            top += -(arrowWidth) - this.options.anchorOffset;
          } else if (offsetSide === 'bottom') {
            top += arrowWidth - targetHeight + this.options.anchorOffset;
          }

          // Prevent popover from detaching from arrow in extreme cases
          if (correction < 0) {
            top = Math.max(top, (mountPos.top + (mountHeight / 2) - targetHeight + arrowWidth + this.options.anchorOffset));
          } else if (correction > 0) {
            top = Math.min(top, (mountPos.top + (mountHeight / 2) - arrowWidth - this.options.anchorOffset));
          }

          if (correction !== 0) {
            var arrowTop = mountPos.top + (mountHeight / 2) - top;
            this.$arrow.css('top', arrowTop + 'px');
          }
        }

        return {
          top: top,
          left: left
        };
      }

      // Find initial position given preferred side
      var pos = getTargetPosition.call(this, side, 0);

      // Find any collisions with the viewport
      var collisions = this.getPositionRelativeToViewport(pos.top, pos.left, targetWidth, targetHeight, $window);

      // Switch anchor sides completely if popover is outside of viewport in the
      // direction of the anchor side
      var newSide = this.getNewAnchorSide(side, collisions, mountPos, mountWidth, mountHeight, targetHeight, window);
      if (newSide) {
        side = newSide;
      }

      // Impose explicit width on horizontally opening popovers if width is
      // greater than available space
      var hasNewWidth = false;
      if (!isDirectionVertical) {
        var width = -(this.options.arrowWidth + this.options.viewportMargin);
        if (side === 'left') {
          width += window.innerWidth - mountPos.left - mountWidth;
        } else if (side === 'right') {
          width += mountPos.left;
        }

        if (targetWidth > width) {
          this.$elem.css('width', width + 'px');
          targetWidth = width;
          hasNewWidth = true;

          // Get new height since width has changed
          targetHeight = this.$elem.outerHeight();

          // Find any new collisions given new width and height
          collisions = this.getPositionRelativeToViewport(pos.top, pos.left, targetWidth, targetHeight, $window);
        }
      }

      // Get correction given collisions
      var correction = this.getCorrection(isDirectionVertical, collisions);

      // Find new position after switching anchor side or determining correction
      if (newSide || hasNewWidth || correction !== 0) {
        pos = getTargetPosition.call(this, side, correction);
      }

      // Set popover position
      this.$elem.css({ top: pos.top, left: pos.left });
      this.$elem.addClass([this.options.openClass, side, offsetSide].join('-'));
    },

    // Returns the value to correct the offset by, given the collisions with
    // the viewport and the primary direction of the popover.
    getCorrection: function(isDirectionVertical, collisions) {
      var correction = 0;
      if (isDirectionVertical) {
        if (collisions.right < 0) {
          correction = collisions.right;
        } else if (collisions.left > 0) {
          correction = collisions.left;
        }
      } else {
        // eslint-disable-next-line no-lonely-if
        if (collisions.bottom < 0) {
          correction = collisions.bottom;
        } else if (collisions.top > 0) {
          correction = collisions.top;
        }
      }

      return correction;
    },


    // Returns the opposite of the given anchor side if the current side is encountered collisions
    // and the opposite side has more available space than the current side, else returns 'false'.
    // eslint-disable-next-line no-shadow
    getNewAnchorSide: function(side, collisions, mountPos, mountWidth, mountHeight, targetHeight, window) {
      if ((side === 'top' && collisions.bottom < 0) ||
          (side === 'bottom' && collisions.top > 0)) {
        // When vertical, take scrolling into consideration to calculate the top position of the anchor.
        // This is needed because the anchor can be inside a sticky element.
        var topSpaceInViewport = mountPos.top - $(document).scrollTop();
        var bottomSpace = window.innerHeight - topSpaceInViewport - mountHeight;

        // When vertical, we don't want to set the side to 'bottom',
        // if the popover height is taller than the top space.
        if ((side === 'top' && topSpaceInViewport > bottomSpace && targetHeight < topSpaceInViewport) ||
            (side === 'bottom' && (bottomSpace > topSpaceInViewport || targetHeight > topSpaceInViewport))) {
          return opposites[side];
        }
      }

      if ((side === 'left' && collisions.right < 0) ||
          (side === 'right' && collisions.left > 0)) {
        var rightSpace = window.innerWidth - mountPos.left - mountWidth;
        var leftSpace = mountPos.left;
        if ((side === 'left' && leftSpace > rightSpace) ||
            (side === 'right' && rightSpace > leftSpace)) {
          return opposites[side];
        }
      }

      return false;
    },

    // Returns an object of sides which represent the relative position of the
    // given dimensions to the viewport.
    getPositionRelativeToViewport: function(top, left, width, height, $window) {
      var bottom = top + height;
      var right = left + width;
      var viewportTop = $window.scrollTop();
      var viewportHeight = $window.height();
      var viewportBottom = viewportTop + viewportHeight;
      var viewportLeft = $window.scrollLeft();
      var viewportWidth = $window.width();
      var viewportRight = viewportLeft + viewportWidth;
      var margin = this.options.viewportMargin;

      return {
        top: viewportTop - top + margin,
        right: viewportRight - right - margin,
        bottom: viewportBottom - bottom - margin,
        left: viewportLeft - left + margin
      };
    },

    toggle: function() {
      if (this.isActive) {
        this.deactivate();
      } else {
        this.activate();
      }
    },

    activate: function() {
      if (!this.hasDeterminedFixedPosition) {
        this.currentTopPosition = this.$trigger.offset().top - $(window).scrollTop();
      }

      this.isActive = true;
      this.$elem.addClass(this.options.readyClass);
      this.setPosition();
      this.$elem.removeClass(this.options.inactiveClass)
        .addClass(this.options.activeClass);
      this.$trigger.addClass(this.options.activeClass);
      this.bindDocumentClickHandler();

      // Scroll event is needed only for the fixed trigger or
      // before activate for the first time when hasDeterminedFixedPosition is false.
      if (!this.hasDeterminedFixedPosition || this.isTriggerFixed) {
        this.bindScrollEvent();
      }
    },

    deactivate: function() {
      this.isActive = false;
      this.$elem.removeClass(this.options.activeClass)
        .addClass(this.options.inactiveClass);
      this.$trigger.removeClass(this.options.activeClass);

      setTimeout((function() {
        // Remove display:block so phantom dropdowns don't flow out of
        // viewport and create horizontal scrollbars
        this.$elem.removeClass(this.options.readyClass);
      }).bind(this), 130);

      this.removeDocumentClickHandler();

      if (this.isTriggerFixed) {
        this.removeScrollHandler();
      }
    },

    // Closes the dropdown on any click outside of it or its trigger
    bindDocumentClickHandler: function() {
      $(document).on(this.clickEvent, (function(e) {
        // Firefox compatibility
        var evt = e.target || e.srcElement;
        var $target = $(evt);
        if (!$target.closest(this.$trigger).length && !$target.closest(this.$elem).length) {
          this.deactivate();
        }
      }).bind(this));
    },

    removeDocumentClickHandler: function() {
      $(document).off(this.clickEvent);
    },

    bindScrollEvent: function() {
      var $window = $(window);

      $window.on(this.scrollEvent, function() {
        // Check if the trigger is fixed positioned.
        if (!this.hasDeterminedFixedPosition) {
          var top = this.$trigger.offset().top - $window.scrollTop();
          this.isTriggerFixed = this.currentTopPosition === top;
          this.hasDeterminedFixedPosition = true;
        }

        if (this.isTriggerFixed) {
          this.resetStyle = false;
          this.setPosition();
        } else {
          this.removeScrollHandler();
        }
      }.bind(this));
    },

    removeScrollHandler: function() {
      $(window).off(this.scrollEvent);
    },

    // Add arrow to popover dynamically depending on style. Currently, all
    // styles have arrows.
    addArrow: function() {
      var d = document;
      var df = d.createDocumentFragment();
      var elem = this.$elem[0];
      var arrow = d.createElement('div');
      arrow.classList.add(this.options.arrowClass);
      var innerArrow = d.createElement('div');
      innerArrow.classList.add(this.options.innerArrowClass);
      df.appendChild(arrow).appendChild(innerArrow);
      elem.appendChild(df);
    },

    // Removes any classes from the given element having the given prefix
    removeClassesHavingPrefix: function($elem, prefix) {
      $elem.removeClass(function(idx, className) {
        var re = new RegExp('(^|\\s)' + prefix + '\\S+', 'g');

        return (className.match(re) || []).join(' ');
      });
    },

    // References to variables shared across instances, for testing
    _popoverRegistry: popoverRegistry
  };

  return Popover;
});

define('libra/components/popover',[
  'libraui/components/popover'
], function(Popover) {
  'use strict';

  Libra.Comp.register({
    name: 'popover',
    initFct: function(elem) {
      new Popover(elem);
    },
    initTime: 'immediate'
  });

  return Popover;
});

define('libra/components/tracking-pixel',[
  'librastandardlib/obj-utils/mixin',
  'libra/components/pixel-mixin'
], function(mixin, PixelMixin) {
  'use strict';

  function TrackingPixel(elem, options) {
    this.$elem = $(elem);
    options = $.extend({}, this.$elem.data(), options);
    this.pixelUrl = options.url;
    this.firePixel();
  }

  mixin(TrackingPixel.prototype, PixelMixin);

  Libra.Comp.register({
    name: 'tracking-pixel',
    initFct: function(elem) {
      new TrackingPixel(elem);
    },
    initTime: 'documentReady'
  });

  return TrackingPixel;
});

define('aws-blog/article-arrow',[],function() {
  'use strict';

  var defaults = {
    channelCharLimit: 20,
    articleCharLimit: 41,
    truncationChar: '&hellip;',
    channelSelector: '.lb-channel-name',
    articleTitleSelector: '.lb-article-title',
    midStringTruncLangs: ['ja-JP', 'zh-CN']
  };

  var ArticleArrow = function(elem) {
    this.$elem = $(elem);
    this.options = $.extend({}, defaults, this.$elem.data());
    this.$channelTitle = this.$elem.find(this.options.channelSelector);
    this.$articleTitle = this.$elem.find(this.options.articleTitleSelector);

    if (this.$channelTitle.length && this.$channelTitle.html().length > this.options.channelCharLimit) {
      this.truncateText(this.$channelTitle, this.options.channelCharLimit);
    }

    if (this.$articleTitle.length && this.$articleTitle.html().length > this.options.articleCharLimit) {
      this.truncateText(this.$articleTitle, this.options.articleCharLimit);
    }
  };

  ArticleArrow.prototype.truncateText = function(elem, charLimit) {

    var lang = $('html').attr('lang');
    var isMidStringTruncLang = this.options.midStringTruncLangs.indexOf(lang) !== -1;
    var sentenceTruncation;

    if (!isMidStringTruncLang) {
      sentenceTruncation = $.trim(elem.html())
        .substring(0, charLimit)
        .split(' ')
        .slice(0, -1)
        .join(' ');

    } else {
      sentenceTruncation = $.trim(elem.html()).substring(0, charLimit);
    }
    elem.html(sentenceTruncation + this.options.truncationChar);
  };

  Libra.Comp.register({
    name: 'aws-blog:article-arrow',
    initFct: function(elem) {
      new ArticleArrow(elem);
    },
    initTime: 'immediate'
  });

  return ArticleArrow;
});

/*!
 * fancyBox - jQuery Plugin
 * version: 2.1.5 (Fri, 14 Jun 2013)
 * @requires jQuery v1.6 or later
 *
 * Examples at http://fancyapps.com/fancybox/
 * License: www.fancyapps.com/fancybox/#license
 *
 * Copyright 2012 Janis Skarnelis - janis@fancyapps.com
 *
 */

(function (window, document, $, undefined) {
  "use strict";

  var H = $("html"),
    W = $(window),
    D = $(document),
    F = $.fancybox = function () {
      F.open.apply( this, arguments );
    },
    IE =  navigator.userAgent.match(/msie/i),
    didUpdate	= null,
    isTouch		= document.createTouch !== undefined,

    isQuery	= function(obj) {
      return obj && obj.hasOwnProperty && obj instanceof $;
    },
    isString = function(str) {
      return str && $.type(str) === "string";
    },
    isPercentage = function(str) {
      return isString(str) && str.indexOf('%') > 0;
    },
    isScrollable = function(el) {
      return (el && !(el.style.overflow && el.style.overflow === 'hidden') && ((el.clientWidth && el.scrollWidth > el.clientWidth) || (el.clientHeight && el.scrollHeight > el.clientHeight)));
    },
    getScalar = function(orig, dim) {
      var value = parseInt(orig, 10) || 0;

      if (dim && isPercentage(orig)) {
        value = F.getViewport()[ dim ] / 100 * value;
      }

      return Math.ceil(value);
    },
    getValue = function(value, dim) {
      return getScalar(value, dim) + 'px';
    };

  $.extend(F, {
    // The current version of fancyBox
    version: '2.1.5',

    defaults: {
      padding : 15,
      margin  : 20,

      width     : 800,
      height    : 600,
      minWidth  : 100,
      minHeight : 100,
      maxWidth  : 9999,
      maxHeight : 9999,
      pixelRatio: 1, // Set to 2 for retina display support

      autoSize   : true,
      autoHeight : false,
      autoWidth  : false,

      autoResize  : true,
      autoCenter  : !isTouch,
      fitToView   : true,
      aspectRatio : false,
      topRatio    : 0.5,
      leftRatio   : 0.5,

      scrolling : 'auto', // 'auto', 'yes' or 'no'
      wrapCSS   : '',

      arrows     : true,
      closeBtn   : true,
      closeClick : false,
      nextClick  : false,
      mouseWheel : true,
      autoPlay   : false,
      playSpeed  : 3000,
      preload    : 3,
      modal      : false,
      loop       : true,

      ajax  : {
        dataType : 'html',
        headers  : { 'X-fancyBox': true }
      },
      iframe : {
        scrolling : 'auto',
        preload   : true
      },
      swf : {
        wmode: 'transparent',
        allowfullscreen   : 'true',
        allowscriptaccess : 'always'
      },

      keys  : {
        next : {
          13 : 'left', // enter
          34 : 'up',   // page down
          39 : 'left', // right arrow
          40 : 'up'    // down arrow
        },
        prev : {
          8  : 'right',  // backspace
          33 : 'down',   // page up
          37 : 'right',  // left arrow
          38 : 'down'    // up arrow
        },
        close  : [27], // escape key
        play   : [32], // space - start/stop slideshow
        toggle : [70]  // letter "f" - toggle fullscreen
      },

      direction : {
        next : 'left',
        prev : 'right'
      },

      scrollOutside  : true,

      // Override some properties
      index   : 0,
      type    : null,
      href    : null,
      content : null,
      title   : null,

      // HTML templates
      tpl: {
        wrap     : '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
        image    : '<img class="fancybox-image" src="{href}" alt="" />',
        iframe   : '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' + (IE ? ' allowtransparency="true"' : '') + '></iframe>',
        error    : '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
        closeBtn : '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
        next     : '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
        prev     : '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'
      },

      // Properties for each animation type
      // Opening fancyBox
      openEffect  : 'fade', // 'elastic', 'fade' or 'none'
      openSpeed   : 250,
      openEasing  : 'swing',
      openOpacity : true,
      openMethod  : 'zoomIn',

      // Closing fancyBox
      closeEffect  : 'fade', // 'elastic', 'fade' or 'none'
      closeSpeed   : 250,
      closeEasing  : 'swing',
      closeOpacity : true,
      closeMethod  : 'zoomOut',

      // Changing next gallery item
      nextEffect : 'elastic', // 'elastic', 'fade' or 'none'
      nextSpeed  : 250,
      nextEasing : 'swing',
      nextMethod : 'changeIn',

      // Changing previous gallery item
      prevEffect : 'elastic', // 'elastic', 'fade' or 'none'
      prevSpeed  : 250,
      prevEasing : 'swing',
      prevMethod : 'changeOut',

      // Enable default helpers
      helpers : {
        overlay : true,
        title   : true
      },

      // Callbacks
      onCancel     : $.noop, // If canceling
      beforeLoad   : $.noop, // Before loading
      afterLoad    : $.noop, // After loading
      beforeShow   : $.noop, // Before changing in current item
      afterShow    : $.noop, // After opening
      beforeChange : $.noop, // Before changing gallery item
      beforeClose  : $.noop, // Before closing
      afterClose   : $.noop  // After closing
    },

    //Current state
    group    : {}, // Selected group
    opts     : {}, // Group options
    previous : null,  // Previous element
    coming   : null,  // Element being loaded
    current  : null,  // Currently loaded element
    isActive : false, // Is activated
    isOpen   : false, // Is currently open
    isOpened : false, // Have been fully opened at least once

    wrap  : null,
    skin  : null,
    outer : null,
    inner : null,

    player : {
      timer    : null,
      isActive : false
    },

    // Loaders
    ajaxLoad   : null,
    imgPreload : null,

    // Some collections
    transitions : {},
    helpers     : {},

    /*
     *	Static methods
     */

    open: function (group, opts) {
      if (!group) {
        return;
      }

      if (!$.isPlainObject(opts)) {
        opts = {};
      }

      // Close if already active
      if (false === F.close(true)) {
        return;
      }

      // Normalize group
      if (!$.isArray(group)) {
        group = isQuery(group) ? $(group).get() : [group];
      }

      // Recheck if the type of each element is `object` and set content type (image, ajax, etc)
      $.each(group, function(i, element) {
        var obj = {},
          href,
          title,
          content,
          type,
          rez,
          hrefParts,
          selector;

        if ($.type(element) === "object") {
          // Check if is DOM element
          if (element.nodeType) {
            element = $(element);
          }

          if (isQuery(element)) {
            obj = {
              href    : element.data('fancybox-href') || element.attr('href'),
              title   : element.data('fancybox-title') || element.attr('title'),
              isDom   : true,
              element : element
            };

            if ($.metadata) {
              $.extend(true, obj, element.metadata());
            }

          } else {
            obj = element;
          }
        }

        href  = opts.href  || obj.href || (isString(element) ? element : null);
        title = opts.title !== undefined ? opts.title : obj.title || '';

        content = opts.content || obj.content;
        type    = content ? 'html' : (opts.type  || obj.type);

        if (!type && obj.isDom) {
          type = element.data('fancybox-type');

          if (!type) {
            rez  = element.prop('class').match(/fancybox\.(\w+)/);
            type = rez ? rez[1] : null;
          }
        }

        if (isString(href)) {
          // Try to guess the content type
          if (!type) {
            if (F.isImage(href)) {
              type = 'image';

            } else if (F.isSWF(href)) {
              type = 'swf';

            } else if (href.charAt(0) === '#') {
              type = 'inline';

            } else if (isString(element)) {
              type    = 'html';
              content = element;
            }
          }

          // Split url into two pieces with source url and content selector, e.g,
          // "/mypage.html #my_id" will load "/mypage.html" and display element having id "my_id"
          if (type === 'ajax') {
            hrefParts = href.split(/\s+/, 2);
            href      = hrefParts.shift();
            selector  = hrefParts.shift();
          }
        }

        if (!content) {
          if (type === 'inline') {
            if (href) {
              content = $( isString(href) ? href.replace(/.*(?=#[^\s]+$)/, '') : href ); //strip for ie7

            } else if (obj.isDom) {
              content = element;
            }

          } else if (type === 'html') {
            content = href;

          } else if (!type && !href && obj.isDom) {
            type    = 'inline';
            content = element;
          }
        }

        $.extend(obj, {
          href     : href,
          type     : type,
          content  : content,
          title    : title,
          selector : selector
        });

        group[ i ] = obj;
      });

      // Extend the defaults
      F.opts = $.extend(true, {}, F.defaults, opts);

      // All options are merged recursive except keys
      if (opts.keys !== undefined) {
        F.opts.keys = opts.keys ? $.extend({}, F.defaults.keys, opts.keys) : false;
      }

      F.group = group;

      return F._start(F.opts.index);
    },

    // Cancel image loading or abort ajax request
    cancel: function () {
      var coming = F.coming;

      if (!coming || false === F.trigger('onCancel')) {
        return;
      }

      F.hideLoading();

      if (F.ajaxLoad) {
        F.ajaxLoad.abort();
      }

      F.ajaxLoad = null;

      if (F.imgPreload) {
        F.imgPreload.onload = F.imgPreload.onerror = null;
      }

      if (coming.wrap) {
        coming.wrap.stop(true, true).trigger('onReset').remove();
      }

      F.coming = null;

      // If the first item has been canceled, then clear everything
      if (!F.current) {
        F._afterZoomOut( coming );
      }
    },

    // Start closing animation if is open; remove immediately if opening/closing
    close: function (event) {
      F.cancel();

      if (false === F.trigger('beforeClose')) {
        return;
      }

      F.unbindEvents();

      if (!F.isActive) {
        return;
      }

      if (!F.isOpen || event === true) {
        $('.fancybox-wrap').stop(true).trigger('onReset').remove();

        F._afterZoomOut();

      } else {
        F.isOpen = F.isOpened = false;
        F.isClosing = true;

        $('.fancybox-item, .fancybox-nav').remove();

        F.wrap.stop(true, true).removeClass('fancybox-opened');

        F.transitions[ F.current.closeMethod ]();
      }
    },

    // Manage slideshow:
    //   $.fancybox.play(); - toggle slideshow
    //   $.fancybox.play( true ); - start
    //   $.fancybox.play( false ); - stop
    play: function ( action ) {
      var clear = function () {
          clearTimeout(F.player.timer);
        },
        set = function () {
          clear();

          if (F.current && F.player.isActive) {
            F.player.timer = setTimeout(F.next, F.current.playSpeed);
          }
        },
        stop = function () {
          clear();

          D.unbind('.player');

          F.player.isActive = false;

          F.trigger('onPlayEnd');
        },
        start = function () {
          if (F.current && (F.current.loop || F.current.index < F.group.length - 1)) {
            F.player.isActive = true;

            D.bind({
              'onCancel.player beforeClose.player' : stop,
              'onUpdate.player'   : set,
              'beforeLoad.player' : clear
            });

            set();

            F.trigger('onPlayStart');
          }
        };

      if (action === true || (!F.player.isActive && action !== false)) {
        start();
      } else {
        stop();
      }
    },

    // Navigate to next gallery item
    next: function ( direction ) {
      var current = F.current;

      if (current) {
        if (!isString(direction)) {
          direction = current.direction.next;
        }

        F.jumpto(current.index + 1, direction, 'next');
      }
    },

    // Navigate to previous gallery item
    prev: function ( direction ) {
      var current = F.current;

      if (current) {
        if (!isString(direction)) {
          direction = current.direction.prev;
        }

        F.jumpto(current.index - 1, direction, 'prev');
      }
    },

    // Navigate to gallery item by index
    jumpto: function ( index, direction, router ) {
      var current = F.current;

      if (!current) {
        return;
      }

      index = getScalar(index);

      F.direction = direction || current.direction[ (index >= current.index ? 'next' : 'prev') ];
      F.router    = router || 'jumpto';

      if (current.loop) {
        if (index < 0) {
          index = current.group.length + (index % current.group.length);
        }

        index = index % current.group.length;
      }

      if (current.group[ index ] !== undefined) {
        F.cancel();

        F._start(index);
      }
    },

    // Center inside viewport and toggle position type to fixed or absolute if needed
    reposition: function (e, onlyAbsolute) {
      var current = F.current,
        wrap    = current ? current.wrap : null,
        pos;

      if (wrap) {
        pos = F._getPosition(onlyAbsolute);

        if (e && e.type === 'scroll') {
          delete pos.position;

          wrap.stop(true, true).animate(pos, 200);

        } else {
          wrap.css(pos);

          current.pos = $.extend({}, current.dim, pos);
        }
      }
    },

    update: function (e) {
      var type = (e && e.type),
        anyway = !type || type === 'orientationchange';

      if (anyway) {
        clearTimeout(didUpdate);

        didUpdate = null;
      }

      if (!F.isOpen || didUpdate) {
        return;
      }

      didUpdate = setTimeout(function() {
        var current = F.current;

        if (!current || F.isClosing) {
          return;
        }

        F.wrap.removeClass('fancybox-tmp');

        if (anyway || type === 'load' || (type === 'resize' && current.autoResize)) {
          F._setDimension();
        }

        if (!(type === 'scroll' && current.canShrink)) {
          F.reposition(e);
        }

        F.trigger('onUpdate');

        didUpdate = null;

      }, (anyway && !isTouch ? 0 : 300));
    },

    // Shrink content to fit inside viewport or restore if resized
    toggle: function ( action ) {
      if (F.isOpen) {
        F.current.fitToView = $.type(action) === "boolean" ? action : !F.current.fitToView;

        // Help browser to restore document dimensions
        if (isTouch) {
          F.wrap.removeAttr('style').addClass('fancybox-tmp');

          F.trigger('onUpdate');
        }

        F.update();
      }
    },

    hideLoading: function () {
      D.unbind('.loading');

      $('#fancybox-loading').remove();
    },

    showLoading: function () {
      var el, viewport;

      F.hideLoading();

      el = $('<div id="fancybox-loading"><div></div></div>').click(F.cancel).appendTo('body');

      // If user will press the escape-button, the request will be canceled
      D.bind('keydown.loading', function(e) {
        if ((e.which || e.keyCode) === 27) {
          e.preventDefault();

          F.cancel();
        }
      });

      if (!F.defaults.fixed) {
        viewport = F.getViewport();

        el.css({
          position : 'absolute',
          top  : (viewport.h * 0.5) + viewport.y,
          left : (viewport.w * 0.5) + viewport.x
        });
      }
    },

    getViewport: function () {
      var locked = (F.current && F.current.locked) || false,
        rez    = {
          x: W.scrollLeft(),
          y: W.scrollTop()
        };

      if (locked) {
        rez.w = locked[0].clientWidth;
        rez.h = locked[0].clientHeight;

      } else {
        // See http://bugs.jquery.com/ticket/6724
        rez.w = isTouch && window.innerWidth  ? window.innerWidth  : W.width();
        rez.h = isTouch && window.innerHeight ? window.innerHeight : W.height();
      }

      return rez;
    },

    // Unbind the keyboard / clicking actions
    unbindEvents: function () {
      if (F.wrap && isQuery(F.wrap)) {
        F.wrap.unbind('.fb');
      }

      D.unbind('.fb');
      W.unbind('.fb');
    },

    bindEvents: function () {
      var current = F.current,
        keys;

      if (!current) {
        return;
      }

      // Changing document height on iOS devices triggers a 'resize' event,
      // that can change document height... repeating infinitely
      W.bind('orientationchange.fb' + (isTouch ? '' : ' resize.fb') + (current.autoCenter && !current.locked ? ' scroll.fb' : ''), F.update);

      keys = current.keys;

      if (keys) {
        D.bind('keydown.fb', function (e) {
          var code   = e.which || e.keyCode,
            target = e.target || e.srcElement;

          // Skip esc key if loading, because showLoading will cancel preloading
          if (code === 27 && F.coming) {
            return false;
          }

          // Ignore key combinations and key events within form elements
          if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey && !(target && (target.type || $(target).is('[contenteditable]')))) {
            $.each(keys, function(i, val) {
              if (current.group.length > 1 && val[ code ] !== undefined) {
                F[ i ]( val[ code ] );

                e.preventDefault();
                return false;
              }

              if ($.inArray(code, val) > -1) {
                F[ i ] ();

                e.preventDefault();
                return false;
              }
            });
          }
        });
      }

      if ($.fn.mousewheel && current.mouseWheel) {
        F.wrap.bind('mousewheel.fb', function (e, delta, deltaX, deltaY) {
          var target = e.target || null,
            parent = $(target),
            canScroll = false;

          while (parent.length) {
            if (canScroll || parent.is('.fancybox-skin') || parent.is('.fancybox-wrap')) {
              break;
            }

            canScroll = isScrollable( parent[0] );
            parent    = $(parent).parent();
          }

          if (delta !== 0 && !canScroll) {
            if (F.group.length > 1 && !current.canShrink) {
              if (deltaY > 0 || deltaX > 0) {
                F.prev( deltaY > 0 ? 'down' : 'left' );

              } else if (deltaY < 0 || deltaX < 0) {
                F.next( deltaY < 0 ? 'up' : 'right' );
              }

              e.preventDefault();
            }
          }
        });
      }
    },

    trigger: function (event, o) {
      var ret, obj = o || F.coming || F.current;

      if (!obj) {
        return;
      }

      if ($.isFunction( obj[event] )) {
        ret = obj[event].apply(obj, Array.prototype.slice.call(arguments, 1));
      }

      if (ret === false) {
        return false;
      }

      if (obj.helpers) {
        $.each(obj.helpers, function (helper, opts) {
          if (opts && F.helpers[helper] && $.isFunction(F.helpers[helper][event])) {
            F.helpers[helper][event]($.extend(true, {}, F.helpers[helper].defaults, opts), obj);
          }
        });
      }

      D.trigger(event);
    },

    isImage: function (str) {
      return isString(str) && str.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i);
    },

    isSWF: function (str) {
      return isString(str) && str.match(/\.(swf)((\?|#).*)?$/i);
    },

    _start: function (index) {
      var coming = {},
        obj,
        href,
        type,
        margin,
        padding;

      index = getScalar( index );
      obj   = F.group[ index ] || null;

      if (!obj) {
        return false;
      }

      coming = $.extend(true, {}, F.opts, obj);

      // Convert margin and padding properties to array - top, right, bottom, left
      margin  = coming.margin;
      padding = coming.padding;

      if ($.type(margin) === 'number') {
        coming.margin = [margin, margin, margin, margin];
      }

      if ($.type(padding) === 'number') {
        coming.padding = [padding, padding, padding, padding];
      }

      // 'modal' propery is just a shortcut
      if (coming.modal) {
        $.extend(true, coming, {
          closeBtn   : false,
          closeClick : false,
          nextClick  : false,
          arrows     : false,
          mouseWheel : false,
          keys       : null,
          helpers: {
            overlay : {
              closeClick : false
            }
          }
        });
      }

      // 'autoSize' property is a shortcut, too
      if (coming.autoSize) {
        coming.autoWidth = coming.autoHeight = true;
      }

      if (coming.width === 'auto') {
        coming.autoWidth = true;
      }

      if (coming.height === 'auto') {
        coming.autoHeight = true;
      }

      /*
       * Add reference to the group, so it`s possible to access from callbacks, example:
       * afterLoad : function() {
       *     this.title = 'Image ' + (this.index + 1) + ' of ' + this.group.length + (this.title ? ' - ' + this.title : '');
       * }
       */

      coming.group  = F.group;
      coming.index  = index;

      // Give a chance for callback or helpers to update coming item (type, title, etc)
      F.coming = coming;

      if (false === F.trigger('beforeLoad')) {
        F.coming = null;

        return;
      }

      type = coming.type;
      href = coming.href;

      if (!type) {
        F.coming = null;

        //If we can not determine content type then drop silently or display next/prev item if looping through gallery
        if (F.current && F.router && F.router !== 'jumpto') {
          F.current.index = index;

          return F[ F.router ]( F.direction );
        }

        return false;
      }

      F.isActive = true;

      if (type === 'image' || type === 'swf') {
        coming.autoHeight = coming.autoWidth = false;
        coming.scrolling  = 'visible';
      }

      if (type === 'image') {
        coming.aspectRatio = true;
      }

      if (type === 'iframe' && isTouch) {
        coming.scrolling = 'scroll';
      }

      // Build the neccessary markup
      coming.wrap = $(coming.tpl.wrap).addClass('fancybox-' + (isTouch ? 'mobile' : 'desktop') + ' fancybox-type-' + type + ' fancybox-tmp ' + coming.wrapCSS).appendTo( coming.parent || 'body' );

      $.extend(coming, {
        skin  : $('.fancybox-skin',  coming.wrap),
        outer : $('.fancybox-outer', coming.wrap),
        inner : $('.fancybox-inner', coming.wrap)
      });

      $.each(["Top", "Right", "Bottom", "Left"], function(i, v) {
        coming.skin.css('padding' + v, getValue(coming.padding[ i ]));
      });

      F.trigger('onReady');

      // Check before try to load; 'inline' and 'html' types need content, others - href
      if (type === 'inline' || type === 'html') {
        if (!coming.content || !coming.content.length) {
          return F._error( 'content' );
        }

      } else if (!href) {
        return F._error( 'href' );
      }

      if (type === 'image') {
        F._loadImage();

      } else if (type === 'ajax') {
        F._loadAjax();

      } else if (type === 'iframe') {
        F._loadIframe();

      } else {
        F._afterLoad();
      }
    },

    _error: function ( type ) {
      $.extend(F.coming, {
        type       : 'html',
        autoWidth  : true,
        autoHeight : true,
        minWidth   : 0,
        minHeight  : 0,
        scrolling  : 'no',
        hasError   : type,
        content    : F.coming.tpl.error
      });

      F._afterLoad();
    },

    _loadImage: function () {
      // Reset preload image so it is later possible to check "complete" property
      var img = F.imgPreload = new Image();

      img.onload = function () {
        this.onload = this.onerror = null;

        F.coming.width  = this.width / F.opts.pixelRatio;
        F.coming.height = this.height / F.opts.pixelRatio;

        F._afterLoad();
      };

      img.onerror = function () {
        this.onload = this.onerror = null;

        F._error( 'image' );
      };

      img.src = F.coming.href;

      if (img.complete !== true) {
        F.showLoading();
      }
    },

    _loadAjax: function () {
      var coming = F.coming;

      F.showLoading();

      F.ajaxLoad = $.ajax($.extend({}, coming.ajax, {
        url: coming.href,
        error: function (jqXHR, textStatus) {
          if (F.coming && textStatus !== 'abort') {
            F._error( 'ajax', jqXHR );

          } else {
            F.hideLoading();
          }
        },
        success: function (data, textStatus) {
          if (textStatus === 'success') {
            coming.content = data;

            F._afterLoad();
          }
        }
      }));
    },

    _loadIframe: function() {
      var coming = F.coming,
        iframe = $(coming.tpl.iframe.replace(/\{rnd\}/g, new Date().getTime()))
          .attr('scrolling', isTouch ? 'auto' : coming.iframe.scrolling)
          .attr('src', coming.href);

      // This helps IE
      $(coming.wrap).bind('onReset', function () {
        try {
          $(this).find('iframe').hide().attr('src', '//about:blank').end().empty();
        } catch (e) {}
      });

      if (coming.iframe.preload) {
        F.showLoading();

        iframe.one('load', function() {
          $(this).data('ready', 1);

          // iOS will lose scrolling if we resize
          if (!isTouch) {
            $(this).bind('load.fb', F.update);
          }

          // Without this trick:
          //   - iframe won't scroll on iOS devices
          //   - IE7 sometimes displays empty iframe
          $(this).parents('.fancybox-wrap').width('100%').removeClass('fancybox-tmp').show();

          F._afterLoad();
        });
      }

      coming.content = iframe.appendTo( coming.inner );

      if (!coming.iframe.preload) {
        F._afterLoad();
      }
    },

    _preloadImages: function() {
      var group   = F.group,
        current = F.current,
        len     = group.length,
        cnt     = current.preload ? Math.min(current.preload, len - 1) : 0,
        item,
        i;

      for (i = 1; i <= cnt; i += 1) {
        item = group[ (current.index + i ) % len ];

        if (item.type === 'image' && item.href) {
          new Image().src = item.href;
        }
      }
    },

    _afterLoad: function () {
      var coming   = F.coming,
        previous = F.current,
        placeholder = 'fancybox-placeholder',
        current,
        content,
        type,
        scrolling,
        href,
        embed;

      F.hideLoading();

      if (!coming || F.isActive === false) {
        return;
      }

      if (false === F.trigger('afterLoad', coming, previous)) {
        coming.wrap.stop(true).trigger('onReset').remove();

        F.coming = null;

        return;
      }

      if (previous) {
        F.trigger('beforeChange', previous);

        previous.wrap.stop(true).removeClass('fancybox-opened')
          .find('.fancybox-item, .fancybox-nav')
          .remove();
      }

      F.unbindEvents();

      current   = coming;
      content   = coming.content;
      type      = coming.type;
      scrolling = coming.scrolling;

      $.extend(F, {
        wrap  : current.wrap,
        skin  : current.skin,
        outer : current.outer,
        inner : current.inner,
        current  : current,
        previous : previous
      });

      href = current.href;

      switch (type) {
        case 'inline':
        case 'ajax':
        case 'html':
          if (current.selector) {
            content = $('<div>').html(content).find(current.selector);

          } else if (isQuery(content)) {
            if (!content.data(placeholder)) {
              content.data(placeholder, $('<div class="' + placeholder + '"></div>').insertAfter( content ).hide() );
            }

            content = content.show().detach();

            current.wrap.bind('onReset', function () {
              if ($(this).find(content).length) {
                content.hide().replaceAll( content.data(placeholder) ).data(placeholder, false);
              }
            });
          }
          break;

        case 'image':
          content = current.tpl.image.replace('{href}', href);
          break;

        case 'swf':
          content = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + href + '"></param>';
          embed   = '';

          $.each(current.swf, function(name, val) {
            content += '<param name="' + name + '" value="' + val + '"></param>';
            embed   += ' ' + name + '="' + val + '"';
          });

          content += '<embed src="' + href + '" type="application/x-shockwave-flash" width="100%" height="100%"' + embed + '></embed></object>';
          break;
      }

      if (!(isQuery(content) && content.parent().is(current.inner))) {
        current.inner.append( content );
      }

      // Give a chance for helpers or callbacks to update elements
      F.trigger('beforeShow');

      // Set scrolling before calculating dimensions
      current.inner.css('overflow', scrolling === 'yes' ? 'scroll' : (scrolling === 'no' ? 'hidden' : scrolling));

      // Set initial dimensions and start position
      F._setDimension();

      F.reposition();

      F.isOpen = false;
      F.coming = null;

      F.bindEvents();

      if (!F.isOpened) {
        $('.fancybox-wrap').not( current.wrap ).stop(true).trigger('onReset').remove();

      } else if (previous.prevMethod) {
        F.transitions[ previous.prevMethod ]();
      }

      F.transitions[ F.isOpened ? current.nextMethod : current.openMethod ]();

      F._preloadImages();
    },

    _setDimension: function () {
      var viewport   = F.getViewport(),
        steps      = 0,
        canShrink  = false,
        canExpand  = false,
        wrap       = F.wrap,
        skin       = F.skin,
        inner      = F.inner,
        current    = F.current,
        width      = current.width,
        height     = current.height,
        minWidth   = current.minWidth,
        minHeight  = current.minHeight,
        maxWidth   = current.maxWidth,
        maxHeight  = current.maxHeight,
        scrolling  = current.scrolling,
        scrollOut  = current.scrollOutside ? current.scrollbarWidth : 0,
        margin     = current.margin,
        wMargin    = getScalar(margin[1] + margin[3]),
        hMargin    = getScalar(margin[0] + margin[2]),
        wPadding,
        hPadding,
        wSpace,
        hSpace,
        origWidth,
        origHeight,
        origMaxWidth,
        origMaxHeight,
        ratio,
        width_,
        height_,
        maxWidth_,
        maxHeight_,
        iframe,
        body;

      // Reset dimensions so we could re-check actual size
      wrap.add(skin).add(inner).width('auto').height('auto').removeClass('fancybox-tmp');

      wPadding = getScalar(skin.outerWidth(true)  - skin.width());
      hPadding = getScalar(skin.outerHeight(true) - skin.height());

      // Any space between content and viewport (margin, padding, border, title)
      wSpace = wMargin + wPadding;
      hSpace = hMargin + hPadding;

      origWidth  = isPercentage(width)  ? (viewport.w - wSpace) * getScalar(width)  / 100 : width;
      origHeight = isPercentage(height) ? (viewport.h - hSpace) * getScalar(height) / 100 : height;

      if (current.type === 'iframe') {
        iframe = current.content;

        if (current.autoHeight && iframe.data('ready') === 1) {
          try {
            if (iframe[0].contentWindow.document.location) {
              inner.width( origWidth ).height(9999);

              body = iframe.contents().find('body');

              if (scrollOut) {
                body.css('overflow-x', 'hidden');
              }

              origHeight = body.outerHeight(true);
            }

          } catch (e) {}
        }

      } else if (current.autoWidth || current.autoHeight) {
        inner.addClass( 'fancybox-tmp' );

        // Set width or height in case we need to calculate only one dimension
        if (!current.autoWidth) {
          inner.width( origWidth );
        }

        if (!current.autoHeight) {
          inner.height( origHeight );
        }

        if (current.autoWidth) {
          origWidth = inner.width();
        }

        if (current.autoHeight) {
          origHeight = inner.height();
        }

        inner.removeClass( 'fancybox-tmp' );
      }

      width  = getScalar( origWidth );
      height = getScalar( origHeight );

      ratio  = origWidth / origHeight;

      // Calculations for the content
      minWidth  = getScalar(isPercentage(minWidth) ? getScalar(minWidth, 'w') - wSpace : minWidth);
      maxWidth  = getScalar(isPercentage(maxWidth) ? getScalar(maxWidth, 'w') - wSpace : maxWidth);

      minHeight = getScalar(isPercentage(minHeight) ? getScalar(minHeight, 'h') - hSpace : minHeight);
      maxHeight = getScalar(isPercentage(maxHeight) ? getScalar(maxHeight, 'h') - hSpace : maxHeight);

      // These will be used to determine if wrap can fit in the viewport
      origMaxWidth  = maxWidth;
      origMaxHeight = maxHeight;

      if (current.fitToView) {
        maxWidth  = Math.min(viewport.w - wSpace, maxWidth);
        maxHeight = Math.min(viewport.h - hSpace, maxHeight);
      }

      maxWidth_  = viewport.w - wMargin;
      maxHeight_ = viewport.h - hMargin;

      if (current.aspectRatio) {
        if (width > maxWidth) {
          width  = maxWidth;
          height = getScalar(width / ratio);
        }

        if (height > maxHeight) {
          height = maxHeight;
          width  = getScalar(height * ratio);
        }

        if (width < minWidth) {
          width  = minWidth;
          height = getScalar(width / ratio);
        }

        if (height < minHeight) {
          height = minHeight;
          width  = getScalar(height * ratio);
        }

      } else {
        width = Math.max(minWidth, Math.min(width, maxWidth));

        if (current.autoHeight && current.type !== 'iframe') {
          inner.width( width );

          height = inner.height();
        }

        height = Math.max(minHeight, Math.min(height, maxHeight));
      }

      // Try to fit inside viewport (including the title)
      if (current.fitToView) {
        inner.width( width ).height( height );

        wrap.width( width + wPadding );

        // Real wrap dimensions
        width_  = wrap.width();
        height_ = wrap.height();

        if (current.aspectRatio) {
          while ((width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight) {
            if (steps++ > 19) {
              break;
            }

            height = Math.max(minHeight, Math.min(maxHeight, height - 10));
            width  = getScalar(height * ratio);

            if (width < minWidth) {
              width  = minWidth;
              height = getScalar(width / ratio);
            }

            if (width > maxWidth) {
              width  = maxWidth;
              height = getScalar(width / ratio);
            }

            inner.width( width ).height( height );

            wrap.width( width + wPadding );

            width_  = wrap.width();
            height_ = wrap.height();
          }

        } else {
          width  = Math.max(minWidth,  Math.min(width,  width  - (width_  - maxWidth_)));
          height = Math.max(minHeight, Math.min(height, height - (height_ - maxHeight_)));
        }
      }

      if (scrollOut && scrolling === 'auto' && height < origHeight && (width + wPadding + scrollOut) < maxWidth_) {
        width += scrollOut;
      }

      inner.width( width ).height( height );

      wrap.width( width + wPadding );

      width_  = wrap.width();
      height_ = wrap.height();

      canShrink = (width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight;
      canExpand = current.aspectRatio ? (width < origMaxWidth && height < origMaxHeight && width < origWidth && height < origHeight) : ((width < origMaxWidth || height < origMaxHeight) && (width < origWidth || height < origHeight));

      $.extend(current, {
        dim : {
          width	: getValue( width_ ),
          height	: getValue( height_ )
        },
        origWidth  : origWidth,
        origHeight : origHeight,
        canShrink  : canShrink,
        canExpand  : canExpand,
        wPadding   : wPadding,
        hPadding   : hPadding,
        wrapSpace  : height_ - skin.outerHeight(true),
        skinSpace  : skin.height() - height
      });

      if (!iframe && current.autoHeight && height > minHeight && height < maxHeight && !canExpand) {
        inner.height('auto');
      }
    },

    _getPosition: function (onlyAbsolute) {
      var current  = F.current,
        viewport = F.getViewport(),
        margin   = current.margin,
        width    = F.wrap.width()  + margin[1] + margin[3],
        height   = F.wrap.height() + margin[0] + margin[2],
        rez      = {
          position: 'absolute',
          top  : margin[0],
          left : margin[3]
        };

      if (current.autoCenter && current.fixed && !onlyAbsolute && height <= viewport.h && width <= viewport.w) {
        rez.position = 'fixed';

      } else if (!current.locked) {
        rez.top  += viewport.y;
        rez.left += viewport.x;
      }

      rez.top  = getValue(Math.max(rez.top,  rez.top  + ((viewport.h - height) * current.topRatio)));
      rez.left = getValue(Math.max(rez.left, rez.left + ((viewport.w - width)  * current.leftRatio)));

      return rez;
    },

    _afterZoomIn: function () {
      var current = F.current;

      if (!current) {
        return;
      }

      F.isOpen = F.isOpened = true;

      F.wrap.css('overflow', 'visible').addClass('fancybox-opened');

      F.update();

      // Assign a click event
      if ( current.closeClick || (current.nextClick && F.group.length > 1) ) {
        F.inner.css('cursor', 'pointer').bind('click.fb', function(e) {
          if (!$(e.target).is('a') && !$(e.target).parent().is('a')) {
            e.preventDefault();

            F[ current.closeClick ? 'close' : 'next' ]();
          }
        });
      }

      // Create a close button
      if (current.closeBtn) {
        $(current.tpl.closeBtn).appendTo(F.wrap.parent()).bind('click.fb', function(e) {
          e.preventDefault();

          F.close();
        });
      }

      // Create navigation arrows
      if (current.arrows && F.group.length > 1) {
        if (current.loop || current.index > 0) {
          $(current.tpl.prev).appendTo(F.outer).bind('click.fb', F.prev);
        }

        if (current.loop || current.index < F.group.length - 1) {
          $(current.tpl.next).appendTo(F.outer).bind('click.fb', F.next);
        }
      }

      F.trigger('afterShow');

      // Stop the slideshow if this is the last item
      if (!current.loop && current.index === current.group.length - 1) {
        F.play( false );

      } else if (F.opts.autoPlay && !F.player.isActive) {
        F.opts.autoPlay = false;

        F.play();
      }
    },

    _afterZoomOut: function ( obj ) {
      obj = obj || F.current;

      $('.fancybox-wrap').trigger('onReset').remove();

      $.extend(F, {
        group  : {},
        opts   : {},
        router : false,
        current   : null,
        isActive  : false,
        isOpened  : false,
        isOpen    : false,
        isClosing : false,
        wrap   : null,
        skin   : null,
        outer  : null,
        inner  : null
      });

      F.trigger('afterClose', obj);
    }
  });

  /*
   *	Default transitions
   */

  F.transitions = {
    getOrigPosition: function () {
      var current  = F.current,
        element  = current.element,
        orig     = current.orig,
        pos      = {},
        width    = 50,
        height   = 50,
        hPadding = current.hPadding,
        wPadding = current.wPadding,
        viewport = F.getViewport();

      if (!orig && current.isDom && element.is(':visible')) {
        orig = element.find('img:first');

        if (!orig.length) {
          orig = element;
        }
      }

      if (isQuery(orig)) {
        pos = orig.offset();

        if (orig.is('img')) {
          width  = orig.outerWidth();
          height = orig.outerHeight();
        }

      } else {
        pos.top  = viewport.y + (viewport.h - height) * current.topRatio;
        pos.left = viewport.x + (viewport.w - width)  * current.leftRatio;
      }

      if (F.wrap.css('position') === 'fixed' || current.locked) {
        pos.top  -= viewport.y;
        pos.left -= viewport.x;
      }

      pos = {
        top     : getValue(pos.top  - hPadding * current.topRatio),
        left    : getValue(pos.left - wPadding * current.leftRatio),
        width   : getValue(width  + wPadding),
        height  : getValue(height + hPadding)
      };

      return pos;
    },

    step: function (now, fx) {
      var ratio,
        padding,
        value,
        prop       = fx.prop,
        current    = F.current,
        wrapSpace  = current.wrapSpace,
        skinSpace  = current.skinSpace;

      if (prop === 'width' || prop === 'height') {
        ratio = fx.end === fx.start ? 1 : (now - fx.start) / (fx.end - fx.start);

        if (F.isClosing) {
          ratio = 1 - ratio;
        }

        padding = prop === 'width' ? current.wPadding : current.hPadding;
        value   = now - padding;

        F.skin[ prop ](  getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) ) );
        F.inner[ prop ]( getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) - (skinSpace * ratio) ) );
      }
    },

    zoomIn: function () {
      var current  = F.current,
        startPos = current.pos,
        effect   = current.openEffect,
        elastic  = effect === 'elastic',
        endPos   = $.extend({opacity : 1}, startPos);

      // Remove "position" property that breaks older IE
      delete endPos.position;

      if (elastic) {
        startPos = this.getOrigPosition();

        if (current.openOpacity) {
          startPos.opacity = 0.1;
        }

      } else if (effect === 'fade') {
        startPos.opacity = 0.1;
      }

      F.wrap.css(startPos).animate(endPos, {
        duration : effect === 'none' ? 0 : current.openSpeed,
        easing   : current.openEasing,
        step     : elastic ? this.step : null,
        complete : F._afterZoomIn
      });
    },

    zoomOut: function () {
      var current  = F.current,
        effect   = current.closeEffect,
        elastic  = effect === 'elastic',
        endPos   = {opacity : 0.1};

      if (elastic) {
        endPos = this.getOrigPosition();

        if (current.closeOpacity) {
          endPos.opacity = 0.1;
        }
      }

      F.wrap.animate(endPos, {
        duration : effect === 'none' ? 0 : current.closeSpeed,
        easing   : current.closeEasing,
        step     : elastic ? this.step : null,
        complete : F._afterZoomOut
      });
    },

    changeIn: function () {
      var current   = F.current,
        effect    = current.nextEffect,
        startPos  = current.pos,
        endPos    = { opacity : 1 },
        direction = F.direction,
        distance  = 200,
        field;

      startPos.opacity = 0.1;

      if (effect === 'elastic') {
        field = direction === 'down' || direction === 'up' ? 'top' : 'left';

        if (direction === 'down' || direction === 'right') {
          startPos[ field ] = getValue(getScalar(startPos[ field ]) - distance);
          endPos[ field ]   = '+=' + distance + 'px';

        } else {
          startPos[ field ] = getValue(getScalar(startPos[ field ]) + distance);
          endPos[ field ]   = '-=' + distance + 'px';
        }
      }

      // Workaround for http://bugs.jquery.com/ticket/12273
      if (effect === 'none') {
        F._afterZoomIn();

      } else {
        F.wrap.css(startPos).animate(endPos, {
          duration : current.nextSpeed,
          easing   : current.nextEasing,
          complete : F._afterZoomIn
        });
      }
    },

    changeOut: function () {
      var previous  = F.previous,
        effect    = previous.prevEffect,
        endPos    = { opacity : 0.1 },
        direction = F.direction,
        distance  = 200;

      if (effect === 'elastic') {
        endPos[ direction === 'down' || direction === 'up' ? 'top' : 'left' ] = ( direction === 'up' || direction === 'left' ? '-' : '+' ) + '=' + distance + 'px';
      }

      previous.wrap.animate(endPos, {
        duration : effect === 'none' ? 0 : previous.prevSpeed,
        easing   : previous.prevEasing,
        complete : function () {
          $(this).trigger('onReset').remove();
        }
      });
    }
  };

  /*
   *	Overlay helper
   */

  F.helpers.overlay = {
    defaults : {
      closeClick : true,      // if true, fancyBox will be closed when user clicks on the overlay
      speedOut   : 200,       // duration of fadeOut animation
      showEarly  : true,      // indicates if should be opened immediately or wait until the content is ready
      css        : {},        // custom CSS properties
      locked     : !isTouch,  // if true, the content will be locked into overlay
      fixed      : true       // if false, the overlay CSS position property will not be set to "fixed"
    },

    overlay : null,      // current handle
    fixed   : false,     // indicates if the overlay has position "fixed"
    el      : $('html'), // element that contains "the lock"

    // Public methods
    create : function(opts) {
      opts = $.extend({}, this.defaults, opts);

      if (this.overlay) {
        this.close();
      }

      this.overlay = $('<div class="fancybox-overlay"></div>').appendTo( F.coming ? F.coming.parent : opts.parent );
      this.fixed   = false;

      if (opts.fixed && F.defaults.fixed) {
        this.overlay.addClass('fancybox-overlay-fixed');

        this.fixed = true;
      }
    },

    open : function(opts) {
      var that = this;

      opts = $.extend({}, this.defaults, opts);

      if (this.overlay) {
        this.overlay.unbind('.overlay').width('auto').height('auto');

      } else {
        this.create(opts);
      }

      if (!this.fixed) {
        W.bind('resize.overlay', $.proxy( this.update, this) );

        this.update();
      }

      if (opts.closeClick) {
        this.overlay.bind('click.overlay', function(e) {
          if ($(e.target).hasClass('fancybox-overlay')) {
            if (F.isActive) {
              F.close();
            } else {
              that.close();
            }

            return false;
          }
        });
      }

      this.overlay.css( opts.css ).show();
    },

    close : function() {
      var scrollV, scrollH;

      W.unbind('resize.overlay');

      if (this.el.hasClass('fancybox-lock')) {
        $('.fancybox-margin').removeClass('fancybox-margin');

        scrollV = W.scrollTop();
        scrollH = W.scrollLeft();

        this.el.removeClass('fancybox-lock');

        W.scrollTop( scrollV ).scrollLeft( scrollH );
      }

      $('.fancybox-overlay').remove().hide();

      $.extend(this, {
        overlay : null,
        fixed   : false
      });
    },

    // Private, callbacks

    update : function () {
      var width = '100%', offsetWidth;

      // Reset width/height so it will not mess
      this.overlay.width(width).height('100%');

      // jQuery does not return reliable result for IE
      if (IE) {
        offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);

        if (D.width() > offsetWidth) {
          width = D.width();
        }

      } else if (D.width() > W.width()) {
        width = D.width();
      }

      this.overlay.width(width).height(D.height());
    },

    // This is where we can manipulate DOM, because later it would cause iframes to reload
    onReady : function (opts, obj) {
      var overlay = this.overlay;

      $('.fancybox-overlay').stop(true, true);

      if (!overlay) {
        this.create(opts);
      }

      if (opts.locked && this.fixed && obj.fixed) {
        if (!overlay) {
          this.margin = D.height() > W.height() ? $('html').css('margin-right').replace("px", "") : false;
        }

        obj.locked = this.overlay.append( obj.wrap );
        obj.fixed  = false;
      }

      if (opts.showEarly === true) {
        this.beforeShow.apply(this, arguments);
      }
    },

    beforeShow : function(opts, obj) {
      var scrollV, scrollH;

      if (obj.locked) {
        if (this.margin !== false) {
          $('*').filter(function(){
            return ($(this).css('position') === 'fixed' && !$(this).hasClass("fancybox-overlay") && !$(this).hasClass("fancybox-wrap") );
          }).addClass('fancybox-margin');

          this.el.addClass('fancybox-margin');
        }

        scrollV = W.scrollTop();
        scrollH = W.scrollLeft();

        this.el.addClass('fancybox-lock');

        W.scrollTop( scrollV ).scrollLeft( scrollH );
      }

      this.open(opts);
    },

    onUpdate : function() {
      if (!this.fixed) {
        this.update();
      }
    },

    afterClose: function (opts) {
      // Remove overlay if exists and fancyBox is not opening
      // (e.g., it is not being open using afterClose callback)
      //if (this.overlay && !F.isActive) {
      if (this.overlay && !F.coming) {
        this.overlay.fadeOut(opts.speedOut, $.proxy( this.close, this ));
      }
    }
  };

  /*
   *	Title helper
   */

  F.helpers.title = {
    defaults : {
      type     : 'float', // 'float', 'inside', 'outside' or 'over',
      position : 'bottom' // 'top' or 'bottom'
    },

    beforeShow: function (opts) {
      var current = F.current,
        text    = current.title,
        type    = opts.type,
        title,
        target;

      if ($.isFunction(text)) {
        text = text.call(current.element, current);
      }

      if (!isString(text) || $.trim(text) === '') {
        return;
      }

      title = $('<div class="fancybox-title fancybox-title-' + type + '-wrap">' + text + '</div>');

      switch (type) {
        case 'inside':
          target = F.skin;
          break;

        case 'outside':
          target = F.wrap;
          break;

        case 'over':
          target = F.inner;
          break;

        default: // 'float'
          target = F.skin;

          title.appendTo('body');

          if (IE) {
            title.width( title.width() );
          }

          title.wrapInner('<span class="child"></span>');

          //Increase bottom margin so this title will also fit into viewport
          F.current.margin[2] += Math.abs( getScalar(title.css('margin-bottom')) );
          break;
      }

      title[ (opts.position === 'top' ? 'prependTo'  : 'appendTo') ](target);
    }
  };

  // jQuery plugin initialization
  $.fn.fancybox = function (options) {
    var index,
      that     = $(this),
      selector = this.selector || '',
      run      = function(e) {
        var what = $(this).blur(), idx = index, relType, relVal;

        if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) && !what.is('.fancybox-wrap')) {
          relType = options.groupAttr || 'data-fancybox-group';
          relVal  = what.attr(relType);

          if (!relVal) {
            relType = 'rel';
            relVal  = what.get(0)[ relType ];
          }

          if (relVal && relVal !== '' && relVal !== 'nofollow') {
            what = selector.length ? $(selector) : that;
            what = what.filter('[' + relType + '="' + relVal + '"]');
            idx  = what.index(this);
          }

          options.index = idx;

          // Stop an event from bubbling if everything is fine
          if (F.open(what, options) !== false) {
            e.preventDefault();
          }
        }
      };

    options = options || {};
    index   = options.index || 0;

    if (!selector || options.live === false) {
      that.unbind('click.fb-start').bind('click.fb-start', run);

    } else {
      D.undelegate(selector, 'click.fb-start').delegate(selector + ":not('.fancybox-item, .fancybox-nav')", 'click.fb-start', run);
    }

    this.filter('[data-fancybox-start=1]').trigger('click');

    return this;
  };

  // Tests that need a body at doc ready
  D.ready(function() {
    var w1, w2;

    if ( $.scrollbarWidth === undefined ) {
      // http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth
      $.scrollbarWidth = function() {
        var parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body'),
          child  = parent.children(),
          width  = child.innerWidth() - child.height( 99 ).innerWidth();

        parent.remove();

        return width;
      };
    }

    if ( $.support.fixedPosition === undefined ) {
      $.support.fixedPosition = (function() {
        var elem  = $('<div style="position:fixed;top:20px;"></div>').appendTo('body'),
          fixed = ( elem[0].offsetTop === 20 || elem[0].offsetTop === 15 );

        elem.remove();

        return fixed;
      }());
    }

    $.extend(F.defaults, {
      scrollbarWidth : $.scrollbarWidth(),
      fixed  : $.support.fixedPosition,
      parent : $('body')
    });

    //Get real width of page scroll-bar
    w1 = $(window).width();

    H.addClass('fancybox-lock-test');

    w2 = $(window).width();

    H.removeClass('fancybox-lock-test');

    $("<style type='text/css'>.fancybox-margin{margin-right:" + (w2 - w1) + "px;}</style>").appendTo("head");
  });

}(window, document, jQuery));

define("aws-blog/vendor/jquery.fancybox", function(){});

define('aws-blog/commenting',[
  'aws-blog/vendor/jquery.fancybox'
], function() {
  'use strict';

  var Commenting = {
    init: function(elem) {
      var $commentTrigger = $(elem);
      var sandboxAttr = $commentTrigger.data('sandbox-attr');
      var embedUrl = $commentTrigger.attr('href');
      var fancyboxConfig = {
        width: '100%',
        maxWidth: 600,
        height: '100%',
        margin: 44,
        arrows: false,
        autoSize: false,
        closeClick: false,
        openEffect: 'fade',
        closeEffect: 'fade',
        content: '<iframe style="width:100%; height:100%;" sandbox="' + sandboxAttr + '" src="' + embedUrl + '"></iframe>'
      };

      $commentTrigger.fancybox(fancyboxConfig);
    }
  };

  Libra.Comp.register({
    name: 'aws-blog:commenting',
    initFct: function(elem) {
      Commenting.init(elem);
    },
    initTime: 'immediate'
  });

  return Commenting;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseSlice',[], function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    start = start == null ? 0 : (+start || 0);
    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = (end === undefined || end > length) ? length : (+end || 0);
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  return baseSlice;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseProperty',[], function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  return baseProperty;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/getLength',['./baseProperty'], function(baseProperty) {

  /**
   * Gets the "length" property value of `object`.
   *
   * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
   * that affects Safari on at least iOS 8.1-8.3 ARM64.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {*} Returns the "length" value.
   */
  var getLength = baseProperty('length');

  return getLength;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/isLength',[], function() {

  /**
   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
   * of an array-like value.
   */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   */
  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  return isLength;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/isArrayLike',['./getLength', './isLength'], function(getLength, isLength) {

  /**
   * Checks if `value` is array-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   */
  function isArrayLike(value) {
    return value != null && isLength(getLength(value));
  }

  return isArrayLike;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/isIndex',[], function() {

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /**
   * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
   * of an array-like value.
   */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  return isIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/lang/isObject',[], function() {

  /**
   * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(1);
   * // => false
   */
  function isObject(value) {
    // Avoid a V8 JIT bug in Chrome 19-20.
    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  return isObject;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/isIterateeCall',['./isArrayLike', './isIndex', '../lang/isObject'], function(isArrayLike, isIndex, isObject) {

  /**
   * Checks if the provided arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)) {
      var other = object[index];
      return value === value ? (value === other) : (other !== other);
    }
    return false;
  }

  return isIterateeCall;
});

define('librastandardlib/vendor/lodash-amd/modern/array/chunk',['../internal/baseSlice', '../internal/isIterateeCall'], function(baseSlice, isIterateeCall) {

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCeil = Math.ceil,
      nativeFloor = Math.floor,
      nativeMax = Math.max;

  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `collection` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the new array containing chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */
  function chunk(array, size, guard) {
    if (guard ? isIterateeCall(array, size, guard) : size == null) {
      size = 1;
    } else {
      size = nativeMax(nativeFloor(size) || 1, 1);
    }
    var index = 0,
        length = array ? array.length : 0,
        resIndex = -1,
        result = Array(nativeCeil(length / size));

    while (index < length) {
      result[++resIndex] = baseSlice(array, index, (index += size));
    }
    return result;
  }

  return chunk;
});

define('librastandardlib/vendor/lodash-amd/modern/array/compact',[], function() {

  /**
   * Creates an array with all falsey values removed. The values `false`, `null`,
   * `0`, `""`, `undefined`, and `NaN` are falsey.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to compact.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value) {
        result[++resIndex] = value;
      }
    }
    return result;
  }

  return compact;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/indexOfNaN',[], function() {

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  return indexOfNaN;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseIndexOf',['./indexOfNaN'], function(indexOfNaN) {

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  return baseIndexOf;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/cacheIndexOf',['../lang/isObject'], function(isObject) {

  /**
   * Checks if `value` is in `cache` mimicking the return signature of
   * `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache to search.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var data = cache.data,
        result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

    return result ? 0 : -1;
  }

  return cacheIndexOf;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/cachePush',['../lang/isObject'], function(isObject) {

  /**
   * Adds `value` to the cache.
   *
   * @private
   * @name push
   * @memberOf SetCache
   * @param {*} value The value to cache.
   */
  function cachePush(value) {
    var data = this.data;
    if (typeof value == 'string' || isObject(value)) {
      data.set.add(value);
    } else {
      data.hash[value] = true;
    }
  }

  return cachePush;
});

define('librastandardlib/vendor/lodash-amd/modern/lang/isFunction',['./isObject'], function(isObject) {

  /** `Object#toString` result references. */
  var funcTag = '[object Function]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in older versions of Chrome and Safari which return 'function' for regexes
    // and Safari 8 which returns 'object' for typed array constructors.
    return isObject(value) && objToString.call(value) == funcTag;
  }

  return isFunction;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/isObjectLike',[], function() {

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  return isObjectLike;
});

define('librastandardlib/vendor/lodash-amd/modern/lang/isNative',['./isFunction', '../internal/isObjectLike'], function(isFunction, isObjectLike) {

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var fnToString = Function.prototype.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * Checks if `value` is a native function.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
   * @example
   *
   * _.isNative(Array.prototype.push);
   * // => true
   *
   * _.isNative(_);
   * // => false
   */
  function isNative(value) {
    if (value == null) {
      return false;
    }
    if (isFunction(value)) {
      return reIsNative.test(fnToString.call(value));
    }
    return isObjectLike(value) && reIsHostCtor.test(value);
  }

  return isNative;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/getNative',['../lang/isNative'], function(isNative) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = object == null ? undefined : object[key];
    return isNative(value) ? value : undefined;
  }

  return getNative;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/root',[], function() {

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  return root;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/SetCache',['./cachePush', './getNative', './root'], function(cachePush, getNative, root) {

  /** Native method references. */
  var Set = getNative(root, 'Set');

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCreate = getNative(Object, 'create');

  /**
   *
   * Creates a cache object to store unique values.
   *
   * @private
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var length = values ? values.length : 0;

    this.data = { 'hash': nativeCreate(null), 'set': new Set };
    while (length--) {
      this.push(values[length]);
    }
  }

  // Add functions to the `Set` cache.
  SetCache.prototype.push = cachePush;

  return SetCache;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/createCache',['./SetCache', './getNative', './root'], function(SetCache, getNative, root) {

  /** Native method references. */
  var Set = getNative(root, 'Set');

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeCreate = getNative(Object, 'create');

  /**
   * Creates a `Set` cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [values] The values to cache.
   * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
   */
  function createCache(values) {
    return (nativeCreate && Set) ? new SetCache(values) : null;
  }

  return createCache;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseDifference',['./baseIndexOf', './cacheIndexOf', './createCache'], function(baseIndexOf, cacheIndexOf, createCache) {

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of `_.difference` which accepts a single array
   * of values to exclude.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   */
  function baseDifference(array, values) {
    var length = array ? array.length : 0,
        result = [];

    if (!length) {
      return result;
    }
    var index = -1,
        indexOf = baseIndexOf,
        isCommon = true,
        cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
        valuesLength = values.length;

    if (cache) {
      indexOf = cacheIndexOf;
      isCommon = false;
      values = cache;
    }
    outer:
    while (++index < length) {
      var value = array[index];

      if (isCommon && value === value) {
        var valuesIndex = valuesLength;
        while (valuesIndex--) {
          if (values[valuesIndex] === value) {
            continue outer;
          }
        }
        result.push(value);
      }
      else if (indexOf(values, value, 0) < 0) {
        result.push(value);
      }
    }
    return result;
  }

  return baseDifference;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/arrayPush',[], function() {

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  return arrayPush;
});

define('librastandardlib/vendor/lodash-amd/modern/lang/isArguments',['../internal/isArrayLike', '../internal/isObjectLike'], function(isArrayLike, isObjectLike) {

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Native method references. */
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /**
   * Checks if `value` is classified as an `arguments` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    return isObjectLike(value) && isArrayLike(value) &&
      hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  }

  return isArguments;
});

define('librastandardlib/vendor/lodash-amd/modern/lang/isArray',['../internal/getNative', '../internal/isLength', '../internal/isObjectLike'], function(getNative, isLength, isObjectLike) {

  /** `Object#toString` result references. */
  var arrayTag = '[object Array]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeIsArray = getNative(Array, 'isArray');

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(function() { return arguments; }());
   * // => false
   */
  var isArray = nativeIsArray || function(value) {
    return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
  };

  return isArray;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseFlatten',['./arrayPush', '../lang/isArguments', '../lang/isArray', './isArrayLike', './isObjectLike'], function(arrayPush, isArguments, isArray, isArrayLike, isObjectLike) {

  /**
   * The base implementation of `_.flatten` with added support for restricting
   * flattening and specifying the start index.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {boolean} [isDeep] Specify a deep flatten.
   * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, isDeep, isStrict, result) {
    result || (result = []);

    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index];
      if (isObjectLike(value) && isArrayLike(value) &&
          (isStrict || isArray(value) || isArguments(value))) {
        if (isDeep) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, isDeep, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  return baseFlatten;
});

define('librastandardlib/vendor/lodash-amd/modern/function/restParam',[], function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Creates a function that invokes `func` with the `this` binding of the
   * created function and arguments from `start` and beyond provided as an array.
   *
   * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var say = _.restParam(function(what, names) {
   *   return what + ' ' + _.initial(names).join(', ') +
   *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
   * });
   *
   * say('hello', 'fred', 'barney', 'pebbles');
   * // => 'hello fred, barney, & pebbles'
   */
  function restParam(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          rest = Array(length);

      while (++index < length) {
        rest[index] = args[start + index];
      }
      switch (start) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, args[0], rest);
        case 2: return func.call(this, args[0], args[1], rest);
      }
      var otherArgs = Array(start + 1);
      index = -1;
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = rest;
      return func.apply(this, otherArgs);
    };
  }

  return restParam;
});

define('librastandardlib/vendor/lodash-amd/modern/array/difference',['../internal/baseDifference', '../internal/baseFlatten', '../internal/isArrayLike', '../internal/isObjectLike', '../function/restParam'], function(baseDifference, baseFlatten, isArrayLike, isObjectLike, restParam) {

  /**
   * Creates an array of unique `array` values not included in the other
   * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The arrays of values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.difference([1, 2, 3], [4, 2]);
   * // => [1, 3]
   */
  var difference = restParam(function(array, values) {
    return (isObjectLike(array) && isArrayLike(array))
      ? baseDifference(array, baseFlatten(values, false, true))
      : [];
  });

  return difference;
});

define('librastandardlib/vendor/lodash-amd/modern/array/drop',['../internal/baseSlice', '../internal/isIterateeCall'], function(baseSlice, isIterateeCall) {

  /**
   * Creates a slice of `array` with `n` elements dropped from the beginning.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to drop.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.drop([1, 2, 3]);
   * // => [2, 3]
   *
   * _.drop([1, 2, 3], 2);
   * // => [3]
   *
   * _.drop([1, 2, 3], 5);
   * // => []
   *
   * _.drop([1, 2, 3], 0);
   * // => [1, 2, 3]
   */
  function drop(array, n, guard) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (guard ? isIterateeCall(array, n, guard) : n == null) {
      n = 1;
    }
    return baseSlice(array, n < 0 ? 0 : n);
  }

  return drop;
});

define('librastandardlib/vendor/lodash-amd/modern/array/dropRight',['../internal/baseSlice', '../internal/isIterateeCall'], function(baseSlice, isIterateeCall) {

  /**
   * Creates a slice of `array` with `n` elements dropped from the end.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to drop.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.dropRight([1, 2, 3]);
   * // => [1, 2]
   *
   * _.dropRight([1, 2, 3], 2);
   * // => [1]
   *
   * _.dropRight([1, 2, 3], 5);
   * // => []
   *
   * _.dropRight([1, 2, 3], 0);
   * // => [1, 2, 3]
   */
  function dropRight(array, n, guard) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (guard ? isIterateeCall(array, n, guard) : n == null) {
      n = 1;
    }
    n = length - (+n || 0);
    return baseSlice(array, 0, n < 0 ? 0 : n);
  }

  return dropRight;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/arraySome',[], function() {

  /**
   * A specialized version of `_.some` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  return arraySome;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/equalArrays',['./arraySome'], function(arraySome) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing arrays.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var index = -1,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
      return false;
    }
    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index],
          result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

      if (result !== undefined) {
        if (result) {
          continue;
        }
        return false;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (isLoose) {
        if (!arraySome(other, function(othValue) {
              return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
            })) {
          return false;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
        return false;
      }
    }
    return true;
  }

  return equalArrays;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/equalByTag',[], function() {

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      stringTag = '[object String]';

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag) {
    switch (tag) {
      case boolTag:
      case dateTag:
        // Coerce dates and booleans to numbers, dates to milliseconds and booleans
        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
        return +object == +other;

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case numberTag:
        // Treat `NaN` vs. `NaN` as equal.
        return (object != +object)
          ? other != +other
          : object == +other;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings primitives and string
        // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
        return object == (other + '');
    }
    return false;
  }

  return equalByTag;
});

define('librastandardlib/vendor/lodash-amd/modern/object/keysIn',['../lang/isArguments', '../lang/isArray', '../internal/isIndex', '../internal/isLength', '../lang/isObject'], function(isArguments, isArray, isIndex, isLength, isObject) {

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    if (object == null) {
      return [];
    }
    if (!isObject(object)) {
      object = Object(object);
    }
    var length = object.length;
    length = (length && isLength(length) &&
      (isArray(object) || isArguments(object)) && length) || 0;

    var Ctor = object.constructor,
        index = -1,
        isProto = typeof Ctor == 'function' && Ctor.prototype === object,
        result = Array(length),
        skipIndexes = length > 0;

    while (++index < length) {
      result[index] = (index + '');
    }
    for (var key in object) {
      if (!(skipIndexes && isIndex(key, length)) &&
          !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  return keysIn;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/shimKeys',['../lang/isArguments', '../lang/isArray', './isIndex', './isLength', '../object/keysIn'], function(isArguments, isArray, isIndex, isLength, keysIn) {

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A fallback implementation of `Object.keys` which creates an array of the
   * own enumerable property names of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function shimKeys(object) {
    var props = keysIn(object),
        propsLength = props.length,
        length = propsLength && object.length;

    var allowIndexes = !!length && isLength(length) &&
      (isArray(object) || isArguments(object));

    var index = -1,
        result = [];

    while (++index < propsLength) {
      var key = props[index];
      if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
        result.push(key);
      }
    }
    return result;
  }

  return shimKeys;
});

define('librastandardlib/vendor/lodash-amd/modern/object/keys',['../internal/getNative', '../internal/isArrayLike', '../lang/isObject', '../internal/shimKeys'], function(getNative, isArrayLike, isObject, shimKeys) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeKeys = getNative(Object, 'keys');

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  var keys = !nativeKeys ? shimKeys : function(object) {
    var Ctor = object == null ? undefined : object.constructor;
    if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
        (typeof object != 'function' && isArrayLike(object))) {
      return shimKeys(object);
    }
    return isObject(object) ? nativeKeys(object) : [];
  };

  return keys;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/equalObjects',['../object/keys'], function(keys) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing values.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isLoose) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    var skipCtor = isLoose;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key],
          result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

      // Recursively compare objects (susceptible to call stack limits).
      if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
        return false;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (!skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        return false;
      }
    }
    return true;
  }

  return equalObjects;
});

define('librastandardlib/vendor/lodash-amd/modern/lang/isTypedArray',['../internal/isLength', '../internal/isObjectLike'], function(isLength, isObjectLike) {

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  function isTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
  }

  return isTypedArray;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseIsEqualDeep',['./equalArrays', './equalByTag', './equalObjects', '../lang/isArray', '../lang/isTypedArray'], function(equalArrays, equalByTag, equalObjects, isArray, isTypedArray) {

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';

  /** Used for native method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objToString = objectProto.toString;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparing objects.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA=[]] Tracks traversed `value` objects.
   * @param {Array} [stackB=[]] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = objToString.call(object);
      if (objTag == argsTag) {
        objTag = objectTag;
      } else if (objTag != objectTag) {
        objIsArr = isTypedArray(object);
      }
    }
    if (!othIsArr) {
      othTag = objToString.call(other);
      if (othTag == argsTag) {
        othTag = objectTag;
      } else if (othTag != objectTag) {
        othIsArr = isTypedArray(other);
      }
    }
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && !(objIsArr || objIsObj)) {
      return equalByTag(object, other, objTag);
    }
    if (!isLoose) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
      }
    }
    if (!isSameTag) {
      return false;
    }
    // Assume cyclic values are equal.
    // For more information on detecting circular references see https://es5.github.io/#JO.
    stackA || (stackA = []);
    stackB || (stackB = []);

    var length = stackA.length;
    while (length--) {
      if (stackA[length] == object) {
        return stackB[length] == other;
      }
    }
    // Add `object` and `other` to the stack of traversed objects.
    stackA.push(object);
    stackB.push(other);

    var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

    stackA.pop();
    stackB.pop();

    return result;
  }

  return baseIsEqualDeep;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseIsEqual',['./baseIsEqualDeep', '../lang/isObject', './isObjectLike'], function(baseIsEqualDeep, isObject, isObjectLike) {

  /**
   * The base implementation of `_.isEqual` without support for `this` binding
   * `customizer` functions.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {Function} [customizer] The function to customize comparing values.
   * @param {boolean} [isLoose] Specify performing partial comparisons.
   * @param {Array} [stackA] Tracks traversed `value` objects.
   * @param {Array} [stackB] Tracks traversed `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
  }

  return baseIsEqual;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/toObject',['../lang/isObject'], function(isObject) {

  /**
   * Converts `value` to an object if it's not one.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {Object} Returns the object.
   */
  function toObject(value) {
    return isObject(value) ? value : Object(value);
  }

  return toObject;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseIsMatch',['./baseIsEqual', './toObject'], function(baseIsEqual, toObject) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `_.isMatch` without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Array} matchData The propery names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparing objects.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = toObject(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var result = customizer ? customizer(objValue, srcValue, key) : undefined;
        if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
          return false;
        }
      }
    }
    return true;
  }

  return baseIsMatch;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/isStrictComparable',['../lang/isObject'], function(isObject) {

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  return isStrictComparable;
});

define('librastandardlib/vendor/lodash-amd/modern/object/pairs',['./keys', '../internal/toObject'], function(keys, toObject) {

  /**
   * Creates a two dimensional array of the key-value pairs for `object`,
   * e.g. `[[key1, value1], [key2, value2]]`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the new array of key-value pairs.
   * @example
   *
   * _.pairs({ 'barney': 36, 'fred': 40 });
   * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
   */
  function pairs(object) {
    object = toObject(object);

    var index = -1,
        props = keys(object),
        length = props.length,
        result = Array(length);

    while (++index < length) {
      var key = props[index];
      result[index] = [key, object[key]];
    }
    return result;
  }

  return pairs;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/getMatchData',['./isStrictComparable', '../object/pairs'], function(isStrictComparable, pairs) {

  /**
   * Gets the propery names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = pairs(object),
        length = result.length;

    while (length--) {
      result[length][2] = isStrictComparable(result[length][1]);
    }
    return result;
  }

  return getMatchData;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseMatches',['./baseIsMatch', './getMatchData', './toObject'], function(baseIsMatch, getMatchData, toObject) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `_.matches` which does not clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new function.
   */
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      var key = matchData[0][0],
          value = matchData[0][1];

      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === value && (value !== undefined || (key in toObject(object)));
      };
    }
    return function(object) {
      return baseIsMatch(object, matchData);
    };
  }

  return baseMatches;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseGet',['./toObject'], function(toObject) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `get` without support for string paths
   * and default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path of the property to get.
   * @param {string} [pathKey] The key representation of path.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path, pathKey) {
    if (object == null) {
      return;
    }
    if (pathKey !== undefined && pathKey in toObject(object)) {
      path = [pathKey];
    }
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[path[index++]];
    }
    return (index && index == length) ? object : undefined;
  }

  return baseGet;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/isKey',['../lang/isArray', './toObject'], function(isArray, toObject) {

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    var type = typeof value;
    if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
      return true;
    }
    if (isArray(value)) {
      return false;
    }
    var result = !reIsDeepProp.test(value);
    return result || (object != null && value in toObject(object));
  }

  return isKey;
});

define('librastandardlib/vendor/lodash-amd/modern/array/last',[], function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last(array) {
    var length = array ? array.length : 0;
    return length ? array[length - 1] : undefined;
  }

  return last;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseToString',[], function() {

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  return baseToString;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/toPath',['./baseToString', '../lang/isArray'], function(baseToString, isArray) {

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `value` to property path array if it's not one.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {Array} Returns the property path array.
   */
  function toPath(value) {
    if (isArray(value)) {
      return value;
    }
    var result = [];
    baseToString(value).replace(rePropName, function(match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  }

  return toPath;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseMatchesProperty',['./baseGet', './baseIsEqual', './baseSlice', '../lang/isArray', './isKey', './isStrictComparable', '../array/last', './toObject', './toPath'], function(baseGet, baseIsEqual, baseSlice, isArray, isKey, isStrictComparable, last, toObject, toPath) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to compare.
   * @returns {Function} Returns the new function.
   */
  function baseMatchesProperty(path, srcValue) {
    var isArr = isArray(path),
        isCommon = isKey(path) && isStrictComparable(srcValue),
        pathKey = (path + '');

    path = toPath(path);
    return function(object) {
      if (object == null) {
        return false;
      }
      var key = pathKey;
      object = toObject(object);
      if ((isArr || !isCommon) && !(key in object)) {
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        key = last(path);
        object = toObject(object);
      }
      return object[key] === srcValue
        ? (srcValue !== undefined || (key in object))
        : baseIsEqual(srcValue, object[key], undefined, true);
    };
  }

  return baseMatchesProperty;
});

define('librastandardlib/vendor/lodash-amd/modern/utility/identity',[], function() {

  /**
   * This method returns the first argument provided to it.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'user': 'fred' };
   *
   * _.identity(object) === object;
   * // => true
   */
  function identity(value) {
    return value;
  }

  return identity;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/bindCallback',['../utility/identity'], function(identity) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * A specialized version of `baseCallback` which only supports `this` binding
   * and specifying the number of arguments to provide to `func`.
   *
   * @private
   * @param {Function} func The function to bind.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {number} [argCount] The number of arguments to provide to `func`.
   * @returns {Function} Returns the callback.
   */
  function bindCallback(func, thisArg, argCount) {
    if (typeof func != 'function') {
      return identity;
    }
    if (thisArg === undefined) {
      return func;
    }
    switch (argCount) {
      case 1: return function(value) {
        return func.call(thisArg, value);
      };
      case 3: return function(value, index, collection) {
        return func.call(thisArg, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(thisArg, accumulator, value, index, collection);
      };
      case 5: return function(value, other, key, object, source) {
        return func.call(thisArg, value, other, key, object, source);
      };
    }
    return function() {
      return func.apply(thisArg, arguments);
    };
  }

  return bindCallback;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/basePropertyDeep',['./baseGet', './toPath'], function(baseGet, toPath) {

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new function.
   */
  function basePropertyDeep(path) {
    var pathKey = (path + '');
    path = toPath(path);
    return function(object) {
      return baseGet(object, path, pathKey);
    };
  }

  return basePropertyDeep;
});

define('librastandardlib/vendor/lodash-amd/modern/utility/property',['../internal/baseProperty', '../internal/basePropertyDeep', '../internal/isKey'], function(baseProperty, basePropertyDeep, isKey) {

  /**
   * Creates a function that returns the property value at `path` on a
   * given object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': { 'c': 2 } } },
   *   { 'a': { 'b': { 'c': 1 } } }
   * ];
   *
   * _.map(objects, _.property('a.b.c'));
   * // => [2, 1]
   *
   * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
   * // => [1, 2]
   */
  function property(path) {
    return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
  }

  return property;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseCallback',['./baseMatches', './baseMatchesProperty', './bindCallback', '../utility/identity', '../utility/property'], function(baseMatches, baseMatchesProperty, bindCallback, identity, property) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `_.callback` which supports specifying the
   * number of arguments to provide to `func`.
   *
   * @private
   * @param {*} [func=_.identity] The value to convert to a callback.
   * @param {*} [thisArg] The `this` binding of `func`.
   * @param {number} [argCount] The number of arguments to provide to `func`.
   * @returns {Function} Returns the callback.
   */
  function baseCallback(func, thisArg, argCount) {
    var type = typeof func;
    if (type == 'function') {
      return thisArg === undefined
        ? func
        : bindCallback(func, thisArg, argCount);
    }
    if (func == null) {
      return identity;
    }
    if (type == 'object') {
      return baseMatches(func);
    }
    return thisArg === undefined
      ? property(func)
      : baseMatchesProperty(func, thisArg);
  }

  return baseCallback;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseWhile',['./baseSlice'], function(baseSlice) {

  /**
   * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
   * and `_.takeWhile` without support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to query.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseWhile(array, predicate, isDrop, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
    return isDrop
      ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
      : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
  }

  return baseWhile;
});

define('librastandardlib/vendor/lodash-amd/modern/array/dropRightWhile',['../internal/baseCallback', '../internal/baseWhile'], function(baseCallback, baseWhile) {

  /**
   * Creates a slice of `array` excluding elements dropped from the end.
   * Elements are dropped until `predicate` returns falsey. The predicate is
   * bound to `thisArg` and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that match the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.dropRightWhile([1, 2, 3], function(n) {
   *   return n > 1;
   * });
   * // => [1]
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
   * // => ['barney', 'fred']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
   * // => ['barney']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.dropRightWhile(users, 'active'), 'user');
   * // => ['barney', 'fred', 'pebbles']
   */
  function dropRightWhile(array, predicate, thisArg) {
    return (array && array.length)
      ? baseWhile(array, baseCallback(predicate, thisArg, 3), true, true)
      : [];
  }

  return dropRightWhile;
});

define('librastandardlib/vendor/lodash-amd/modern/array/dropWhile',['../internal/baseCallback', '../internal/baseWhile'], function(baseCallback, baseWhile) {

  /**
   * Creates a slice of `array` excluding elements dropped from the beginning.
   * Elements are dropped until `predicate` returns falsey. The predicate is
   * bound to `thisArg` and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.dropWhile([1, 2, 3], function(n) {
   *   return n < 3;
   * });
   * // => [3]
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
   * // => ['fred', 'pebbles']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.dropWhile(users, 'active', false), 'user');
   * // => ['pebbles']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.dropWhile(users, 'active'), 'user');
   * // => ['barney', 'fred', 'pebbles']
   */
  function dropWhile(array, predicate, thisArg) {
    return (array && array.length)
      ? baseWhile(array, baseCallback(predicate, thisArg, 3), true)
      : [];
  }

  return dropWhile;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseFill',[], function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `_.fill` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to fill.
   * @param {*} value The value to fill `array` with.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns `array`.
   */
  function baseFill(array, value, start, end) {
    var length = array.length;

    start = start == null ? 0 : (+start || 0);
    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = (end === undefined || end > length) ? length : (+end || 0);
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : (end >>> 0);
    start >>>= 0;

    while (start < length) {
      array[start++] = value;
    }
    return array;
  }

  return baseFill;
});

define('librastandardlib/vendor/lodash-amd/modern/array/fill',['../internal/baseFill', '../internal/isIterateeCall'], function(baseFill, isIterateeCall) {

  /**
   * Fills elements of `array` with `value` from `start` up to, but not
   * including, `end`.
   *
   * **Note:** This method mutates `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to fill.
   * @param {*} value The value to fill `array` with.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [1, 2, 3];
   *
   * _.fill(array, 'a');
   * console.log(array);
   * // => ['a', 'a', 'a']
   *
   * _.fill(Array(3), 2);
   * // => [2, 2, 2]
   *
   * _.fill([4, 6, 8], '*', 1, 2);
   * // => [4, '*', 8]
   */
  function fill(array, value, start, end) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
      start = 0;
      end = length;
    }
    return baseFill(array, value, start, end);
  }

  return fill;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseFindIndex',[], function() {

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  return baseFindIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/createFindIndex',['./baseCallback', './baseFindIndex'], function(baseCallback, baseFindIndex) {

  /**
   * Creates a `_.findIndex` or `_.findLastIndex` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new find function.
   */
  function createFindIndex(fromRight) {
    return function(array, predicate, thisArg) {
      if (!(array && array.length)) {
        return -1;
      }
      predicate = baseCallback(predicate, thisArg, 3);
      return baseFindIndex(array, predicate, fromRight);
    };
  }

  return createFindIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/array/findIndex',['../internal/createFindIndex'], function(createFindIndex) {

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(chr) {
   *   return chr.user == 'barney';
   * });
   * // => 0
   *
   * // using the `_.matches` callback shorthand
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.findIndex(users, 'active', false);
   * // => 0
   *
   * // using the `_.property` callback shorthand
   * _.findIndex(users, 'active');
   * // => 2
   */
  var findIndex = createFindIndex();

  return findIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/array/findLastIndex',['../internal/createFindIndex'], function(createFindIndex) {

  /**
   * This method is like `_.findIndex` except that it iterates over elements
   * of `collection` from right to left.
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * _.findLastIndex(users, function(chr) {
   *   return chr.user == 'pebbles';
   * });
   * // => 2
   *
   * // using the `_.matches` callback shorthand
   * _.findLastIndex(users, { 'user': 'barney', 'active': true });
   * // => 0
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.findLastIndex(users, 'active', false);
   * // => 2
   *
   * // using the `_.property` callback shorthand
   * _.findLastIndex(users, 'active');
   * // => 0
   */
  var findLastIndex = createFindIndex(true);

  return findLastIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/array/first',[], function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * Gets the first element of `array`.
   *
   * @static
   * @memberOf _
   * @alias head
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the first element of `array`.
   * @example
   *
   * _.first([1, 2, 3]);
   * // => 1
   *
   * _.first([]);
   * // => undefined
   */
  function first(array) {
    return array ? array[0] : undefined;
  }

  return first;
});

define('librastandardlib/vendor/lodash-amd/modern/array/flatten',['../internal/baseFlatten', '../internal/isIterateeCall'], function(baseFlatten, isIterateeCall) {

  /**
   * Flattens a nested array. If `isDeep` is `true` the array is recursively
   * flattened, otherwise it's only flattened a single level.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to flatten.
   * @param {boolean} [isDeep] Specify a deep flatten.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, 3, [4]]]);
   * // => [1, 2, 3, [4]]
   *
   * // using `isDeep`
   * _.flatten([1, [2, 3, [4]]], true);
   * // => [1, 2, 3, 4]
   */
  function flatten(array, isDeep, guard) {
    var length = array ? array.length : 0;
    if (guard && isIterateeCall(array, isDeep, guard)) {
      isDeep = false;
    }
    return length ? baseFlatten(array, isDeep) : [];
  }

  return flatten;
});

define('librastandardlib/vendor/lodash-amd/modern/array/flattenDeep',['../internal/baseFlatten'], function(baseFlatten) {

  /**
   * Recursively flattens a nested array.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to recursively flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flattenDeep([1, [2, 3, [4]]]);
   * // => [1, 2, 3, 4]
   */
  function flattenDeep(array) {
    var length = array ? array.length : 0;
    return length ? baseFlatten(array, true) : [];
  }

  return flattenDeep;
});

define('librastandardlib/vendor/lodash-amd/modern/array/head',["./first"], function(first) {
  return first;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/binaryIndexBy',[], function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeFloor = Math.floor,
      nativeMin = Math.min;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;

  /**
   * This function is like `binaryIndex` except that it invokes `iteratee` for
   * `value` and each element of `array` to compute their sort ranking. The
   * iteratee is invoked with one argument; (value).
   *
   * @private
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {boolean} [retHighest] Specify returning the highest qualified index.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   */
  function binaryIndexBy(array, value, iteratee, retHighest) {
    value = iteratee(value);

    var low = 0,
        high = array ? array.length : 0,
        valIsNaN = value !== value,
        valIsNull = value === null,
        valIsUndef = value === undefined;

    while (low < high) {
      var mid = nativeFloor((low + high) / 2),
          computed = iteratee(array[mid]),
          isDef = computed !== undefined,
          isReflexive = computed === computed;

      if (valIsNaN) {
        var setLow = isReflexive || retHighest;
      } else if (valIsNull) {
        setLow = isReflexive && isDef && (retHighest || computed != null);
      } else if (valIsUndef) {
        setLow = isReflexive && (retHighest || isDef);
      } else if (computed == null) {
        setLow = false;
      } else {
        setLow = retHighest ? (computed <= value) : (computed < value);
      }
      if (setLow) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return nativeMin(high, MAX_ARRAY_INDEX);
  }

  return binaryIndexBy;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/binaryIndex',['./binaryIndexBy', '../utility/identity'], function(binaryIndexBy, identity) {

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /**
   * Performs a binary search of `array` to determine the index at which `value`
   * should be inserted into `array` in order to maintain its sort order.
   *
   * @private
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {boolean} [retHighest] Specify returning the highest qualified index.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   */
  function binaryIndex(array, value, retHighest) {
    var low = 0,
        high = array ? array.length : low;

    if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
      while (low < high) {
        var mid = (low + high) >>> 1,
            computed = array[mid];

        if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return high;
    }
    return binaryIndexBy(array, value, identity, retHighest);
  }

  return binaryIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/array/indexOf',['../internal/baseIndexOf', '../internal/binaryIndex'], function(baseIndexOf, binaryIndex) {

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * Gets the index at which the first occurrence of `value` is found in `array`
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons. If `fromIndex` is negative, it's used as the offset
   * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
   * performs a faster binary search.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {boolean|number} [fromIndex=0] The index to search from or `true`
   *  to perform a binary search on a sorted array.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.indexOf([1, 2, 1, 2], 2);
   * // => 1
   *
   * // using `fromIndex`
   * _.indexOf([1, 2, 1, 2], 2, 2);
   * // => 3
   *
   * // performing a binary search
   * _.indexOf([1, 1, 2, 2], 2, true);
   * // => 2
   */
  function indexOf(array, value, fromIndex) {
    var length = array ? array.length : 0;
    if (!length) {
      return -1;
    }
    if (typeof fromIndex == 'number') {
      fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
    } else if (fromIndex) {
      var index = binaryIndex(array, value);
      if (index < length &&
          (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
        return index;
      }
      return -1;
    }
    return baseIndexOf(array, value, fromIndex || 0);
  }

  return indexOf;
});

define('librastandardlib/vendor/lodash-amd/modern/array/initial',['./dropRight'], function(dropRight) {

  /**
   * Gets all but the last element of `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.initial([1, 2, 3]);
   * // => [1, 2]
   */
  function initial(array) {
    return dropRight(array, 1);
  }

  return initial;
});

define('librastandardlib/vendor/lodash-amd/modern/array/intersection',['../internal/baseIndexOf', '../internal/cacheIndexOf', '../internal/createCache', '../internal/isArrayLike', '../function/restParam'], function(baseIndexOf, cacheIndexOf, createCache, isArrayLike, restParam) {

  /**
   * Creates an array of unique values that are included in all of the provided
   * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of shared values.
   * @example
   * _.intersection([1, 2], [4, 2], [2, 1]);
   * // => [2]
   */
  var intersection = restParam(function(arrays) {
    var othLength = arrays.length,
        othIndex = othLength,
        caches = Array(length),
        indexOf = baseIndexOf,
        isCommon = true,
        result = [];

    while (othIndex--) {
      var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
      caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
    }
    var array = arrays[0],
        index = -1,
        length = array ? array.length : 0,
        seen = caches[0];

    outer:
    while (++index < length) {
      value = array[index];
      if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
        var othIndex = othLength;
        while (--othIndex) {
          var cache = caches[othIndex];
          if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
            continue outer;
          }
        }
        if (seen) {
          seen.push(value);
        }
        result.push(value);
      }
    }
    return result;
  });

  return intersection;
});

define('librastandardlib/vendor/lodash-amd/modern/array/lastIndexOf',['../internal/binaryIndex', '../internal/indexOfNaN'], function(binaryIndex, indexOfNaN) {

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * This method is like `_.indexOf` except that it iterates over elements of
   * `array` from right to left.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {boolean|number} [fromIndex=array.length-1] The index to search from
   *  or `true` to perform a binary search on a sorted array.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.lastIndexOf([1, 2, 1, 2], 2);
   * // => 3
   *
   * // using `fromIndex`
   * _.lastIndexOf([1, 2, 1, 2], 2, 2);
   * // => 1
   *
   * // performing a binary search
   * _.lastIndexOf([1, 1, 2, 2], 2, true);
   * // => 3
   */
  function lastIndexOf(array, value, fromIndex) {
    var length = array ? array.length : 0;
    if (!length) {
      return -1;
    }
    var index = length;
    if (typeof fromIndex == 'number') {
      index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
    } else if (fromIndex) {
      index = binaryIndex(array, value, true) - 1;
      var other = array[index];
      if (value === value ? (value === other) : (other !== other)) {
        return index;
      }
      return -1;
    }
    if (value !== value) {
      return indexOfNaN(array, index, true);
    }
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  return lastIndexOf;
});

define('librastandardlib/vendor/lodash-amd/modern/array/zipObject',['../lang/isArray'], function(isArray) {

  /**
   * The inverse of `_.pairs`; this method returns an object composed from arrays
   * of property names and values. Provide either a single two dimensional array,
   * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
   * and one of corresponding values.
   *
   * @static
   * @memberOf _
   * @alias object
   * @category Array
   * @param {Array} props The property names.
   * @param {Array} [values=[]] The property values.
   * @returns {Object} Returns the new object.
   * @example
   *
   * _.zipObject([['fred', 30], ['barney', 40]]);
   * // => { 'fred': 30, 'barney': 40 }
   *
   * _.zipObject(['fred', 'barney'], [30, 40]);
   * // => { 'fred': 30, 'barney': 40 }
   */
  function zipObject(props, values) {
    var index = -1,
        length = props ? props.length : 0,
        result = {};

    if (length && !values && !isArray(props[0])) {
      values = [];
    }
    while (++index < length) {
      var key = props[index];
      if (values) {
        result[key] = values[index];
      } else if (key) {
        result[key[0]] = key[1];
      }
    }
    return result;
  }

  return zipObject;
});

define('librastandardlib/vendor/lodash-amd/modern/array/object',["./zipObject"], function(zipObject) {
  return zipObject;
});

define('librastandardlib/vendor/lodash-amd/modern/array/pull',['../internal/baseIndexOf'], function(baseIndexOf) {

  /** Used for native method references. */
  var arrayProto = Array.prototype;

  /** Native method references. */
  var splice = arrayProto.splice;

  /**
   * Removes all provided values from `array` using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * **Note:** Unlike `_.without`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to modify.
   * @param {...*} [values] The values to remove.
   * @returns {Array} Returns `array`.
   * @example
   *
   * var array = [1, 2, 3, 1, 2, 3];
   *
   * _.pull(array, 2, 3);
   * console.log(array);
   * // => [1, 1]
   */
  function pull() {
    var args = arguments,
        array = args[0];

    if (!(array && array.length)) {
      return array;
    }
    var index = 0,
        indexOf = baseIndexOf,
        length = args.length;

    while (++index < length) {
      var fromIndex = 0,
          value = args[index];

      while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
        splice.call(array, fromIndex, 1);
      }
    }
    return array;
  }

  return pull;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseAt',['./isArrayLike', './isIndex'], function(isArrayLike, isIndex) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `_.at` without support for string collections
   * and individual key arguments.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {number[]|string[]} props The property names or indexes of elements to pick.
   * @returns {Array} Returns the new array of picked elements.
   */
  function baseAt(collection, props) {
    var index = -1,
        isNil = collection == null,
        isArr = !isNil && isArrayLike(collection),
        length = isArr ? collection.length : 0,
        propsLength = props.length,
        result = Array(propsLength);

    while(++index < propsLength) {
      var key = props[index];
      if (isArr) {
        result[index] = isIndex(key, length) ? collection[key] : undefined;
      } else {
        result[index] = isNil ? undefined : collection[key];
      }
    }
    return result;
  }

  return baseAt;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseCompareAscending',[], function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  return baseCompareAscending;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/basePullAt',['./isIndex'], function(isIndex) {

  /** Used for native method references. */
  var arrayProto = Array.prototype;

  /** Native method references. */
  var splice = arrayProto.splice;

  /**
   * The base implementation of `_.pullAt` without support for individual
   * index arguments and capturing the removed elements.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {number[]} indexes The indexes of elements to remove.
   * @returns {Array} Returns `array`.
   */
  function basePullAt(array, indexes) {
    var length = array ? indexes.length : 0;
    while (length--) {
      var index = indexes[length];
      if (index != previous && isIndex(index)) {
        var previous = index;
        splice.call(array, index, 1);
      }
    }
    return array;
  }

  return basePullAt;
});

define('librastandardlib/vendor/lodash-amd/modern/array/pullAt',['../internal/baseAt', '../internal/baseCompareAscending', '../internal/baseFlatten', '../internal/basePullAt', '../function/restParam'], function(baseAt, baseCompareAscending, baseFlatten, basePullAt, restParam) {

  /**
   * Removes elements from `array` corresponding to the given indexes and returns
   * an array of the removed elements. Indexes may be specified as an array of
   * indexes or as individual arguments.
   *
   * **Note:** Unlike `_.at`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to modify.
   * @param {...(number|number[])} [indexes] The indexes of elements to remove,
   *  specified as individual indexes or arrays of indexes.
   * @returns {Array} Returns the new array of removed elements.
   * @example
   *
   * var array = [5, 10, 15, 20];
   * var evens = _.pullAt(array, 1, 3);
   *
   * console.log(array);
   * // => [5, 15]
   *
   * console.log(evens);
   * // => [10, 20]
   */
  var pullAt = restParam(function(array, indexes) {
    indexes = baseFlatten(indexes);

    var result = baseAt(array, indexes);
    basePullAt(array, indexes.sort(baseCompareAscending));
    return result;
  });

  return pullAt;
});

define('librastandardlib/vendor/lodash-amd/modern/array/remove',['../internal/baseCallback', '../internal/basePullAt'], function(baseCallback, basePullAt) {

  /**
   * Removes all elements from `array` that `predicate` returns truthy for
   * and returns an array of the removed elements. The predicate is bound to
   * `thisArg` and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * **Note:** Unlike `_.filter`, this method mutates `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to modify.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the new array of removed elements.
   * @example
   *
   * var array = [1, 2, 3, 4];
   * var evens = _.remove(array, function(n) {
   *   return n % 2 == 0;
   * });
   *
   * console.log(array);
   * // => [1, 3]
   *
   * console.log(evens);
   * // => [2, 4]
   */
  function remove(array, predicate, thisArg) {
    var result = [];
    if (!(array && array.length)) {
      return result;
    }
    var index = -1,
        indexes = [],
        length = array.length;

    predicate = baseCallback(predicate, thisArg, 3);
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result.push(value);
        indexes.push(index);
      }
    }
    basePullAt(array, indexes);
    return result;
  }

  return remove;
});

define('librastandardlib/vendor/lodash-amd/modern/array/rest',['./drop'], function(drop) {

  /**
   * Gets all but the first element of `array`.
   *
   * @static
   * @memberOf _
   * @alias tail
   * @category Array
   * @param {Array} array The array to query.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.rest([1, 2, 3]);
   * // => [2, 3]
   */
  function rest(array) {
    return drop(array, 1);
  }

  return rest;
});

define('librastandardlib/vendor/lodash-amd/modern/array/slice',['../internal/baseSlice', '../internal/isIterateeCall'], function(baseSlice, isIterateeCall) {

  /**
   * Creates a slice of `array` from `start` up to, but not including, `end`.
   *
   * **Note:** This method is used instead of `Array#slice` to support node
   * lists in IE < 9 and to ensure dense arrays are returned.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function slice(array, start, end) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
      start = 0;
      end = length;
    }
    return baseSlice(array, start, end);
  }

  return slice;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/createSortedIndex',['./baseCallback', './binaryIndex', './binaryIndexBy'], function(baseCallback, binaryIndex, binaryIndexBy) {

  /**
   * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
   *
   * @private
   * @param {boolean} [retHighest] Specify returning the highest qualified index.
   * @returns {Function} Returns the new index function.
   */
  function createSortedIndex(retHighest) {
    return function(array, value, iteratee, thisArg) {
      return iteratee == null
        ? binaryIndex(array, value, retHighest)
        : binaryIndexBy(array, value, baseCallback(iteratee, thisArg, 1), retHighest);
    };
  }

  return createSortedIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/array/sortedIndex',['../internal/createSortedIndex'], function(createSortedIndex) {

  /**
   * Uses a binary search to determine the lowest index at which `value` should
   * be inserted into `array` in order to maintain its sort order. If an iteratee
   * function is provided it's invoked for `value` and each element of `array`
   * to compute their sort ranking. The iteratee is bound to `thisArg` and
   * invoked with one argument; (value).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   * @example
   *
   * _.sortedIndex([30, 50], 40);
   * // => 1
   *
   * _.sortedIndex([4, 4, 5, 5], 5);
   * // => 2
   *
   * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
   *
   * // using an iteratee function
   * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
   *   return this.data[word];
   * }, dict);
   * // => 1
   *
   * // using the `_.property` callback shorthand
   * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
   * // => 1
   */
  var sortedIndex = createSortedIndex();

  return sortedIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/array/sortedLastIndex',['../internal/createSortedIndex'], function(createSortedIndex) {

  /**
   * This method is like `_.sortedIndex` except that it returns the highest
   * index at which `value` should be inserted into `array` in order to
   * maintain its sort order.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The sorted array to inspect.
   * @param {*} value The value to evaluate.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {number} Returns the index at which `value` should be inserted
   *  into `array`.
   * @example
   *
   * _.sortedLastIndex([4, 4, 5, 5], 5);
   * // => 4
   */
  var sortedLastIndex = createSortedIndex(true);

  return sortedLastIndex;
});

define('librastandardlib/vendor/lodash-amd/modern/array/tail',["./rest"], function(rest) {
  return rest;
});

define('librastandardlib/vendor/lodash-amd/modern/array/take',['../internal/baseSlice', '../internal/isIterateeCall'], function(baseSlice, isIterateeCall) {

  /**
   * Creates a slice of `array` with `n` elements taken from the beginning.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to take.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.take([1, 2, 3]);
   * // => [1]
   *
   * _.take([1, 2, 3], 2);
   * // => [1, 2]
   *
   * _.take([1, 2, 3], 5);
   * // => [1, 2, 3]
   *
   * _.take([1, 2, 3], 0);
   * // => []
   */
  function take(array, n, guard) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (guard ? isIterateeCall(array, n, guard) : n == null) {
      n = 1;
    }
    return baseSlice(array, 0, n < 0 ? 0 : n);
  }

  return take;
});

define('librastandardlib/vendor/lodash-amd/modern/array/takeRight',['../internal/baseSlice', '../internal/isIterateeCall'], function(baseSlice, isIterateeCall) {

  /**
   * Creates a slice of `array` with `n` elements taken from the end.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {number} [n=1] The number of elements to take.
   * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.takeRight([1, 2, 3]);
   * // => [3]
   *
   * _.takeRight([1, 2, 3], 2);
   * // => [2, 3]
   *
   * _.takeRight([1, 2, 3], 5);
   * // => [1, 2, 3]
   *
   * _.takeRight([1, 2, 3], 0);
   * // => []
   */
  function takeRight(array, n, guard) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (guard ? isIterateeCall(array, n, guard) : n == null) {
      n = 1;
    }
    n = length - (+n || 0);
    return baseSlice(array, n < 0 ? 0 : n);
  }

  return takeRight;
});

define('librastandardlib/vendor/lodash-amd/modern/array/takeRightWhile',['../internal/baseCallback', '../internal/baseWhile'], function(baseCallback, baseWhile) {

  /**
   * Creates a slice of `array` with elements taken from the end. Elements are
   * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
   * and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.takeRightWhile([1, 2, 3], function(n) {
   *   return n > 1;
   * });
   * // => [2, 3]
   *
   * var users = [
   *   { 'user': 'barney',  'active': true },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': false }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
   * // => ['pebbles']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
   * // => ['fred', 'pebbles']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.takeRightWhile(users, 'active'), 'user');
   * // => []
   */
  function takeRightWhile(array, predicate, thisArg) {
    return (array && array.length)
      ? baseWhile(array, baseCallback(predicate, thisArg, 3), false, true)
      : [];
  }

  return takeRightWhile;
});

define('librastandardlib/vendor/lodash-amd/modern/array/takeWhile',['../internal/baseCallback', '../internal/baseWhile'], function(baseCallback, baseWhile) {

  /**
   * Creates a slice of `array` with elements taken from the beginning. Elements
   * are taken until `predicate` returns falsey. The predicate is bound to
   * `thisArg` and invoked with three arguments: (value, index, array).
   *
   * If a property name is provided for `predicate` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `predicate` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked
   *  per iteration.
   * @param {*} [thisArg] The `this` binding of `predicate`.
   * @returns {Array} Returns the slice of `array`.
   * @example
   *
   * _.takeWhile([1, 2, 3], function(n) {
   *   return n < 3;
   * });
   * // => [1, 2]
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false},
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * // using the `_.matches` callback shorthand
   * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
   * // => ['barney']
   *
   * // using the `_.matchesProperty` callback shorthand
   * _.pluck(_.takeWhile(users, 'active', false), 'user');
   * // => ['barney', 'fred']
   *
   * // using the `_.property` callback shorthand
   * _.pluck(_.takeWhile(users, 'active'), 'user');
   * // => []
   */
  function takeWhile(array, predicate, thisArg) {
    return (array && array.length)
      ? baseWhile(array, baseCallback(predicate, thisArg, 3))
      : [];
  }

  return takeWhile;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/baseUniq',['./baseIndexOf', './cacheIndexOf', './createCache'], function(baseIndexOf, cacheIndexOf, createCache) {

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * The base implementation of `_.uniq` without support for callback shorthands
   * and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee) {
    var index = -1,
        indexOf = baseIndexOf,
        length = array.length,
        isCommon = true,
        isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
        seen = isLarge ? createCache() : null,
        result = [];

    if (seen) {
      indexOf = cacheIndexOf;
      isCommon = false;
    } else {
      isLarge = false;
      seen = iteratee ? [] : result;
    }
    outer:
    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (isCommon && value === value) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      }
      else if (indexOf(seen, computed, 0) < 0) {
        if (iteratee || isLarge) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  return baseUniq;
});

define('librastandardlib/vendor/lodash-amd/modern/array/union',['../internal/baseFlatten', '../internal/baseUniq', '../function/restParam'], function(baseFlatten, baseUniq, restParam) {

  /**
   * Creates an array of unique values, in order, from all of the provided arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of combined values.
   * @example
   *
   * _.union([1, 2], [4, 2], [2, 1]);
   * // => [1, 2, 4]
   */
  var union = restParam(function(arrays) {
    return baseUniq(baseFlatten(arrays, false, true));
  });

  return union;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/sortedUniq',[], function() {

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  return sortedUniq;
});

define('librastandardlib/vendor/lodash-amd/modern/array/uniq',['../internal/baseCallback', '../internal/baseUniq', '../internal/isIterateeCall', '../internal/sortedUniq'], function(baseCallback, baseUniq, isIterateeCall, sortedUniq) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * Creates a duplicate-free version of an array, using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons, in which only the first occurence of each element
   * is kept. Providing `true` for `isSorted` performs a faster search algorithm
   * for sorted arrays. If an iteratee function is provided it's invoked for
   * each element in the array to generate the criterion by which uniqueness
   * is computed. The `iteratee` is bound to `thisArg` and invoked with three
   * arguments: (value, index, array).
   *
   * If a property name is provided for `iteratee` the created `_.property`
   * style callback returns the property value of the given element.
   *
   * If a value is also provided for `thisArg` the created `_.matchesProperty`
   * style callback returns `true` for elements that have a matching property
   * value, else `false`.
   *
   * If an object is provided for `iteratee` the created `_.matches` style
   * callback returns `true` for elements that have the properties of the given
   * object, else `false`.
   *
   * @static
   * @memberOf _
   * @alias unique
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {boolean} [isSorted] Specify the array is sorted.
   * @param {Function|Object|string} [iteratee] The function invoked per iteration.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the new duplicate-value-free array.
   * @example
   *
   * _.uniq([2, 1, 2]);
   * // => [2, 1]
   *
   * // using `isSorted`
   * _.uniq([1, 1, 2], true);
   * // => [1, 2]
   *
   * // using an iteratee function
   * _.uniq([1, 2.5, 1.5, 2], function(n) {
   *   return this.floor(n);
   * }, Math);
   * // => [1, 2.5]
   *
   * // using the `_.property` callback shorthand
   * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }, { 'x': 2 }]
   */
  function uniq(array, isSorted, iteratee, thisArg) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    if (isSorted != null && typeof isSorted != 'boolean') {
      thisArg = iteratee;
      iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
      isSorted = false;
    }
    iteratee = iteratee == null ? iteratee : baseCallback(iteratee, thisArg, 3);
    return (isSorted)
      ? sortedUniq(array, iteratee)
      : baseUniq(array, iteratee);
  }

  return uniq;
});

define('librastandardlib/vendor/lodash-amd/modern/array/unique',["./uniq"], function(uniq) {
  return uniq;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/arrayFilter',[], function() {

  /**
   * A specialized version of `_.filter` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[++resIndex] = value;
      }
    }
    return result;
  }

  return arrayFilter;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/arrayMap',[], function() {

  /**
   * A specialized version of `_.map` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  return arrayMap;
});

define('librastandardlib/vendor/lodash-amd/modern/array/unzip',['../internal/arrayFilter', '../internal/arrayMap', '../internal/baseProperty', '../internal/isArrayLike'], function(arrayFilter, arrayMap, baseProperty, isArrayLike) {

  /* Native method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * This method is like `_.zip` except that it accepts an array of grouped
   * elements and creates an array regrouping the elements to their pre-zip
   * configuration.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array of grouped elements to process.
   * @returns {Array} Returns the new array of regrouped elements.
   * @example
   *
   * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
   * // => [['fred', 30, true], ['barney', 40, false]]
   *
   * _.unzip(zipped);
   * // => [['fred', 'barney'], [30, 40], [true, false]]
   */
  function unzip(array) {
    if (!(array && array.length)) {
      return [];
    }
    var index = -1,
        length = 0;

    array = arrayFilter(array, function(group) {
      if (isArrayLike(group)) {
        length = nativeMax(group.length, length);
        return true;
      }
    });
    var result = Array(length);
    while (++index < length) {
      result[index] = arrayMap(array, baseProperty(index));
    }
    return result;
  }

  return unzip;
});

define('librastandardlib/vendor/lodash-amd/modern/internal/arrayReduce',[], function() {

  /**
   * A specialized version of `_.reduce` for arrays without support for callback
   * shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initFromArray] Specify using the first element of `array`
   *  as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initFromArray) {
    var index = -1,
        length = array.length;

    if (initFromArray && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  return arrayReduce;
});

define('librastandardlib/vendor/lodash-amd/modern/array/unzipWith',['../internal/arrayMap', '../internal/arrayReduce', '../internal/bindCallback', './unzip'], function(arrayMap, arrayReduce, bindCallback, unzip) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * This method is like `_.unzip` except that it accepts an iteratee to specify
   * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
   * and invoked with four arguments: (accumulator, value, index, group).
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array of grouped elements to process.
   * @param {Function} [iteratee] The function to combine regrouped values.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the new array of regrouped elements.
   * @example
   *
   * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
   * // => [[1, 10, 100], [2, 20, 200]]
   *
   * _.unzipWith(zipped, _.add);
   * // => [3, 30, 300]
   */
  function unzipWith(array, iteratee, thisArg) {
    var length = array ? array.length : 0;
    if (!length) {
      return [];
    }
    var result = unzip(array);
    if (iteratee == null) {
      return result;
    }
    iteratee = bindCallback(iteratee, thisArg, 4);
    return arrayMap(result, function(group) {
      return arrayReduce(group, iteratee, undefined, true);
    });
  }

  return unzipWith;
});

define('librastandardlib/vendor/lodash-amd/modern/array/without',['../internal/baseDifference', '../internal/isArrayLike', '../function/restParam'], function(baseDifference, isArrayLike, restParam) {

  /**
   * Creates an array excluding all provided values using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to filter.
   * @param {...*} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.without([1, 2, 1, 3], 1, 2);
   * // => [3]
   */
  var without = restParam(function(array, values) {
    return isArrayLike(array)
      ? baseDifference(array, values)
      : [];
  });

  return without;
});

define('librastandardlib/vendor/lodash-amd/modern/array/xor',['../internal/arrayPush', '../internal/baseDifference', '../internal/baseUniq', '../internal/isArrayLike'], function(arrayPush, baseDifference, baseUniq, isArrayLike) {

  /**
   * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
   * of the provided arrays.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of values.
   * @example
   *
   * _.xor([1, 2], [4, 2]);
   * // => [1, 4]
   */
  function xor() {
    var index = -1,
        length = arguments.length;

    while (++index < length) {
      var array = arguments[index];
      if (isArrayLike(array)) {
        var result = result
          ? arrayPush(baseDifference(result, array), baseDifference(array, result))
          : array;
      }
    }
    return result ? baseUniq(result) : [];
  }

  return xor;
});

define('librastandardlib/vendor/lodash-amd/modern/array/zip',['../function/restParam', './unzip'], function(restParam, unzip) {

  /**
   * Creates an array of grouped elements, the first of which contains the first
   * elements of the given arrays, the second of which contains the second elements
   * of the given arrays, and so on.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to process.
   * @returns {Array} Returns the new array of grouped elements.
   * @example
   *
   * _.zip(['fred', 'barney'], [30, 40], [true, false]);
   * // => [['fred', 30, true], ['barney', 40, false]]
   */
  var zip = restParam(unzip);

  return zip;
});

define('librastandardlib/vendor/lodash-amd/modern/array/zipWith',['../function/restParam', './unzipWith'], function(restParam, unzipWith) {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /**
   * This method is like `_.zip` except that it accepts an iteratee to specify
   * how grouped values should be combined. The `iteratee` is bound to `thisArg`
   * and invoked with four arguments: (accumulator, value, index, group).
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {...Array} [arrays] The arrays to process.
   * @param {Function} [iteratee] The function to combine grouped values.
   * @param {*} [thisArg] The `this` binding of `iteratee`.
   * @returns {Array} Returns the new array of grouped elements.
   * @example
   *
   * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
   * // => [111, 222]
   */
  var zipWith = restParam(function(arrays) {
    var length = arrays.length,
        iteratee = length > 2 ? arrays[length - 2] : undefined,
        thisArg = length > 1 ? arrays[length - 1] : undefined;

    if (length > 2 && typeof iteratee == 'function') {
      length -= 2;
    } else {
      iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
      thisArg = undefined;
    }
    arrays.length = length;
    return unzipWith(arrays, iteratee, thisArg);
  });

  return zipWith;
});

define('librastandardlib/vendor/lodash-amd/modern/array',['./array/chunk', './array/compact', './array/difference', './array/drop', './array/dropRight', './array/dropRightWhile', './array/dropWhile', './array/fill', './array/findIndex', './array/findLastIndex', './array/first', './array/flatten', './array/flattenDeep', './array/head', './array/indexOf', './array/initial', './array/intersection', './array/last', './array/lastIndexOf', './array/object', './array/pull', './array/pullAt', './array/remove', './array/rest', './array/slice', './array/sortedIndex', './array/sortedLastIndex', './array/tail', './array/take', './array/takeRight', './array/takeRightWhile', './array/takeWhile', './array/union', './array/uniq', './array/unique', './array/unzip', './array/unzipWith', './array/without', './array/xor', './array/zip', './array/zipObject', './array/zipWith'], function(chunk, compact, difference, drop, dropRight, dropRightWhile, dropWhile, fill, findIndex, findLastIndex, first, flatten, flattenDeep, head, indexOf, initial, intersection, last, lastIndexOf, object, pull, pullAt, remove, rest, slice, sortedIndex, sortedLastIndex, tail, take, takeRight, takeRightWhile, takeWhile, union, uniq, unique, unzip, unzipWith, without, xor, zip, zipObject, zipWith) {
  return {
    'chunk': chunk,
    'compact': compact,
    'difference': difference,
    'drop': drop,
    'dropRight': dropRight,
    'dropRightWhile': dropRightWhile,
    'dropWhile': dropWhile,
    'fill': fill,
    'findIndex': findIndex,
    'findLastIndex': findLastIndex,
    'first': first,
    'flatten': flatten,
    'flattenDeep': flattenDeep,
    'head': head,
    'indexOf': indexOf,
    'initial': initial,
    'intersection': intersection,
    'last': last,
    'lastIndexOf': lastIndexOf,
    'object': object,
    'pull': pull,
    'pullAt': pullAt,
    'remove': remove,
    'rest': rest,
    'slice': slice,
    'sortedIndex': sortedIndex,
    'sortedLastIndex': sortedLastIndex,
    'tail': tail,
    'take': take,
    'takeRight': takeRight,
    'takeRightWhile': takeRightWhile,
    'takeWhile': takeWhile,
    'union': union,
    'uniq': uniq,
    'unique': unique,
    'unzip': unzip,
    'unzipWith': unzipWith,
    'without': without,
    'xor': xor,
    'zip': zip,
    'zipObject': zipObject,
    'zipWith': zipWith
  };
});

define('directories/directory-utils/path-utils',[
  'librastandardlib/vendor/lodash-amd/modern/array'
], function (_array) {
  var PathUtils = {
    // Resolve an Item ID against its Directory ID, used for public links
    // For example, given "foo" and "foo#bar", return "bar"
    getRelativeItemId: function(directoryId, itemId) {
      var relativeItemId = false;

      if (typeof directoryId !== 'undefined' && directoryId !== '' && typeof itemId !== 'undefined' && itemId !== '') {
        var re = new RegExp('^' + directoryId + '#');
        relativeItemId = itemId.replace(re, '');
      }

      return relativeItemId;
    },

    // Pull the Item ID from the URL
    // For example, given "/datasets/foobar/", return "foobar"
    getItemIdFromPath: function(path) {
      var parts = path.split(/\//);

      // An Item must be rendered under an Items parent page
      if (parts.length <= 3) {
        return false;
      }

      return parts[parts.length - 2];
    },

    // Convert multiple slashes in a given string down to a single slash
    cleanPath: function(path) {
      return path.replace(/\/{2,}/, '/');
    },

    // Returns the locale based on the HTML language attribute
    getLocaleFromHtmlTag: function() {
      var lang = $('html').attr('lang');
      if (lang) {
        return lang.replace('-', '_');
      }
      return '';
    },

    // Returns the tagNamespace and tag from the path.
    // If rootPath is given, exclude that from the fullPath.
    // The result should look like these:
    // /category/compute/ -> category#compute
    // /category/compute/ec2 -> category-compute#ec2
    getTagFromURL: function(fullPath, rootPath) {
      if (rootPath === undefined) {
        rootPath = '';
      }

      var index = fullPath.indexOf(rootPath) + rootPath.length;
      var arrPath = _array.compact(fullPath.slice(index).split('/'));

      return arrPath.reduce(function(str, value, ind) {
        if (ind > 0) {
          str = decodeURIComponent(str);

          if (ind === arrPath.length - 1) {
            str += '#';
          } else {
            str += '-';
          }
        }

        return str + decodeURIComponent(value);
      }, '');
    }
  };

  return PathUtils;
});

define('directories/directory-utils/directory-default-config',[
  'directories/directory-utils/path-utils'
],
  function(PathUtils) {
  if (typeof AWS.Directories === 'undefined') {
    AWS.Directories = {};
  }

  AWS.Directories = {
    TemplateHelpers: {
      itemUrlTemplate: '{{basePath}}/{{itemPath}}/',
      language: $('html').attr('lang') || 'en-US'
    },
    ItemsController: {
      selector: '.aws-directories-items',
      sidenavSelector: 'ul.side-navbar',
      endpoint: '/api/dirs/{{directoryId}}/items',
      eventDataLoad: 'directory-cards-data-load',
      locale: PathUtils.getLocaleFromHtmlTag()
    },
    ItemController: {
      selector: '.aws-directories-item',
      endpoint: '/api/dirs/{{directoryId}}/items/{{itemId}}'
    }
  };

  return AWS.Directories;
});

define('aws-blog/tools/collection',[],function() {
  'use strict';

  var defaults = {
    id: 'id'
  };

  function Collection(items, options) {
    options = options || {};

    this.options = $.extend({}, defaults, options);
    this.id = this.options.id;
    this.reset(items);
  }

  Collection.prototype = {
    // Add item to collection
    add: function(item) {
      if (!this.exists(item)) {
        this.items.push(item);
        this.length = this.items.length;
      }

      return this;
    },

    // Determine if item exists based on item ID or by providing the item
    exists: function(itemId) {
      var idKey = this.id;

      if (itemId === undefined ) {
        return undefined;
      }
      else if (typeof itemId === 'object') {
        itemId = itemId[idKey];
      }

      var existingItem = this.items.filter(function(item) {
        return item[idKey] === itemId;
      });

      return !(existingItem === undefined || existingItem.length === 0);
    },

    // Rotate items by the given count to change where the list of items start
    rotate: function(count) {
      var len = this.length;

      this.items.unshift.apply(this.items, this.items.splice(count % len, len));

      return this;
    },

    // Reset collection
    reset: function(items) {
      items = items || [];
      this.items = items;
      this.length = items.length;

      items.forEach(this.add, this);

      return this;
    }
  };

  return Collection;
});

/*!

 handlebars v4.0.5

Copyright (C) 2011-2015 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define('directories/vendor/handlebars',[], factory);
	else if(typeof exports === 'object')
		exports["Handlebars"] = factory();
	else
		root["Handlebars"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _handlebarsRuntime = __webpack_require__(2);

	var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

	// Compiler imports

	var _handlebarsCompilerAst = __webpack_require__(21);

	var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

	var _handlebarsCompilerBase = __webpack_require__(22);

	var _handlebarsCompilerCompiler = __webpack_require__(27);

	var _handlebarsCompilerJavascriptCompiler = __webpack_require__(28);

	var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

	var _handlebarsCompilerVisitor = __webpack_require__(25);

	var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

	var _handlebarsNoConflict = __webpack_require__(20);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	var _create = _handlebarsRuntime2['default'].create;
	function create() {
	  var hb = _create();

	  hb.compile = function (input, options) {
	    return _handlebarsCompilerCompiler.compile(input, options, hb);
	  };
	  hb.precompile = function (input, options) {
	    return _handlebarsCompilerCompiler.precompile(input, options, hb);
	  };

	  hb.AST = _handlebarsCompilerAst2['default'];
	  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
	  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
	  hb.Parser = _handlebarsCompilerBase.parser;
	  hb.parse = _handlebarsCompilerBase.parse;

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst.Visitor = _handlebarsCompilerVisitor2['default'];

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _handlebarsBase = __webpack_require__(4);

	var base = _interopRequireWildcard(_handlebarsBase);

	// Each of these augment the Handlebars object. No need to setup here.
	// (This is done to easily share code between commonjs and browse envs)

	var _handlebarsSafeString = __webpack_require__(18);

	var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

	var _handlebarsException = __webpack_require__(6);

	var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

	var _handlebarsUtils = __webpack_require__(5);

	var Utils = _interopRequireWildcard(_handlebarsUtils);

	var _handlebarsRuntime = __webpack_require__(19);

	var runtime = _interopRequireWildcard(_handlebarsRuntime);

	var _handlebarsNoConflict = __webpack_require__(20);

	var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

	// For compatibility and usage outside of module systems, make the Handlebars object a namespace
	function create() {
	  var hb = new base.HandlebarsEnvironment();

	  Utils.extend(hb, base);
	  hb.SafeString = _handlebarsSafeString2['default'];
	  hb.Exception = _handlebarsException2['default'];
	  hb.Utils = Utils;
	  hb.escapeExpression = Utils.escapeExpression;

	  hb.VM = runtime;
	  hb.template = function (spec) {
	    return runtime.template(spec, hb);
	  };

	  return hb;
	}

	var inst = create();
	inst.create = create;

	_handlebarsNoConflict2['default'](inst);

	inst['default'] = inst;

	exports['default'] = inst;
	module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.HandlebarsEnvironment = HandlebarsEnvironment;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _helpers = __webpack_require__(7);

	var _decorators = __webpack_require__(15);

	var _logger = __webpack_require__(17);

	var _logger2 = _interopRequireDefault(_logger);

	var VERSION = '4.0.5';
	exports.VERSION = VERSION;
	var COMPILER_REVISION = 7;

	exports.COMPILER_REVISION = COMPILER_REVISION;
	var REVISION_CHANGES = {
	  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
	  2: '== 1.0.0-rc.3',
	  3: '== 1.0.0-rc.4',
	  4: '== 1.x.x',
	  5: '== 2.0.0-alpha.x',
	  6: '>= 2.0.0-beta.1',
	  7: '>= 4.0.0'
	};

	exports.REVISION_CHANGES = REVISION_CHANGES;
	var objectType = '[object Object]';

	function HandlebarsEnvironment(helpers, partials, decorators) {
	  this.helpers = helpers || {};
	  this.partials = partials || {};
	  this.decorators = decorators || {};

	  _helpers.registerDefaultHelpers(this);
	  _decorators.registerDefaultDecorators(this);
	}

	HandlebarsEnvironment.prototype = {
	  constructor: HandlebarsEnvironment,

	  logger: _logger2['default'],
	  log: _logger2['default'].log,

	  registerHelper: function registerHelper(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple helpers');
	      }
	      _utils.extend(this.helpers, name);
	    } else {
	      this.helpers[name] = fn;
	    }
	  },
	  unregisterHelper: function unregisterHelper(name) {
	    delete this.helpers[name];
	  },

	  registerPartial: function registerPartial(name, partial) {
	    if (_utils.toString.call(name) === objectType) {
	      _utils.extend(this.partials, name);
	    } else {
	      if (typeof partial === 'undefined') {
	        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
	      }
	      this.partials[name] = partial;
	    }
	  },
	  unregisterPartial: function unregisterPartial(name) {
	    delete this.partials[name];
	  },

	  registerDecorator: function registerDecorator(name, fn) {
	    if (_utils.toString.call(name) === objectType) {
	      if (fn) {
	        throw new _exception2['default']('Arg not supported with multiple decorators');
	      }
	      _utils.extend(this.decorators, name);
	    } else {
	      this.decorators[name] = fn;
	    }
	  },
	  unregisterDecorator: function unregisterDecorator(name) {
	    delete this.decorators[name];
	  }
	};

	var log = _logger2['default'].log;

	exports.log = log;
	exports.createFrame = _utils.createFrame;
	exports.logger = _logger2['default'];

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.extend = extend;
	exports.indexOf = indexOf;
	exports.escapeExpression = escapeExpression;
	exports.isEmpty = isEmpty;
	exports.createFrame = createFrame;
	exports.blockParams = blockParams;
	exports.appendContextPath = appendContextPath;
	var escape = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  "'": '&#x27;',
	  '`': '&#x60;',
	  '=': '&#x3D;'
	};

	var badChars = /[&<>"'`=]/g,
	    possible = /[&<>"'`=]/;

	function escapeChar(chr) {
	  return escape[chr];
	}

	function extend(obj /* , ...source */) {
	  for (var i = 1; i < arguments.length; i++) {
	    for (var key in arguments[i]) {
	      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
	        obj[key] = arguments[i][key];
	      }
	    }
	  }

	  return obj;
	}

	var toString = Object.prototype.toString;

	exports.toString = toString;
	// Sourced from lodash
	// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
	/* eslint-disable func-style */
	var isFunction = function isFunction(value) {
	  return typeof value === 'function';
	};
	// fallback for older versions of Chrome and Safari
	/* istanbul ignore next */
	if (isFunction(/x/)) {
	  exports.isFunction = isFunction = function (value) {
	    return typeof value === 'function' && toString.call(value) === '[object Function]';
	  };
	}
	exports.isFunction = isFunction;

	/* eslint-enable func-style */

	/* istanbul ignore next */
	var isArray = Array.isArray || function (value) {
	  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
	};

	exports.isArray = isArray;
	// Older IE versions do not directly support indexOf so we must implement our own, sadly.

	function indexOf(array, value) {
	  for (var i = 0, len = array.length; i < len; i++) {
	    if (array[i] === value) {
	      return i;
	    }
	  }
	  return -1;
	}

	function escapeExpression(string) {
	  if (typeof string !== 'string') {
	    // don't escape SafeStrings, since they're already safe
	    if (string && string.toHTML) {
	      return string.toHTML();
	    } else if (string == null) {
	      return '';
	    } else if (!string) {
	      return string + '';
	    }

	    // Force a string conversion as this will be done by the append regardless and
	    // the regex test will do this transparently behind the scenes, causing issues if
	    // an object's to string has escaped characters in it.
	    string = '' + string;
	  }

	  if (!possible.test(string)) {
	    return string;
	  }
	  return string.replace(badChars, escapeChar);
	}

	function isEmpty(value) {
	  if (!value && value !== 0) {
	    return true;
	  } else if (isArray(value) && value.length === 0) {
	    return true;
	  } else {
	    return false;
	  }
	}

	function createFrame(object) {
	  var frame = extend({}, object);
	  frame._parent = object;
	  return frame;
	}

	function blockParams(params, ids) {
	  params.path = ids;
	  return params;
	}

	function appendContextPath(contextPath, id) {
	  return (contextPath ? contextPath + '.' : '') + id;
	}

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

	function Exception(message, node) {
	  var loc = node && node.loc,
	      line = undefined,
	      column = undefined;
	  if (loc) {
	    line = loc.start.line;
	    column = loc.start.column;

	    message += ' - ' + line + ':' + column;
	  }

	  var tmp = Error.prototype.constructor.call(this, message);

	  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
	  for (var idx = 0; idx < errorProps.length; idx++) {
	    this[errorProps[idx]] = tmp[errorProps[idx]];
	  }

	  /* istanbul ignore else */
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, Exception);
	  }

	  if (loc) {
	    this.lineNumber = line;
	    this.column = column;
	  }
	}

	Exception.prototype = new Error();

	exports['default'] = Exception;
	module.exports = exports['default'];

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.registerDefaultHelpers = registerDefaultHelpers;

	var _helpersBlockHelperMissing = __webpack_require__(8);

	var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

	var _helpersEach = __webpack_require__(9);

	var _helpersEach2 = _interopRequireDefault(_helpersEach);

	var _helpersHelperMissing = __webpack_require__(10);

	var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

	var _helpersIf = __webpack_require__(11);

	var _helpersIf2 = _interopRequireDefault(_helpersIf);

	var _helpersLog = __webpack_require__(12);

	var _helpersLog2 = _interopRequireDefault(_helpersLog);

	var _helpersLookup = __webpack_require__(13);

	var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

	var _helpersWith = __webpack_require__(14);

	var _helpersWith2 = _interopRequireDefault(_helpersWith);

	function registerDefaultHelpers(instance) {
	  _helpersBlockHelperMissing2['default'](instance);
	  _helpersEach2['default'](instance);
	  _helpersHelperMissing2['default'](instance);
	  _helpersIf2['default'](instance);
	  _helpersLog2['default'](instance);
	  _helpersLookup2['default'](instance);
	  _helpersWith2['default'](instance);
	}

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('blockHelperMissing', function (context, options) {
	    var inverse = options.inverse,
	        fn = options.fn;

	    if (context === true) {
	      return fn(this);
	    } else if (context === false || context == null) {
	      return inverse(this);
	    } else if (_utils.isArray(context)) {
	      if (context.length > 0) {
	        if (options.ids) {
	          options.ids = [options.name];
	        }

	        return instance.helpers.each(context, options);
	      } else {
	        return inverse(this);
	      }
	    } else {
	      if (options.data && options.ids) {
	        var data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
	        options = { data: data };
	      }

	      return fn(context, options);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('each', function (context, options) {
	    if (!options) {
	      throw new _exception2['default']('Must pass iterator to #each');
	    }

	    var fn = options.fn,
	        inverse = options.inverse,
	        i = 0,
	        ret = '',
	        data = undefined,
	        contextPath = undefined;

	    if (options.data && options.ids) {
	      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
	    }

	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    if (options.data) {
	      data = _utils.createFrame(options.data);
	    }

	    function execIteration(field, index, last) {
	      if (data) {
	        data.key = field;
	        data.index = index;
	        data.first = index === 0;
	        data.last = !!last;

	        if (contextPath) {
	          data.contextPath = contextPath + field;
	        }
	      }

	      ret = ret + fn(context[field], {
	        data: data,
	        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
	      });
	    }

	    if (context && typeof context === 'object') {
	      if (_utils.isArray(context)) {
	        for (var j = context.length; i < j; i++) {
	          if (i in context) {
	            execIteration(i, i, i === context.length - 1);
	          }
	        }
	      } else {
	        var priorKey = undefined;

	        for (var key in context) {
	          if (context.hasOwnProperty(key)) {
	            // We're running the iterations one step out of sync so we can detect
	            // the last iteration without have to scan the object twice and create
	            // an itermediate keys array.
	            if (priorKey !== undefined) {
	              execIteration(priorKey, i - 1);
	            }
	            priorKey = key;
	            i++;
	          }
	        }
	        if (priorKey !== undefined) {
	          execIteration(priorKey, i - 1, true);
	        }
	      }
	    }

	    if (i === 0) {
	      ret = inverse(this);
	    }

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	exports['default'] = function (instance) {
	  instance.registerHelper('helperMissing', function () /* [args, ]options */{
	    if (arguments.length === 1) {
	      // A missing field in a {{foo}} construct.
	      return undefined;
	    } else {
	      // Someone is actually trying to call something, blow up.
	      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
	    }
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('if', function (conditional, options) {
	    if (_utils.isFunction(conditional)) {
	      conditional = conditional.call(this);
	    }

	    // Default behavior is to render the positive path if the value is truthy and not empty.
	    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
	    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
	    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
	      return options.inverse(this);
	    } else {
	      return options.fn(this);
	    }
	  });

	  instance.registerHelper('unless', function (conditional, options) {
	    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('log', function () /* message, options */{
	    var args = [undefined],
	        options = arguments[arguments.length - 1];
	    for (var i = 0; i < arguments.length - 1; i++) {
	      args.push(arguments[i]);
	    }

	    var level = 1;
	    if (options.hash.level != null) {
	      level = options.hash.level;
	    } else if (options.data && options.data.level != null) {
	      level = options.data.level;
	    }
	    args[0] = level;

	    instance.log.apply(instance, args);
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (instance) {
	  instance.registerHelper('lookup', function (obj, field) {
	    return obj && obj[field];
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerHelper('with', function (context, options) {
	    if (_utils.isFunction(context)) {
	      context = context.call(this);
	    }

	    var fn = options.fn;

	    if (!_utils.isEmpty(context)) {
	      var data = options.data;
	      if (options.data && options.ids) {
	        data = _utils.createFrame(options.data);
	        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
	      }

	      return fn(context, {
	        data: data,
	        blockParams: _utils.blockParams([context], [data && data.contextPath])
	      });
	    } else {
	      return options.inverse(this);
	    }
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.registerDefaultDecorators = registerDefaultDecorators;

	var _decoratorsInline = __webpack_require__(16);

	var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

	function registerDefaultDecorators(instance) {
	  _decoratorsInline2['default'](instance);
	}

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	exports['default'] = function (instance) {
	  instance.registerDecorator('inline', function (fn, props, container, options) {
	    var ret = fn;
	    if (!props.partials) {
	      props.partials = {};
	      ret = function (context, options) {
	        // Create a new partials stack frame prior to exec.
	        var original = container.partials;
	        container.partials = _utils.extend({}, original, props.partials);
	        var ret = fn(context, options);
	        container.partials = original;
	        return ret;
	      };
	    }

	    props.partials[options.args[0]] = options.fn;

	    return ret;
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var logger = {
	  methodMap: ['debug', 'info', 'warn', 'error'],
	  level: 'info',

	  // Maps a given level value to the `methodMap` indexes above.
	  lookupLevel: function lookupLevel(level) {
	    if (typeof level === 'string') {
	      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
	      if (levelMap >= 0) {
	        level = levelMap;
	      } else {
	        level = parseInt(level, 10);
	      }
	    }

	    return level;
	  },

	  // Can be overridden in the host environment
	  log: function log(level) {
	    level = logger.lookupLevel(level);

	    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
	      var method = logger.methodMap[level];
	      if (!console[method]) {
	        // eslint-disable-line no-console
	        method = 'log';
	      }

	      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        message[_key - 1] = arguments[_key];
	      }

	      console[method].apply(console, message); // eslint-disable-line no-console
	    }
	  }
	};

	exports['default'] = logger;
	module.exports = exports['default'];

/***/ },
/* 18 */
/***/ function(module, exports) {

	// Build out our basic SafeString type
	'use strict';

	exports.__esModule = true;
	function SafeString(string) {
	  this.string = string;
	}

	SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
	  return '' + this.string;
	};

	exports['default'] = SafeString;
	module.exports = exports['default'];

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.checkRevision = checkRevision;
	exports.template = template;
	exports.wrapProgram = wrapProgram;
	exports.resolvePartial = resolvePartial;
	exports.invokePartial = invokePartial;
	exports.noop = noop;

	var _utils = __webpack_require__(5);

	var Utils = _interopRequireWildcard(_utils);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _base = __webpack_require__(4);

	function checkRevision(compilerInfo) {
	  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
	      currentRevision = _base.COMPILER_REVISION;

	  if (compilerRevision !== currentRevision) {
	    if (compilerRevision < currentRevision) {
	      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
	          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
	      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
	    } else {
	      // Use the embedded version info since the runtime doesn't know about this revision yet
	      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
	    }
	  }
	}

	function template(templateSpec, env) {
	  /* istanbul ignore next */
	  if (!env) {
	    throw new _exception2['default']('No environment passed to template');
	  }
	  if (!templateSpec || !templateSpec.main) {
	    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
	  }

	  templateSpec.main.decorator = templateSpec.main_d;

	  // Note: Using env.VM references rather than local var references throughout this section to allow
	  // for external users to override these as psuedo-supported APIs.
	  env.VM.checkRevision(templateSpec.compiler);

	  function invokePartialWrapper(partial, context, options) {
	    if (options.hash) {
	      context = Utils.extend({}, context, options.hash);
	      if (options.ids) {
	        options.ids[0] = true;
	      }
	    }

	    partial = env.VM.resolvePartial.call(this, partial, context, options);
	    var result = env.VM.invokePartial.call(this, partial, context, options);

	    if (result == null && env.compile) {
	      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
	      result = options.partials[options.name](context, options);
	    }
	    if (result != null) {
	      if (options.indent) {
	        var lines = result.split('\n');
	        for (var i = 0, l = lines.length; i < l; i++) {
	          if (!lines[i] && i + 1 === l) {
	            break;
	          }

	          lines[i] = options.indent + lines[i];
	        }
	        result = lines.join('\n');
	      }
	      return result;
	    } else {
	      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
	    }
	  }

	  // Just add water
	  var container = {
	    strict: function strict(obj, name) {
	      if (!(name in obj)) {
	        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
	      }
	      return obj[name];
	    },
	    lookup: function lookup(depths, name) {
	      var len = depths.length;
	      for (var i = 0; i < len; i++) {
	        if (depths[i] && depths[i][name] != null) {
	          return depths[i][name];
	        }
	      }
	    },
	    lambda: function lambda(current, context) {
	      return typeof current === 'function' ? current.call(context) : current;
	    },

	    escapeExpression: Utils.escapeExpression,
	    invokePartial: invokePartialWrapper,

	    fn: function fn(i) {
	      var ret = templateSpec[i];
	      ret.decorator = templateSpec[i + '_d'];
	      return ret;
	    },

	    programs: [],
	    program: function program(i, data, declaredBlockParams, blockParams, depths) {
	      var programWrapper = this.programs[i],
	          fn = this.fn(i);
	      if (data || depths || blockParams || declaredBlockParams) {
	        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
	      } else if (!programWrapper) {
	        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
	      }
	      return programWrapper;
	    },

	    data: function data(value, depth) {
	      while (value && depth--) {
	        value = value._parent;
	      }
	      return value;
	    },
	    merge: function merge(param, common) {
	      var obj = param || common;

	      if (param && common && param !== common) {
	        obj = Utils.extend({}, common, param);
	      }

	      return obj;
	    },

	    noop: env.VM.noop,
	    compilerInfo: templateSpec.compiler
	  };

	  function ret(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var data = options.data;

	    ret._setup(options);
	    if (!options.partial && templateSpec.useData) {
	      data = initData(context, data);
	    }
	    var depths = undefined,
	        blockParams = templateSpec.useBlockParams ? [] : undefined;
	    if (templateSpec.useDepths) {
	      if (options.depths) {
	        depths = context !== options.depths[0] ? [context].concat(options.depths) : options.depths;
	      } else {
	        depths = [context];
	      }
	    }

	    function main(context /*, options*/) {
	      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
	    }
	    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
	    return main(context, options);
	  }
	  ret.isTop = true;

	  ret._setup = function (options) {
	    if (!options.partial) {
	      container.helpers = container.merge(options.helpers, env.helpers);

	      if (templateSpec.usePartial) {
	        container.partials = container.merge(options.partials, env.partials);
	      }
	      if (templateSpec.usePartial || templateSpec.useDecorators) {
	        container.decorators = container.merge(options.decorators, env.decorators);
	      }
	    } else {
	      container.helpers = options.helpers;
	      container.partials = options.partials;
	      container.decorators = options.decorators;
	    }
	  };

	  ret._child = function (i, data, blockParams, depths) {
	    if (templateSpec.useBlockParams && !blockParams) {
	      throw new _exception2['default']('must pass block params');
	    }
	    if (templateSpec.useDepths && !depths) {
	      throw new _exception2['default']('must pass parent depths');
	    }

	    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
	  };
	  return ret;
	}

	function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
	  function prog(context) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var currentDepths = depths;
	    if (depths && context !== depths[0]) {
	      currentDepths = [context].concat(depths);
	    }

	    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
	  }

	  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

	  prog.program = i;
	  prog.depth = depths ? depths.length : 0;
	  prog.blockParams = declaredBlockParams || 0;
	  return prog;
	}

	function resolvePartial(partial, context, options) {
	  if (!partial) {
	    if (options.name === '@partial-block') {
	      partial = options.data['partial-block'];
	    } else {
	      partial = options.partials[options.name];
	    }
	  } else if (!partial.call && !options.name) {
	    // This is a dynamic partial that returned a string
	    options.name = partial;
	    partial = options.partials[partial];
	  }
	  return partial;
	}

	function invokePartial(partial, context, options) {
	  options.partial = true;
	  if (options.ids) {
	    options.data.contextPath = options.ids[0] || options.data.contextPath;
	  }

	  var partialBlock = undefined;
	  if (options.fn && options.fn !== noop) {
	    options.data = _base.createFrame(options.data);
	    partialBlock = options.data['partial-block'] = options.fn;

	    if (partialBlock.partials) {
	      options.partials = Utils.extend({}, options.partials, partialBlock.partials);
	    }
	  }

	  if (partial === undefined && partialBlock) {
	    partial = partialBlock;
	  }

	  if (partial === undefined) {
	    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
	  } else if (partial instanceof Function) {
	    return partial(context, options);
	  }
	}

	function noop() {
	  return '';
	}

	function initData(context, data) {
	  if (!data || !('root' in data)) {
	    data = data ? _base.createFrame(data) : {};
	    data.root = context;
	  }
	  return data;
	}

	function executeDecorators(fn, prog, container, depths, data, blockParams) {
	  if (fn.decorator) {
	    var props = {};
	    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
	    Utils.extend(prog, props);
	  }
	  return prog;
	}

/***/ },
/* 20 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global window */
	'use strict';

	exports.__esModule = true;

	exports['default'] = function (Handlebars) {
	  /* istanbul ignore next */
	  var root = typeof global !== 'undefined' ? global : window,
	      $Handlebars = root.Handlebars;
	  /* istanbul ignore next */
	  Handlebars.noConflict = function () {
	    if (root.Handlebars === Handlebars) {
	      root.Handlebars = $Handlebars;
	    }
	    return Handlebars;
	  };
	};

	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var AST = {
	  // Public API used to evaluate derived attributes regarding AST nodes
	  helpers: {
	    // a mustache is definitely a helper if:
	    // * it is an eligible helper, and
	    // * it has at least one parameter or hash segment
	    helperExpression: function helperExpression(node) {
	      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
	    },

	    scopedId: function scopedId(path) {
	      return (/^\.|this\b/.test(path.original)
	      );
	    },

	    // an ID is simple if it only has one part, and that part is not
	    // `..` or `this`.
	    simpleId: function simpleId(path) {
	      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
	    }
	  }
	};

	// Must be exported as an object rather than the root of the module as the jison lexer
	// must modify the object to operate properly.
	exports['default'] = AST;
	module.exports = exports['default'];

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	var _interopRequireWildcard = __webpack_require__(3)['default'];

	exports.__esModule = true;
	exports.parse = parse;

	var _parser = __webpack_require__(23);

	var _parser2 = _interopRequireDefault(_parser);

	var _whitespaceControl = __webpack_require__(24);

	var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

	var _helpers = __webpack_require__(26);

	var Helpers = _interopRequireWildcard(_helpers);

	var _utils = __webpack_require__(5);

	exports.parser = _parser2['default'];

	var yy = {};
	_utils.extend(yy, Helpers);

	function parse(input, options) {
	  // Just return if an already-compiled AST was passed in.
	  if (input.type === 'Program') {
	    return input;
	  }

	  _parser2['default'].yy = yy;

	  // Altering the shared object here, but this is ok as parser is a sync operation
	  yy.locInfo = function (locInfo) {
	    return new yy.SourceLocation(options && options.srcName, locInfo);
	  };

	  var strip = new _whitespaceControl2['default'](options);
	  return strip.accept(_parser2['default'].parse(input));
	}

/***/ },
/* 23 */
/***/ function(module, exports) {

	/* istanbul ignore next */
	/* Jison generated parser */
	"use strict";

	var handlebars = (function () {
	    var parser = { trace: function trace() {},
	        yy: {},
	        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
	        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
	        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
	        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
	        /**/) {

	            var $0 = $$.length - 1;
	            switch (yystate) {
	                case 1:
	                    return $$[$0 - 1];
	                    break;
	                case 2:
	                    this.$ = yy.prepareProgram($$[$0]);
	                    break;
	                case 3:
	                    this.$ = $$[$0];
	                    break;
	                case 4:
	                    this.$ = $$[$0];
	                    break;
	                case 5:
	                    this.$ = $$[$0];
	                    break;
	                case 6:
	                    this.$ = $$[$0];
	                    break;
	                case 7:
	                    this.$ = $$[$0];
	                    break;
	                case 8:
	                    this.$ = $$[$0];
	                    break;
	                case 9:
	                    this.$ = {
	                        type: 'CommentStatement',
	                        value: yy.stripComment($$[$0]),
	                        strip: yy.stripFlags($$[$0], $$[$0]),
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 10:
	                    this.$ = {
	                        type: 'ContentStatement',
	                        original: $$[$0],
	                        value: $$[$0],
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 11:
	                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 12:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
	                    break;
	                case 13:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
	                    break;
	                case 14:
	                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
	                    break;
	                case 15:
	                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 16:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 17:
	                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
	                    break;
	                case 18:
	                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
	                    break;
	                case 19:
	                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
	                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
	                    program.chained = true;

	                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

	                    break;
	                case 20:
	                    this.$ = $$[$0];
	                    break;
	                case 21:
	                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
	                    break;
	                case 22:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 23:
	                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
	                    break;
	                case 24:
	                    this.$ = {
	                        type: 'PartialStatement',
	                        name: $$[$0 - 3],
	                        params: $$[$0 - 2],
	                        hash: $$[$0 - 1],
	                        indent: '',
	                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 25:
	                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
	                    break;
	                case 26:
	                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
	                    break;
	                case 27:
	                    this.$ = $$[$0];
	                    break;
	                case 28:
	                    this.$ = $$[$0];
	                    break;
	                case 29:
	                    this.$ = {
	                        type: 'SubExpression',
	                        path: $$[$0 - 3],
	                        params: $$[$0 - 2],
	                        hash: $$[$0 - 1],
	                        loc: yy.locInfo(this._$)
	                    };

	                    break;
	                case 30:
	                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 31:
	                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 32:
	                    this.$ = yy.id($$[$0 - 1]);
	                    break;
	                case 33:
	                    this.$ = $$[$0];
	                    break;
	                case 34:
	                    this.$ = $$[$0];
	                    break;
	                case 35:
	                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
	                    break;
	                case 36:
	                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
	                    break;
	                case 37:
	                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
	                    break;
	                case 38:
	                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
	                    break;
	                case 39:
	                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
	                    break;
	                case 40:
	                    this.$ = $$[$0];
	                    break;
	                case 41:
	                    this.$ = $$[$0];
	                    break;
	                case 42:
	                    this.$ = yy.preparePath(true, $$[$0], this._$);
	                    break;
	                case 43:
	                    this.$ = yy.preparePath(false, $$[$0], this._$);
	                    break;
	                case 44:
	                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
	                    break;
	                case 45:
	                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
	                    break;
	                case 46:
	                    this.$ = [];
	                    break;
	                case 47:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 48:
	                    this.$ = [$$[$0]];
	                    break;
	                case 49:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 50:
	                    this.$ = [];
	                    break;
	                case 51:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 58:
	                    this.$ = [];
	                    break;
	                case 59:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 64:
	                    this.$ = [];
	                    break;
	                case 65:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 70:
	                    this.$ = [];
	                    break;
	                case 71:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 78:
	                    this.$ = [];
	                    break;
	                case 79:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 82:
	                    this.$ = [];
	                    break;
	                case 83:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 86:
	                    this.$ = [];
	                    break;
	                case 87:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 90:
	                    this.$ = [];
	                    break;
	                case 91:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 94:
	                    this.$ = [];
	                    break;
	                case 95:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 98:
	                    this.$ = [$$[$0]];
	                    break;
	                case 99:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	                case 100:
	                    this.$ = [$$[$0]];
	                    break;
	                case 101:
	                    $$[$0 - 1].push($$[$0]);
	                    break;
	            }
	        },
	        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
	        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
	        parseError: function parseError(str, hash) {
	            throw new Error(str);
	        },
	        parse: function parse(input) {
	            var self = this,
	                stack = [0],
	                vstack = [null],
	                lstack = [],
	                table = this.table,
	                yytext = "",
	                yylineno = 0,
	                yyleng = 0,
	                recovering = 0,
	                TERROR = 2,
	                EOF = 1;
	            this.lexer.setInput(input);
	            this.lexer.yy = this.yy;
	            this.yy.lexer = this.lexer;
	            this.yy.parser = this;
	            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
	            var yyloc = this.lexer.yylloc;
	            lstack.push(yyloc);
	            var ranges = this.lexer.options && this.lexer.options.ranges;
	            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
	            function popStack(n) {
	                stack.length = stack.length - 2 * n;
	                vstack.length = vstack.length - n;
	                lstack.length = lstack.length - n;
	            }
	            function lex() {
	                var token;
	                token = self.lexer.lex() || 1;
	                if (typeof token !== "number") {
	                    token = self.symbols_[token] || token;
	                }
	                return token;
	            }
	            var symbol,
	                preErrorSymbol,
	                state,
	                action,
	                a,
	                r,
	                yyval = {},
	                p,
	                len,
	                newState,
	                expected;
	            while (true) {
	                state = stack[stack.length - 1];
	                if (this.defaultActions[state]) {
	                    action = this.defaultActions[state];
	                } else {
	                    if (symbol === null || typeof symbol == "undefined") {
	                        symbol = lex();
	                    }
	                    action = table[state] && table[state][symbol];
	                }
	                if (typeof action === "undefined" || !action.length || !action[0]) {
	                    var errStr = "";
	                    if (!recovering) {
	                        expected = [];
	                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
	                            expected.push("'" + this.terminals_[p] + "'");
	                        }
	                        if (this.lexer.showPosition) {
	                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
	                        } else {
	                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
	                        }
	                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
	                    }
	                }
	                if (action[0] instanceof Array && action.length > 1) {
	                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
	                }
	                switch (action[0]) {
	                    case 1:
	                        stack.push(symbol);
	                        vstack.push(this.lexer.yytext);
	                        lstack.push(this.lexer.yylloc);
	                        stack.push(action[1]);
	                        symbol = null;
	                        if (!preErrorSymbol) {
	                            yyleng = this.lexer.yyleng;
	                            yytext = this.lexer.yytext;
	                            yylineno = this.lexer.yylineno;
	                            yyloc = this.lexer.yylloc;
	                            if (recovering > 0) recovering--;
	                        } else {
	                            symbol = preErrorSymbol;
	                            preErrorSymbol = null;
	                        }
	                        break;
	                    case 2:
	                        len = this.productions_[action[1]][1];
	                        yyval.$ = vstack[vstack.length - len];
	                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
	                        if (ranges) {
	                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
	                        }
	                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
	                        if (typeof r !== "undefined") {
	                            return r;
	                        }
	                        if (len) {
	                            stack = stack.slice(0, -1 * len * 2);
	                            vstack = vstack.slice(0, -1 * len);
	                            lstack = lstack.slice(0, -1 * len);
	                        }
	                        stack.push(this.productions_[action[1]][0]);
	                        vstack.push(yyval.$);
	                        lstack.push(yyval._$);
	                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	                        stack.push(newState);
	                        break;
	                    case 3:
	                        return true;
	                }
	            }
	            return true;
	        }
	    };
	    /* Jison generated lexer */
	    var lexer = (function () {
	        var lexer = { EOF: 1,
	            parseError: function parseError(str, hash) {
	                if (this.yy.parser) {
	                    this.yy.parser.parseError(str, hash);
	                } else {
	                    throw new Error(str);
	                }
	            },
	            setInput: function setInput(input) {
	                this._input = input;
	                this._more = this._less = this.done = false;
	                this.yylineno = this.yyleng = 0;
	                this.yytext = this.matched = this.match = '';
	                this.conditionStack = ['INITIAL'];
	                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
	                if (this.options.ranges) this.yylloc.range = [0, 0];
	                this.offset = 0;
	                return this;
	            },
	            input: function input() {
	                var ch = this._input[0];
	                this.yytext += ch;
	                this.yyleng++;
	                this.offset++;
	                this.match += ch;
	                this.matched += ch;
	                var lines = ch.match(/(?:\r\n?|\n).*/g);
	                if (lines) {
	                    this.yylineno++;
	                    this.yylloc.last_line++;
	                } else {
	                    this.yylloc.last_column++;
	                }
	                if (this.options.ranges) this.yylloc.range[1]++;

	                this._input = this._input.slice(1);
	                return ch;
	            },
	            unput: function unput(ch) {
	                var len = ch.length;
	                var lines = ch.split(/(?:\r\n?|\n)/g);

	                this._input = ch + this._input;
	                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
	                //this.yyleng -= len;
	                this.offset -= len;
	                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	                this.match = this.match.substr(0, this.match.length - 1);
	                this.matched = this.matched.substr(0, this.matched.length - 1);

	                if (lines.length - 1) this.yylineno -= lines.length - 1;
	                var r = this.yylloc.range;

	                this.yylloc = { first_line: this.yylloc.first_line,
	                    last_line: this.yylineno + 1,
	                    first_column: this.yylloc.first_column,
	                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
	                };

	                if (this.options.ranges) {
	                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	                }
	                return this;
	            },
	            more: function more() {
	                this._more = true;
	                return this;
	            },
	            less: function less(n) {
	                this.unput(this.match.slice(n));
	            },
	            pastInput: function pastInput() {
	                var past = this.matched.substr(0, this.matched.length - this.match.length);
	                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
	            },
	            upcomingInput: function upcomingInput() {
	                var next = this.match;
	                if (next.length < 20) {
	                    next += this._input.substr(0, 20 - next.length);
	                }
	                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
	            },
	            showPosition: function showPosition() {
	                var pre = this.pastInput();
	                var c = new Array(pre.length + 1).join("-");
	                return pre + this.upcomingInput() + "\n" + c + "^";
	            },
	            next: function next() {
	                if (this.done) {
	                    return this.EOF;
	                }
	                if (!this._input) this.done = true;

	                var token, match, tempMatch, index, col, lines;
	                if (!this._more) {
	                    this.yytext = '';
	                    this.match = '';
	                }
	                var rules = this._currentRules();
	                for (var i = 0; i < rules.length; i++) {
	                    tempMatch = this._input.match(this.rules[rules[i]]);
	                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                        match = tempMatch;
	                        index = i;
	                        if (!this.options.flex) break;
	                    }
	                }
	                if (match) {
	                    lines = match[0].match(/(?:\r\n?|\n).*/g);
	                    if (lines) this.yylineno += lines.length;
	                    this.yylloc = { first_line: this.yylloc.last_line,
	                        last_line: this.yylineno + 1,
	                        first_column: this.yylloc.last_column,
	                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
	                    this.yytext += match[0];
	                    this.match += match[0];
	                    this.matches = match;
	                    this.yyleng = this.yytext.length;
	                    if (this.options.ranges) {
	                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
	                    }
	                    this._more = false;
	                    this._input = this._input.slice(match[0].length);
	                    this.matched += match[0];
	                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
	                    if (this.done && this._input) this.done = false;
	                    if (token) return token;else return;
	                }
	                if (this._input === "") {
	                    return this.EOF;
	                } else {
	                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
	                }
	            },
	            lex: function lex() {
	                var r = this.next();
	                if (typeof r !== 'undefined') {
	                    return r;
	                } else {
	                    return this.lex();
	                }
	            },
	            begin: function begin(condition) {
	                this.conditionStack.push(condition);
	            },
	            popState: function popState() {
	                return this.conditionStack.pop();
	            },
	            _currentRules: function _currentRules() {
	                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
	            },
	            topState: function topState() {
	                return this.conditionStack[this.conditionStack.length - 2];
	            },
	            pushState: function begin(condition) {
	                this.begin(condition);
	            } };
	        lexer.options = {};
	        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
	        /**/) {

	            function strip(start, end) {
	                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
	            }

	            var YYSTATE = YY_START;
	            switch ($avoiding_name_collisions) {
	                case 0:
	                    if (yy_.yytext.slice(-2) === "\\\\") {
	                        strip(0, 1);
	                        this.begin("mu");
	                    } else if (yy_.yytext.slice(-1) === "\\") {
	                        strip(0, 1);
	                        this.begin("emu");
	                    } else {
	                        this.begin("mu");
	                    }
	                    if (yy_.yytext) return 15;

	                    break;
	                case 1:
	                    return 15;
	                    break;
	                case 2:
	                    this.popState();
	                    return 15;

	                    break;
	                case 3:
	                    this.begin('raw');return 15;
	                    break;
	                case 4:
	                    this.popState();
	                    // Should be using `this.topState()` below, but it currently
	                    // returns the second top instead of the first top. Opened an
	                    // issue about it at https://github.com/zaach/jison/issues/291
	                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
	                        return 15;
	                    } else {
	                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
	                        return 'END_RAW_BLOCK';
	                    }

	                    break;
	                case 5:
	                    return 15;
	                    break;
	                case 6:
	                    this.popState();
	                    return 14;

	                    break;
	                case 7:
	                    return 65;
	                    break;
	                case 8:
	                    return 68;
	                    break;
	                case 9:
	                    return 19;
	                    break;
	                case 10:
	                    this.popState();
	                    this.begin('raw');
	                    return 23;

	                    break;
	                case 11:
	                    return 55;
	                    break;
	                case 12:
	                    return 60;
	                    break;
	                case 13:
	                    return 29;
	                    break;
	                case 14:
	                    return 47;
	                    break;
	                case 15:
	                    this.popState();return 44;
	                    break;
	                case 16:
	                    this.popState();return 44;
	                    break;
	                case 17:
	                    return 34;
	                    break;
	                case 18:
	                    return 39;
	                    break;
	                case 19:
	                    return 51;
	                    break;
	                case 20:
	                    return 48;
	                    break;
	                case 21:
	                    this.unput(yy_.yytext);
	                    this.popState();
	                    this.begin('com');

	                    break;
	                case 22:
	                    this.popState();
	                    return 14;

	                    break;
	                case 23:
	                    return 48;
	                    break;
	                case 24:
	                    return 73;
	                    break;
	                case 25:
	                    return 72;
	                    break;
	                case 26:
	                    return 72;
	                    break;
	                case 27:
	                    return 87;
	                    break;
	                case 28:
	                    // ignore whitespace
	                    break;
	                case 29:
	                    this.popState();return 54;
	                    break;
	                case 30:
	                    this.popState();return 33;
	                    break;
	                case 31:
	                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
	                    break;
	                case 32:
	                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
	                    break;
	                case 33:
	                    return 85;
	                    break;
	                case 34:
	                    return 82;
	                    break;
	                case 35:
	                    return 82;
	                    break;
	                case 36:
	                    return 83;
	                    break;
	                case 37:
	                    return 84;
	                    break;
	                case 38:
	                    return 81;
	                    break;
	                case 39:
	                    return 75;
	                    break;
	                case 40:
	                    return 77;
	                    break;
	                case 41:
	                    return 72;
	                    break;
	                case 42:
	                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
	                    break;
	                case 43:
	                    return 'INVALID';
	                    break;
	                case 44:
	                    return 5;
	                    break;
	            }
	        };
	        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
	        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
	        return lexer;
	    })();
	    parser.lexer = lexer;
	    function Parser() {
	        this.yy = {};
	    }Parser.prototype = parser;parser.Parser = Parser;
	    return new Parser();
	})();exports.__esModule = true;
	exports['default'] = handlebars;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _visitor = __webpack_require__(25);

	var _visitor2 = _interopRequireDefault(_visitor);

	function WhitespaceControl() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  this.options = options;
	}
	WhitespaceControl.prototype = new _visitor2['default']();

	WhitespaceControl.prototype.Program = function (program) {
	  var doStandalone = !this.options.ignoreStandalone;

	  var isRoot = !this.isRootSeen;
	  this.isRootSeen = true;

	  var body = program.body;
	  for (var i = 0, l = body.length; i < l; i++) {
	    var current = body[i],
	        strip = this.accept(current);

	    if (!strip) {
	      continue;
	    }

	    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
	        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
	        openStandalone = strip.openStandalone && _isPrevWhitespace,
	        closeStandalone = strip.closeStandalone && _isNextWhitespace,
	        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

	    if (strip.close) {
	      omitRight(body, i, true);
	    }
	    if (strip.open) {
	      omitLeft(body, i, true);
	    }

	    if (doStandalone && inlineStandalone) {
	      omitRight(body, i);

	      if (omitLeft(body, i)) {
	        // If we are on a standalone node, save the indent info for partials
	        if (current.type === 'PartialStatement') {
	          // Pull out the whitespace from the final line
	          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
	        }
	      }
	    }
	    if (doStandalone && openStandalone) {
	      omitRight((current.program || current.inverse).body);

	      // Strip out the previous content node if it's whitespace only
	      omitLeft(body, i);
	    }
	    if (doStandalone && closeStandalone) {
	      // Always strip the next node
	      omitRight(body, i);

	      omitLeft((current.inverse || current.program).body);
	    }
	  }

	  return program;
	};

	WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
	  this.accept(block.program);
	  this.accept(block.inverse);

	  // Find the inverse program that is involed with whitespace stripping.
	  var program = block.program || block.inverse,
	      inverse = block.program && block.inverse,
	      firstInverse = inverse,
	      lastInverse = inverse;

	  if (inverse && inverse.chained) {
	    firstInverse = inverse.body[0].program;

	    // Walk the inverse chain to find the last inverse that is actually in the chain.
	    while (lastInverse.chained) {
	      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
	    }
	  }

	  var strip = {
	    open: block.openStrip.open,
	    close: block.closeStrip.close,

	    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
	    // so our parent can determine if we actually are standalone
	    openStandalone: isNextWhitespace(program.body),
	    closeStandalone: isPrevWhitespace((firstInverse || program).body)
	  };

	  if (block.openStrip.close) {
	    omitRight(program.body, null, true);
	  }

	  if (inverse) {
	    var inverseStrip = block.inverseStrip;

	    if (inverseStrip.open) {
	      omitLeft(program.body, null, true);
	    }

	    if (inverseStrip.close) {
	      omitRight(firstInverse.body, null, true);
	    }
	    if (block.closeStrip.open) {
	      omitLeft(lastInverse.body, null, true);
	    }

	    // Find standalone else statments
	    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
	      omitLeft(program.body);
	      omitRight(firstInverse.body);
	    }
	  } else if (block.closeStrip.open) {
	    omitLeft(program.body, null, true);
	  }

	  return strip;
	};

	WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
	  return mustache.strip;
	};

	WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
	  /* istanbul ignore next */
	  var strip = node.strip || {};
	  return {
	    inlineStandalone: true,
	    open: strip.open,
	    close: strip.close
	  };
	};

	function isPrevWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = body.length;
	  }

	  // Nodes that end with newlines are considered whitespace (but are special
	  // cased for strip operations)
	  var prev = body[i - 1],
	      sibling = body[i - 2];
	  if (!prev) {
	    return isRoot;
	  }

	  if (prev.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
	  }
	}
	function isNextWhitespace(body, i, isRoot) {
	  if (i === undefined) {
	    i = -1;
	  }

	  var next = body[i + 1],
	      sibling = body[i + 2];
	  if (!next) {
	    return isRoot;
	  }

	  if (next.type === 'ContentStatement') {
	    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
	  }
	}

	// Marks the node to the right of the position as omitted.
	// I.e. {{foo}}' ' will mark the ' ' node as omitted.
	//
	// If i is undefined, then the first child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitRight(body, i, multiple) {
	  var current = body[i == null ? 0 : i + 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
	    return;
	  }

	  var original = current.value;
	  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
	  current.rightStripped = current.value !== original;
	}

	// Marks the node to the left of the position as omitted.
	// I.e. ' '{{foo}} will mark the ' ' node as omitted.
	//
	// If i is undefined then the last child will be marked as such.
	//
	// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
	// content is met.
	function omitLeft(body, i, multiple) {
	  var current = body[i == null ? body.length - 1 : i - 1];
	  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
	    return;
	  }

	  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
	  var original = current.value;
	  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
	  current.leftStripped = current.value !== original;
	  return current.leftStripped;
	}

	exports['default'] = WhitespaceControl;
	module.exports = exports['default'];

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	function Visitor() {
	  this.parents = [];
	}

	Visitor.prototype = {
	  constructor: Visitor,
	  mutating: false,

	  // Visits a given value. If mutating, will replace the value if necessary.
	  acceptKey: function acceptKey(node, name) {
	    var value = this.accept(node[name]);
	    if (this.mutating) {
	      // Hacky sanity check: This may have a few false positives for type for the helper
	      // methods but will generally do the right thing without a lot of overhead.
	      if (value && !Visitor.prototype[value.type]) {
	        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
	      }
	      node[name] = value;
	    }
	  },

	  // Performs an accept operation with added sanity check to ensure
	  // required keys are not removed.
	  acceptRequired: function acceptRequired(node, name) {
	    this.acceptKey(node, name);

	    if (!node[name]) {
	      throw new _exception2['default'](node.type + ' requires ' + name);
	    }
	  },

	  // Traverses a given array. If mutating, empty respnses will be removed
	  // for child elements.
	  acceptArray: function acceptArray(array) {
	    for (var i = 0, l = array.length; i < l; i++) {
	      this.acceptKey(array, i);

	      if (!array[i]) {
	        array.splice(i, 1);
	        i--;
	        l--;
	      }
	    }
	  },

	  accept: function accept(object) {
	    if (!object) {
	      return;
	    }

	    /* istanbul ignore next: Sanity code */
	    if (!this[object.type]) {
	      throw new _exception2['default']('Unknown type: ' + object.type, object);
	    }

	    if (this.current) {
	      this.parents.unshift(this.current);
	    }
	    this.current = object;

	    var ret = this[object.type](object);

	    this.current = this.parents.shift();

	    if (!this.mutating || ret) {
	      return ret;
	    } else if (ret !== false) {
	      return object;
	    }
	  },

	  Program: function Program(program) {
	    this.acceptArray(program.body);
	  },

	  MustacheStatement: visitSubExpression,
	  Decorator: visitSubExpression,

	  BlockStatement: visitBlock,
	  DecoratorBlock: visitBlock,

	  PartialStatement: visitPartial,
	  PartialBlockStatement: function PartialBlockStatement(partial) {
	    visitPartial.call(this, partial);

	    this.acceptKey(partial, 'program');
	  },

	  ContentStatement: function ContentStatement() /* content */{},
	  CommentStatement: function CommentStatement() /* comment */{},

	  SubExpression: visitSubExpression,

	  PathExpression: function PathExpression() /* path */{},

	  StringLiteral: function StringLiteral() /* string */{},
	  NumberLiteral: function NumberLiteral() /* number */{},
	  BooleanLiteral: function BooleanLiteral() /* bool */{},
	  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
	  NullLiteral: function NullLiteral() /* literal */{},

	  Hash: function Hash(hash) {
	    this.acceptArray(hash.pairs);
	  },
	  HashPair: function HashPair(pair) {
	    this.acceptRequired(pair, 'value');
	  }
	};

	function visitSubExpression(mustache) {
	  this.acceptRequired(mustache, 'path');
	  this.acceptArray(mustache.params);
	  this.acceptKey(mustache, 'hash');
	}
	function visitBlock(block) {
	  visitSubExpression.call(this, block);

	  this.acceptKey(block, 'program');
	  this.acceptKey(block, 'inverse');
	}
	function visitPartial(partial) {
	  this.acceptRequired(partial, 'name');
	  this.acceptArray(partial.params);
	  this.acceptKey(partial, 'hash');
	}

	exports['default'] = Visitor;
	module.exports = exports['default'];

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.SourceLocation = SourceLocation;
	exports.id = id;
	exports.stripFlags = stripFlags;
	exports.stripComment = stripComment;
	exports.preparePath = preparePath;
	exports.prepareMustache = prepareMustache;
	exports.prepareRawBlock = prepareRawBlock;
	exports.prepareBlock = prepareBlock;
	exports.prepareProgram = prepareProgram;
	exports.preparePartialBlock = preparePartialBlock;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	function validateClose(open, close) {
	  close = close.path ? close.path.original : close;

	  if (open.path.original !== close) {
	    var errorNode = { loc: open.path.loc };

	    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
	  }
	}

	function SourceLocation(source, locInfo) {
	  this.source = source;
	  this.start = {
	    line: locInfo.first_line,
	    column: locInfo.first_column
	  };
	  this.end = {
	    line: locInfo.last_line,
	    column: locInfo.last_column
	  };
	}

	function id(token) {
	  if (/^\[.*\]$/.test(token)) {
	    return token.substr(1, token.length - 2);
	  } else {
	    return token;
	  }
	}

	function stripFlags(open, close) {
	  return {
	    open: open.charAt(2) === '~',
	    close: close.charAt(close.length - 3) === '~'
	  };
	}

	function stripComment(comment) {
	  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
	}

	function preparePath(data, parts, loc) {
	  loc = this.locInfo(loc);

	  var original = data ? '@' : '',
	      dig = [],
	      depth = 0,
	      depthString = '';

	  for (var i = 0, l = parts.length; i < l; i++) {
	    var part = parts[i].part,

	    // If we have [] syntax then we do not treat path references as operators,
	    // i.e. foo.[this] resolves to approximately context.foo['this']
	    isLiteral = parts[i].original !== part;
	    original += (parts[i].separator || '') + part;

	    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
	      if (dig.length > 0) {
	        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
	      } else if (part === '..') {
	        depth++;
	        depthString += '../';
	      }
	    } else {
	      dig.push(part);
	    }
	  }

	  return {
	    type: 'PathExpression',
	    data: data,
	    depth: depth,
	    parts: dig,
	    original: original,
	    loc: loc
	  };
	}

	function prepareMustache(path, params, hash, open, strip, locInfo) {
	  // Must use charAt to support IE pre-10
	  var escapeFlag = open.charAt(3) || open.charAt(2),
	      escaped = escapeFlag !== '{' && escapeFlag !== '&';

	  var decorator = /\*/.test(open);
	  return {
	    type: decorator ? 'Decorator' : 'MustacheStatement',
	    path: path,
	    params: params,
	    hash: hash,
	    escaped: escaped,
	    strip: strip,
	    loc: this.locInfo(locInfo)
	  };
	}

	function prepareRawBlock(openRawBlock, contents, close, locInfo) {
	  validateClose(openRawBlock, close);

	  locInfo = this.locInfo(locInfo);
	  var program = {
	    type: 'Program',
	    body: contents,
	    strip: {},
	    loc: locInfo
	  };

	  return {
	    type: 'BlockStatement',
	    path: openRawBlock.path,
	    params: openRawBlock.params,
	    hash: openRawBlock.hash,
	    program: program,
	    openStrip: {},
	    inverseStrip: {},
	    closeStrip: {},
	    loc: locInfo
	  };
	}

	function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
	  if (close && close.path) {
	    validateClose(openBlock, close);
	  }

	  var decorator = /\*/.test(openBlock.open);

	  program.blockParams = openBlock.blockParams;

	  var inverse = undefined,
	      inverseStrip = undefined;

	  if (inverseAndProgram) {
	    if (decorator) {
	      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
	    }

	    if (inverseAndProgram.chain) {
	      inverseAndProgram.program.body[0].closeStrip = close.strip;
	    }

	    inverseStrip = inverseAndProgram.strip;
	    inverse = inverseAndProgram.program;
	  }

	  if (inverted) {
	    inverted = inverse;
	    inverse = program;
	    program = inverted;
	  }

	  return {
	    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
	    path: openBlock.path,
	    params: openBlock.params,
	    hash: openBlock.hash,
	    program: program,
	    inverse: inverse,
	    openStrip: openBlock.strip,
	    inverseStrip: inverseStrip,
	    closeStrip: close && close.strip,
	    loc: this.locInfo(locInfo)
	  };
	}

	function prepareProgram(statements, loc) {
	  if (!loc && statements.length) {
	    var firstLoc = statements[0].loc,
	        lastLoc = statements[statements.length - 1].loc;

	    /* istanbul ignore else */
	    if (firstLoc && lastLoc) {
	      loc = {
	        source: firstLoc.source,
	        start: {
	          line: firstLoc.start.line,
	          column: firstLoc.start.column
	        },
	        end: {
	          line: lastLoc.end.line,
	          column: lastLoc.end.column
	        }
	      };
	    }
	  }

	  return {
	    type: 'Program',
	    body: statements,
	    strip: {},
	    loc: loc
	  };
	}

	function preparePartialBlock(open, program, close, locInfo) {
	  validateClose(open, close);

	  return {
	    type: 'PartialBlockStatement',
	    name: open.path,
	    params: open.params,
	    hash: open.hash,
	    program: program,
	    openStrip: open.strip,
	    closeStrip: close && close.strip,
	    loc: this.locInfo(locInfo)
	  };
	}

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint-disable new-cap */

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;
	exports.Compiler = Compiler;
	exports.precompile = precompile;
	exports.compile = compile;

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = __webpack_require__(5);

	var _ast = __webpack_require__(21);

	var _ast2 = _interopRequireDefault(_ast);

	var slice = [].slice;

	function Compiler() {}

	// the foundHelper register will disambiguate helper lookup from finding a
	// function in a context. This is necessary for mustache compatibility, which
	// requires that context functions in blocks are evaluated by blockHelperMissing,
	// and then proceed as if the resulting value was provided to blockHelperMissing.

	Compiler.prototype = {
	  compiler: Compiler,

	  equals: function equals(other) {
	    var len = this.opcodes.length;
	    if (other.opcodes.length !== len) {
	      return false;
	    }

	    for (var i = 0; i < len; i++) {
	      var opcode = this.opcodes[i],
	          otherOpcode = other.opcodes[i];
	      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
	        return false;
	      }
	    }

	    // We know that length is the same between the two arrays because they are directly tied
	    // to the opcode behavior above.
	    len = this.children.length;
	    for (var i = 0; i < len; i++) {
	      if (!this.children[i].equals(other.children[i])) {
	        return false;
	      }
	    }

	    return true;
	  },

	  guid: 0,

	  compile: function compile(program, options) {
	    this.sourceNode = [];
	    this.opcodes = [];
	    this.children = [];
	    this.options = options;
	    this.stringParams = options.stringParams;
	    this.trackIds = options.trackIds;

	    options.blockParams = options.blockParams || [];

	    // These changes will propagate to the other compiler components
	    var knownHelpers = options.knownHelpers;
	    options.knownHelpers = {
	      'helperMissing': true,
	      'blockHelperMissing': true,
	      'each': true,
	      'if': true,
	      'unless': true,
	      'with': true,
	      'log': true,
	      'lookup': true
	    };
	    if (knownHelpers) {
	      for (var _name in knownHelpers) {
	        /* istanbul ignore else */
	        if (_name in knownHelpers) {
	          options.knownHelpers[_name] = knownHelpers[_name];
	        }
	      }
	    }

	    return this.accept(program);
	  },

	  compileProgram: function compileProgram(program) {
	    var childCompiler = new this.compiler(),
	        // eslint-disable-line new-cap
	    result = childCompiler.compile(program, this.options),
	        guid = this.guid++;

	    this.usePartial = this.usePartial || result.usePartial;

	    this.children[guid] = result;
	    this.useDepths = this.useDepths || result.useDepths;

	    return guid;
	  },

	  accept: function accept(node) {
	    /* istanbul ignore next: Sanity code */
	    if (!this[node.type]) {
	      throw new _exception2['default']('Unknown type: ' + node.type, node);
	    }

	    this.sourceNode.unshift(node);
	    var ret = this[node.type](node);
	    this.sourceNode.shift();
	    return ret;
	  },

	  Program: function Program(program) {
	    this.options.blockParams.unshift(program.blockParams);

	    var body = program.body,
	        bodyLength = body.length;
	    for (var i = 0; i < bodyLength; i++) {
	      this.accept(body[i]);
	    }

	    this.options.blockParams.shift();

	    this.isSimple = bodyLength === 1;
	    this.blockParams = program.blockParams ? program.blockParams.length : 0;

	    return this;
	  },

	  BlockStatement: function BlockStatement(block) {
	    transformLiteralToPath(block);

	    var program = block.program,
	        inverse = block.inverse;

	    program = program && this.compileProgram(program);
	    inverse = inverse && this.compileProgram(inverse);

	    var type = this.classifySexpr(block);

	    if (type === 'helper') {
	      this.helperSexpr(block, program, inverse);
	    } else if (type === 'simple') {
	      this.simpleSexpr(block);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('blockValue', block.path.original);
	    } else {
	      this.ambiguousSexpr(block, program, inverse);

	      // now that the simple mustache is resolved, we need to
	      // evaluate it by executing `blockHelperMissing`
	      this.opcode('pushProgram', program);
	      this.opcode('pushProgram', inverse);
	      this.opcode('emptyHash');
	      this.opcode('ambiguousBlockValue');
	    }

	    this.opcode('append');
	  },

	  DecoratorBlock: function DecoratorBlock(decorator) {
	    var program = decorator.program && this.compileProgram(decorator.program);
	    var params = this.setupFullMustacheParams(decorator, program, undefined),
	        path = decorator.path;

	    this.useDecorators = true;
	    this.opcode('registerDecorator', params.length, path.original);
	  },

	  PartialStatement: function PartialStatement(partial) {
	    this.usePartial = true;

	    var program = partial.program;
	    if (program) {
	      program = this.compileProgram(partial.program);
	    }

	    var params = partial.params;
	    if (params.length > 1) {
	      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
	    } else if (!params.length) {
	      if (this.options.explicitPartialContext) {
	        this.opcode('pushLiteral', 'undefined');
	      } else {
	        params.push({ type: 'PathExpression', parts: [], depth: 0 });
	      }
	    }

	    var partialName = partial.name.original,
	        isDynamic = partial.name.type === 'SubExpression';
	    if (isDynamic) {
	      this.accept(partial.name);
	    }

	    this.setupFullMustacheParams(partial, program, undefined, true);

	    var indent = partial.indent || '';
	    if (this.options.preventIndent && indent) {
	      this.opcode('appendContent', indent);
	      indent = '';
	    }

	    this.opcode('invokePartial', isDynamic, partialName, indent);
	    this.opcode('append');
	  },
	  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
	    this.PartialStatement(partialBlock);
	  },

	  MustacheStatement: function MustacheStatement(mustache) {
	    this.SubExpression(mustache);

	    if (mustache.escaped && !this.options.noEscape) {
	      this.opcode('appendEscaped');
	    } else {
	      this.opcode('append');
	    }
	  },
	  Decorator: function Decorator(decorator) {
	    this.DecoratorBlock(decorator);
	  },

	  ContentStatement: function ContentStatement(content) {
	    if (content.value) {
	      this.opcode('appendContent', content.value);
	    }
	  },

	  CommentStatement: function CommentStatement() {},

	  SubExpression: function SubExpression(sexpr) {
	    transformLiteralToPath(sexpr);
	    var type = this.classifySexpr(sexpr);

	    if (type === 'simple') {
	      this.simpleSexpr(sexpr);
	    } else if (type === 'helper') {
	      this.helperSexpr(sexpr);
	    } else {
	      this.ambiguousSexpr(sexpr);
	    }
	  },
	  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
	    var path = sexpr.path,
	        name = path.parts[0],
	        isBlock = program != null || inverse != null;

	    this.opcode('getContext', path.depth);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    path.strict = true;
	    this.accept(path);

	    this.opcode('invokeAmbiguous', name, isBlock);
	  },

	  simpleSexpr: function simpleSexpr(sexpr) {
	    var path = sexpr.path;
	    path.strict = true;
	    this.accept(path);
	    this.opcode('resolvePossibleLambda');
	  },

	  helperSexpr: function helperSexpr(sexpr, program, inverse) {
	    var params = this.setupFullMustacheParams(sexpr, program, inverse),
	        path = sexpr.path,
	        name = path.parts[0];

	    if (this.options.knownHelpers[name]) {
	      this.opcode('invokeKnownHelper', params.length, name);
	    } else if (this.options.knownHelpersOnly) {
	      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
	    } else {
	      path.strict = true;
	      path.falsy = true;

	      this.accept(path);
	      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
	    }
	  },

	  PathExpression: function PathExpression(path) {
	    this.addDepth(path.depth);
	    this.opcode('getContext', path.depth);

	    var name = path.parts[0],
	        scoped = _ast2['default'].helpers.scopedId(path),
	        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

	    if (blockParamId) {
	      this.opcode('lookupBlockParam', blockParamId, path.parts);
	    } else if (!name) {
	      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`
	      this.opcode('pushContext');
	    } else if (path.data) {
	      this.options.data = true;
	      this.opcode('lookupData', path.depth, path.parts, path.strict);
	    } else {
	      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
	    }
	  },

	  StringLiteral: function StringLiteral(string) {
	    this.opcode('pushString', string.value);
	  },

	  NumberLiteral: function NumberLiteral(number) {
	    this.opcode('pushLiteral', number.value);
	  },

	  BooleanLiteral: function BooleanLiteral(bool) {
	    this.opcode('pushLiteral', bool.value);
	  },

	  UndefinedLiteral: function UndefinedLiteral() {
	    this.opcode('pushLiteral', 'undefined');
	  },

	  NullLiteral: function NullLiteral() {
	    this.opcode('pushLiteral', 'null');
	  },

	  Hash: function Hash(hash) {
	    var pairs = hash.pairs,
	        i = 0,
	        l = pairs.length;

	    this.opcode('pushHash');

	    for (; i < l; i++) {
	      this.pushParam(pairs[i].value);
	    }
	    while (i--) {
	      this.opcode('assignToHash', pairs[i].key);
	    }
	    this.opcode('popHash');
	  },

	  // HELPERS
	  opcode: function opcode(name) {
	    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
	  },

	  addDepth: function addDepth(depth) {
	    if (!depth) {
	      return;
	    }

	    this.useDepths = true;
	  },

	  classifySexpr: function classifySexpr(sexpr) {
	    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

	    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

	    // a mustache is an eligible helper if:
	    // * its id is simple (a single part, not `this` or `..`)
	    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

	    // if a mustache is an eligible helper but not a definite
	    // helper, it is ambiguous, and will be resolved in a later
	    // pass or at runtime.
	    var isEligible = !isBlockParam && (isHelper || isSimple);

	    // if ambiguous, we can possibly resolve the ambiguity now
	    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
	    if (isEligible && !isHelper) {
	      var _name2 = sexpr.path.parts[0],
	          options = this.options;

	      if (options.knownHelpers[_name2]) {
	        isHelper = true;
	      } else if (options.knownHelpersOnly) {
	        isEligible = false;
	      }
	    }

	    if (isHelper) {
	      return 'helper';
	    } else if (isEligible) {
	      return 'ambiguous';
	    } else {
	      return 'simple';
	    }
	  },

	  pushParams: function pushParams(params) {
	    for (var i = 0, l = params.length; i < l; i++) {
	      this.pushParam(params[i]);
	    }
	  },

	  pushParam: function pushParam(val) {
	    var value = val.value != null ? val.value : val.original || '';

	    if (this.stringParams) {
	      if (value.replace) {
	        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
	      }

	      if (val.depth) {
	        this.addDepth(val.depth);
	      }
	      this.opcode('getContext', val.depth || 0);
	      this.opcode('pushStringParam', value, val.type);

	      if (val.type === 'SubExpression') {
	        // SubExpressions get evaluated and passed in
	        // in string params mode.
	        this.accept(val);
	      }
	    } else {
	      if (this.trackIds) {
	        var blockParamIndex = undefined;
	        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
	          blockParamIndex = this.blockParamIndex(val.parts[0]);
	        }
	        if (blockParamIndex) {
	          var blockParamChild = val.parts.slice(1).join('.');
	          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
	        } else {
	          value = val.original || value;
	          if (value.replace) {
	            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
	          }

	          this.opcode('pushId', val.type, value);
	        }
	      }
	      this.accept(val);
	    }
	  },

	  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
	    var params = sexpr.params;
	    this.pushParams(params);

	    this.opcode('pushProgram', program);
	    this.opcode('pushProgram', inverse);

	    if (sexpr.hash) {
	      this.accept(sexpr.hash);
	    } else {
	      this.opcode('emptyHash', omitEmpty);
	    }

	    return params;
	  },

	  blockParamIndex: function blockParamIndex(name) {
	    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
	      var blockParams = this.options.blockParams[depth],
	          param = blockParams && _utils.indexOf(blockParams, name);
	      if (blockParams && param >= 0) {
	        return [depth, param];
	      }
	    }
	  }
	};

	function precompile(input, options, env) {
	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
	  }

	  options = options || {};
	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var ast = env.parse(input, options),
	      environment = new env.Compiler().compile(ast, options);
	  return new env.JavaScriptCompiler().compile(environment, options);
	}

	function compile(input, options, env) {
	  if (options === undefined) options = {};

	  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
	    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
	  }

	  if (!('data' in options)) {
	    options.data = true;
	  }
	  if (options.compat) {
	    options.useDepths = true;
	  }

	  var compiled = undefined;

	  function compileInput() {
	    var ast = env.parse(input, options),
	        environment = new env.Compiler().compile(ast, options),
	        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
	    return env.template(templateSpec);
	  }

	  // Template is only compiled on first use and cached after that point.
	  function ret(context, execOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled.call(this, context, execOptions);
	  }
	  ret._setup = function (setupOptions) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._setup(setupOptions);
	  };
	  ret._child = function (i, data, blockParams, depths) {
	    if (!compiled) {
	      compiled = compileInput();
	    }
	    return compiled._child(i, data, blockParams, depths);
	  };
	  return ret;
	}

	function argEquals(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
	    for (var i = 0; i < a.length; i++) {
	      if (!argEquals(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  }
	}

	function transformLiteralToPath(sexpr) {
	  if (!sexpr.path.parts) {
	    var literal = sexpr.path;
	    // Casting to string here to make false and 0 literal values play nicely with the rest
	    // of the system.
	    sexpr.path = {
	      type: 'PathExpression',
	      data: false,
	      depth: 0,
	      parts: [literal.original + ''],
	      original: literal.original + '',
	      loc: literal.loc
	    };
	  }
	}

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	exports.__esModule = true;

	var _base = __webpack_require__(4);

	var _exception = __webpack_require__(6);

	var _exception2 = _interopRequireDefault(_exception);

	var _utils = __webpack_require__(5);

	var _codeGen = __webpack_require__(29);

	var _codeGen2 = _interopRequireDefault(_codeGen);

	function Literal(value) {
	  this.value = value;
	}

	function JavaScriptCompiler() {}

	JavaScriptCompiler.prototype = {
	  // PUBLIC API: You can override these methods in a subclass to provide
	  // alternative compiled forms for name lookup and buffering semantics
	  nameLookup: function nameLookup(parent, name /* , type*/) {
	    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
	      return [parent, '.', name];
	    } else {
	      return [parent, '[', JSON.stringify(name), ']'];
	    }
	  },
	  depthedLookup: function depthedLookup(name) {
	    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
	  },

	  compilerInfo: function compilerInfo() {
	    var revision = _base.COMPILER_REVISION,
	        versions = _base.REVISION_CHANGES[revision];
	    return [revision, versions];
	  },

	  appendToBuffer: function appendToBuffer(source, location, explicit) {
	    // Force a source as this simplifies the merge logic.
	    if (!_utils.isArray(source)) {
	      source = [source];
	    }
	    source = this.source.wrap(source, location);

	    if (this.environment.isSimple) {
	      return ['return ', source, ';'];
	    } else if (explicit) {
	      // This is a case where the buffer operation occurs as a child of another
	      // construct, generally braces. We have to explicitly output these buffer
	      // operations to ensure that the emitted code goes in the correct location.
	      return ['buffer += ', source, ';'];
	    } else {
	      source.appendToBuffer = true;
	      return source;
	    }
	  },

	  initializeBuffer: function initializeBuffer() {
	    return this.quotedString('');
	  },
	  // END PUBLIC API

	  compile: function compile(environment, options, context, asObject) {
	    this.environment = environment;
	    this.options = options;
	    this.stringParams = this.options.stringParams;
	    this.trackIds = this.options.trackIds;
	    this.precompile = !asObject;

	    this.name = this.environment.name;
	    this.isChild = !!context;
	    this.context = context || {
	      decorators: [],
	      programs: [],
	      environments: []
	    };

	    this.preamble();

	    this.stackSlot = 0;
	    this.stackVars = [];
	    this.aliases = {};
	    this.registers = { list: [] };
	    this.hashes = [];
	    this.compileStack = [];
	    this.inlineStack = [];
	    this.blockParams = [];

	    this.compileChildren(environment, options);

	    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
	    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

	    var opcodes = environment.opcodes,
	        opcode = undefined,
	        firstLoc = undefined,
	        i = undefined,
	        l = undefined;

	    for (i = 0, l = opcodes.length; i < l; i++) {
	      opcode = opcodes[i];

	      this.source.currentLocation = opcode.loc;
	      firstLoc = firstLoc || opcode.loc;
	      this[opcode.opcode].apply(this, opcode.args);
	    }

	    // Flush any trailing content that might be pending.
	    this.source.currentLocation = firstLoc;
	    this.pushSource('');

	    /* istanbul ignore next */
	    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
	      throw new _exception2['default']('Compile completed with content left on stack');
	    }

	    if (!this.decorators.isEmpty()) {
	      this.useDecorators = true;

	      this.decorators.prepend('var decorators = container.decorators;\n');
	      this.decorators.push('return fn;');

	      if (asObject) {
	        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
	      } else {
	        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
	        this.decorators.push('}\n');
	        this.decorators = this.decorators.merge();
	      }
	    } else {
	      this.decorators = undefined;
	    }

	    var fn = this.createFunctionContext(asObject);
	    if (!this.isChild) {
	      var ret = {
	        compiler: this.compilerInfo(),
	        main: fn
	      };

	      if (this.decorators) {
	        ret.main_d = this.decorators; // eslint-disable-line camelcase
	        ret.useDecorators = true;
	      }

	      var _context = this.context;
	      var programs = _context.programs;
	      var decorators = _context.decorators;

	      for (i = 0, l = programs.length; i < l; i++) {
	        if (programs[i]) {
	          ret[i] = programs[i];
	          if (decorators[i]) {
	            ret[i + '_d'] = decorators[i];
	            ret.useDecorators = true;
	          }
	        }
	      }

	      if (this.environment.usePartial) {
	        ret.usePartial = true;
	      }
	      if (this.options.data) {
	        ret.useData = true;
	      }
	      if (this.useDepths) {
	        ret.useDepths = true;
	      }
	      if (this.useBlockParams) {
	        ret.useBlockParams = true;
	      }
	      if (this.options.compat) {
	        ret.compat = true;
	      }

	      if (!asObject) {
	        ret.compiler = JSON.stringify(ret.compiler);

	        this.source.currentLocation = { start: { line: 1, column: 0 } };
	        ret = this.objectLiteral(ret);

	        if (options.srcName) {
	          ret = ret.toStringWithSourceMap({ file: options.destName });
	          ret.map = ret.map && ret.map.toString();
	        } else {
	          ret = ret.toString();
	        }
	      } else {
	        ret.compilerOptions = this.options;
	      }

	      return ret;
	    } else {
	      return fn;
	    }
	  },

	  preamble: function preamble() {
	    // track the last context pushed into place to allow skipping the
	    // getContext opcode when it would be a noop
	    this.lastContext = 0;
	    this.source = new _codeGen2['default'](this.options.srcName);
	    this.decorators = new _codeGen2['default'](this.options.srcName);
	  },

	  createFunctionContext: function createFunctionContext(asObject) {
	    var varDeclarations = '';

	    var locals = this.stackVars.concat(this.registers.list);
	    if (locals.length > 0) {
	      varDeclarations += ', ' + locals.join(', ');
	    }

	    // Generate minimizer alias mappings
	    //
	    // When using true SourceNodes, this will update all references to the given alias
	    // as the source nodes are reused in situ. For the non-source node compilation mode,
	    // aliases will not be used, but this case is already being run on the client and
	    // we aren't concern about minimizing the template size.
	    var aliasCount = 0;
	    for (var alias in this.aliases) {
	      // eslint-disable-line guard-for-in
	      var node = this.aliases[alias];

	      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
	        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
	        node.children[0] = 'alias' + aliasCount;
	      }
	    }

	    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

	    if (this.useBlockParams || this.useDepths) {
	      params.push('blockParams');
	    }
	    if (this.useDepths) {
	      params.push('depths');
	    }

	    // Perform a second pass over the output to merge content when possible
	    var source = this.mergeSource(varDeclarations);

	    if (asObject) {
	      params.push(source);

	      return Function.apply(this, params);
	    } else {
	      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
	    }
	  },
	  mergeSource: function mergeSource(varDeclarations) {
	    var isSimple = this.environment.isSimple,
	        appendOnly = !this.forceBuffer,
	        appendFirst = undefined,
	        sourceSeen = undefined,
	        bufferStart = undefined,
	        bufferEnd = undefined;
	    this.source.each(function (line) {
	      if (line.appendToBuffer) {
	        if (bufferStart) {
	          line.prepend('  + ');
	        } else {
	          bufferStart = line;
	        }
	        bufferEnd = line;
	      } else {
	        if (bufferStart) {
	          if (!sourceSeen) {
	            appendFirst = true;
	          } else {
	            bufferStart.prepend('buffer += ');
	          }
	          bufferEnd.add(';');
	          bufferStart = bufferEnd = undefined;
	        }

	        sourceSeen = true;
	        if (!isSimple) {
	          appendOnly = false;
	        }
	      }
	    });

	    if (appendOnly) {
	      if (bufferStart) {
	        bufferStart.prepend('return ');
	        bufferEnd.add(';');
	      } else if (!sourceSeen) {
	        this.source.push('return "";');
	      }
	    } else {
	      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

	      if (bufferStart) {
	        bufferStart.prepend('return buffer + ');
	        bufferEnd.add(';');
	      } else {
	        this.source.push('return buffer;');
	      }
	    }

	    if (varDeclarations) {
	      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
	    }

	    return this.source.merge();
	  },

	  // [blockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // On stack, after: return value of blockHelperMissing
	  //
	  // The purpose of this opcode is to take a block of the form
	  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
	  // replace it on the stack with the result of properly
	  // invoking blockHelperMissing.
	  blockValue: function blockValue(name) {
	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs(name, 0, params);

	    var blockName = this.popStack();
	    params.splice(1, 0, blockName);

	    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
	  },

	  // [ambiguousBlockValue]
	  //
	  // On stack, before: hash, inverse, program, value
	  // Compiler value, before: lastHelper=value of last found helper, if any
	  // On stack, after, if no lastHelper: same as [blockValue]
	  // On stack, after, if lastHelper: value
	  ambiguousBlockValue: function ambiguousBlockValue() {
	    // We're being a bit cheeky and reusing the options value from the prior exec
	    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
	        params = [this.contextName(0)];
	    this.setupHelperArgs('', 0, params, true);

	    this.flushInline();

	    var current = this.topStack();
	    params.splice(1, 0, current);

	    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
	  },

	  // [appendContent]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  //
	  // Appends the string value of `content` to the current buffer
	  appendContent: function appendContent(content) {
	    if (this.pendingContent) {
	      content = this.pendingContent + content;
	    } else {
	      this.pendingLocation = this.source.currentLocation;
	    }

	    this.pendingContent = content;
	  },

	  // [append]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Coerces `value` to a String and appends it to the current buffer.
	  //
	  // If `value` is truthy, or 0, it is coerced into a string and appended
	  // Otherwise, the empty string is appended
	  append: function append() {
	    if (this.isInline()) {
	      this.replaceStack(function (current) {
	        return [' != null ? ', current, ' : ""'];
	      });

	      this.pushSource(this.appendToBuffer(this.popStack()));
	    } else {
	      var local = this.popStack();
	      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
	      if (this.environment.isSimple) {
	        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
	      }
	    }
	  },

	  // [appendEscaped]
	  //
	  // On stack, before: value, ...
	  // On stack, after: ...
	  //
	  // Escape `value` and append it to the buffer
	  appendEscaped: function appendEscaped() {
	    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
	  },

	  // [getContext]
	  //
	  // On stack, before: ...
	  // On stack, after: ...
	  // Compiler value, after: lastContext=depth
	  //
	  // Set the value of the `lastContext` compiler value to the depth
	  getContext: function getContext(depth) {
	    this.lastContext = depth;
	  },

	  // [pushContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext, ...
	  //
	  // Pushes the value of the current context onto the stack.
	  pushContext: function pushContext() {
	    this.pushStackLiteral(this.contextName(this.lastContext));
	  },

	  // [lookupOnContext]
	  //
	  // On stack, before: ...
	  // On stack, after: currentContext[name], ...
	  //
	  // Looks up the value of `name` on the current context and pushes
	  // it onto the stack.
	  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
	    var i = 0;

	    if (!scoped && this.options.compat && !this.lastContext) {
	      // The depthed query is expected to handle the undefined logic for the root level that
	      // is implemented below, so we evaluate that directly in compat mode
	      this.push(this.depthedLookup(parts[i++]));
	    } else {
	      this.pushContext();
	    }

	    this.resolvePath('context', parts, i, falsy, strict);
	  },

	  // [lookupBlockParam]
	  //
	  // On stack, before: ...
	  // On stack, after: blockParam[name], ...
	  //
	  // Looks up the value of `parts` on the given block param and pushes
	  // it onto the stack.
	  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
	    this.useBlockParams = true;

	    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
	    this.resolvePath('context', parts, 1);
	  },

	  // [lookupData]
	  //
	  // On stack, before: ...
	  // On stack, after: data, ...
	  //
	  // Push the data lookup operator
	  lookupData: function lookupData(depth, parts, strict) {
	    if (!depth) {
	      this.pushStackLiteral('data');
	    } else {
	      this.pushStackLiteral('container.data(data, ' + depth + ')');
	    }

	    this.resolvePath('data', parts, 0, true, strict);
	  },

	  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
	    // istanbul ignore next

	    var _this = this;

	    if (this.options.strict || this.options.assumeObjects) {
	      this.push(strictLookup(this.options.strict && strict, this, parts, type));
	      return;
	    }

	    var len = parts.length;
	    for (; i < len; i++) {
	      /* eslint-disable no-loop-func */
	      this.replaceStack(function (current) {
	        var lookup = _this.nameLookup(current, parts[i], type);
	        // We want to ensure that zero and false are handled properly if the context (falsy flag)
	        // needs to have the special handling for these values.
	        if (!falsy) {
	          return [' != null ? ', lookup, ' : ', current];
	        } else {
	          // Otherwise we can use generic falsy handling
	          return [' && ', lookup];
	        }
	      });
	      /* eslint-enable no-loop-func */
	    }
	  },

	  // [resolvePossibleLambda]
	  //
	  // On stack, before: value, ...
	  // On stack, after: resolved value, ...
	  //
	  // If the `value` is a lambda, replace it on the stack by
	  // the return value of the lambda
	  resolvePossibleLambda: function resolvePossibleLambda() {
	    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
	  },

	  // [pushStringParam]
	  //
	  // On stack, before: ...
	  // On stack, after: string, currentContext, ...
	  //
	  // This opcode is designed for use in string mode, which
	  // provides the string value of a parameter along with its
	  // depth rather than resolving it immediately.
	  pushStringParam: function pushStringParam(string, type) {
	    this.pushContext();
	    this.pushString(type);

	    // If it's a subexpression, the string result
	    // will be pushed after this opcode.
	    if (type !== 'SubExpression') {
	      if (typeof string === 'string') {
	        this.pushString(string);
	      } else {
	        this.pushStackLiteral(string);
	      }
	    }
	  },

	  emptyHash: function emptyHash(omitEmpty) {
	    if (this.trackIds) {
	      this.push('{}'); // hashIds
	    }
	    if (this.stringParams) {
	      this.push('{}'); // hashContexts
	      this.push('{}'); // hashTypes
	    }
	    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
	  },
	  pushHash: function pushHash() {
	    if (this.hash) {
	      this.hashes.push(this.hash);
	    }
	    this.hash = { values: [], types: [], contexts: [], ids: [] };
	  },
	  popHash: function popHash() {
	    var hash = this.hash;
	    this.hash = this.hashes.pop();

	    if (this.trackIds) {
	      this.push(this.objectLiteral(hash.ids));
	    }
	    if (this.stringParams) {
	      this.push(this.objectLiteral(hash.contexts));
	      this.push(this.objectLiteral(hash.types));
	    }

	    this.push(this.objectLiteral(hash.values));
	  },

	  // [pushString]
	  //
	  // On stack, before: ...
	  // On stack, after: quotedString(string), ...
	  //
	  // Push a quoted version of `string` onto the stack
	  pushString: function pushString(string) {
	    this.pushStackLiteral(this.quotedString(string));
	  },

	  // [pushLiteral]
	  //
	  // On stack, before: ...
	  // On stack, after: value, ...
	  //
	  // Pushes a value onto the stack. This operation prevents
	  // the compiler from creating a temporary variable to hold
	  // it.
	  pushLiteral: function pushLiteral(value) {
	    this.pushStackLiteral(value);
	  },

	  // [pushProgram]
	  //
	  // On stack, before: ...
	  // On stack, after: program(guid), ...
	  //
	  // Push a program expression onto the stack. This takes
	  // a compile-time guid and converts it into a runtime-accessible
	  // expression.
	  pushProgram: function pushProgram(guid) {
	    if (guid != null) {
	      this.pushStackLiteral(this.programExpression(guid));
	    } else {
	      this.pushStackLiteral(null);
	    }
	  },

	  // [registerDecorator]
	  //
	  // On stack, before: hash, program, params..., ...
	  // On stack, after: ...
	  //
	  // Pops off the decorator's parameters, invokes the decorator,
	  // and inserts the decorator into the decorators list.
	  registerDecorator: function registerDecorator(paramSize, name) {
	    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
	        options = this.setupHelperArgs(name, paramSize);

	    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
	  },

	  // [invokeHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // Pops off the helper's parameters, invokes the helper,
	  // and pushes the helper's return value onto the stack.
	  //
	  // If the helper is not found, `helperMissing` is called.
	  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
	    var nonHelper = this.popStack(),
	        helper = this.setupHelper(paramSize, name),
	        simple = isSimple ? [helper.name, ' || '] : '';

	    var lookup = ['('].concat(simple, nonHelper);
	    if (!this.options.strict) {
	      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
	    }
	    lookup.push(')');

	    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
	  },

	  // [invokeKnownHelper]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of helper invocation
	  //
	  // This operation is used when the helper is known to exist,
	  // so a `helperMissing` fallback is not required.
	  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
	    var helper = this.setupHelper(paramSize, name);
	    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
	  },

	  // [invokeAmbiguous]
	  //
	  // On stack, before: hash, inverse, program, params..., ...
	  // On stack, after: result of disambiguation
	  //
	  // This operation is used when an expression like `{{foo}}`
	  // is provided, but we don't know at compile-time whether it
	  // is a helper or a path.
	  //
	  // This operation emits more code than the other options,
	  // and can be avoided by passing the `knownHelpers` and
	  // `knownHelpersOnly` flags at compile-time.
	  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
	    this.useRegister('helper');

	    var nonHelper = this.popStack();

	    this.emptyHash();
	    var helper = this.setupHelper(0, name, helperCall);

	    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

	    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
	    if (!this.options.strict) {
	      lookup[0] = '(helper = ';
	      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
	    }

	    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
	  },

	  // [invokePartial]
	  //
	  // On stack, before: context, ...
	  // On stack after: result of partial invocation
	  //
	  // This operation pops off a context, invokes a partial with that context,
	  // and pushes the result of the invocation back.
	  invokePartial: function invokePartial(isDynamic, name, indent) {
	    var params = [],
	        options = this.setupParams(name, 1, params);

	    if (isDynamic) {
	      name = this.popStack();
	      delete options.name;
	    }

	    if (indent) {
	      options.indent = JSON.stringify(indent);
	    }
	    options.helpers = 'helpers';
	    options.partials = 'partials';
	    options.decorators = 'container.decorators';

	    if (!isDynamic) {
	      params.unshift(this.nameLookup('partials', name, 'partial'));
	    } else {
	      params.unshift(name);
	    }

	    if (this.options.compat) {
	      options.depths = 'depths';
	    }
	    options = this.objectLiteral(options);
	    params.push(options);

	    this.push(this.source.functionCall('container.invokePartial', '', params));
	  },

	  // [assignToHash]
	  //
	  // On stack, before: value, ..., hash, ...
	  // On stack, after: ..., hash, ...
	  //
	  // Pops a value off the stack and assigns it to the current hash
	  assignToHash: function assignToHash(key) {
	    var value = this.popStack(),
	        context = undefined,
	        type = undefined,
	        id = undefined;

	    if (this.trackIds) {
	      id = this.popStack();
	    }
	    if (this.stringParams) {
	      type = this.popStack();
	      context = this.popStack();
	    }

	    var hash = this.hash;
	    if (context) {
	      hash.contexts[key] = context;
	    }
	    if (type) {
	      hash.types[key] = type;
	    }
	    if (id) {
	      hash.ids[key] = id;
	    }
	    hash.values[key] = value;
	  },

	  pushId: function pushId(type, name, child) {
	    if (type === 'BlockParam') {
	      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
	    } else if (type === 'PathExpression') {
	      this.pushString(name);
	    } else if (type === 'SubExpression') {
	      this.pushStackLiteral('true');
	    } else {
	      this.pushStackLiteral('null');
	    }
	  },

	  // HELPERS

	  compiler: JavaScriptCompiler,

	  compileChildren: function compileChildren(environment, options) {
	    var children = environment.children,
	        child = undefined,
	        compiler = undefined;

	    for (var i = 0, l = children.length; i < l; i++) {
	      child = children[i];
	      compiler = new this.compiler(); // eslint-disable-line new-cap

	      var index = this.matchExistingProgram(child);

	      if (index == null) {
	        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
	        index = this.context.programs.length;
	        child.index = index;
	        child.name = 'program' + index;
	        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
	        this.context.decorators[index] = compiler.decorators;
	        this.context.environments[index] = child;

	        this.useDepths = this.useDepths || compiler.useDepths;
	        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
	      } else {
	        child.index = index;
	        child.name = 'program' + index;

	        this.useDepths = this.useDepths || child.useDepths;
	        this.useBlockParams = this.useBlockParams || child.useBlockParams;
	      }
	    }
	  },
	  matchExistingProgram: function matchExistingProgram(child) {
	    for (var i = 0, len = this.context.environments.length; i < len; i++) {
	      var environment = this.context.environments[i];
	      if (environment && environment.equals(child)) {
	        return i;
	      }
	    }
	  },

	  programExpression: function programExpression(guid) {
	    var child = this.environment.children[guid],
	        programParams = [child.index, 'data', child.blockParams];

	    if (this.useBlockParams || this.useDepths) {
	      programParams.push('blockParams');
	    }
	    if (this.useDepths) {
	      programParams.push('depths');
	    }

	    return 'container.program(' + programParams.join(', ') + ')';
	  },

	  useRegister: function useRegister(name) {
	    if (!this.registers[name]) {
	      this.registers[name] = true;
	      this.registers.list.push(name);
	    }
	  },

	  push: function push(expr) {
	    if (!(expr instanceof Literal)) {
	      expr = this.source.wrap(expr);
	    }

	    this.inlineStack.push(expr);
	    return expr;
	  },

	  pushStackLiteral: function pushStackLiteral(item) {
	    this.push(new Literal(item));
	  },

	  pushSource: function pushSource(source) {
	    if (this.pendingContent) {
	      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
	      this.pendingContent = undefined;
	    }

	    if (source) {
	      this.source.push(source);
	    }
	  },

	  replaceStack: function replaceStack(callback) {
	    var prefix = ['('],
	        stack = undefined,
	        createdStack = undefined,
	        usedLiteral = undefined;

	    /* istanbul ignore next */
	    if (!this.isInline()) {
	      throw new _exception2['default']('replaceStack on non-inline');
	    }

	    // We want to merge the inline statement into the replacement statement via ','
	    var top = this.popStack(true);

	    if (top instanceof Literal) {
	      // Literals do not need to be inlined
	      stack = [top.value];
	      prefix = ['(', stack];
	      usedLiteral = true;
	    } else {
	      // Get or create the current stack name for use by the inline
	      createdStack = true;
	      var _name = this.incrStack();

	      prefix = ['((', this.push(_name), ' = ', top, ')'];
	      stack = this.topStack();
	    }

	    var item = callback.call(this, stack);

	    if (!usedLiteral) {
	      this.popStack();
	    }
	    if (createdStack) {
	      this.stackSlot--;
	    }
	    this.push(prefix.concat(item, ')'));
	  },

	  incrStack: function incrStack() {
	    this.stackSlot++;
	    if (this.stackSlot > this.stackVars.length) {
	      this.stackVars.push('stack' + this.stackSlot);
	    }
	    return this.topStackName();
	  },
	  topStackName: function topStackName() {
	    return 'stack' + this.stackSlot;
	  },
	  flushInline: function flushInline() {
	    var inlineStack = this.inlineStack;
	    this.inlineStack = [];
	    for (var i = 0, len = inlineStack.length; i < len; i++) {
	      var entry = inlineStack[i];
	      /* istanbul ignore if */
	      if (entry instanceof Literal) {
	        this.compileStack.push(entry);
	      } else {
	        var stack = this.incrStack();
	        this.pushSource([stack, ' = ', entry, ';']);
	        this.compileStack.push(stack);
	      }
	    }
	  },
	  isInline: function isInline() {
	    return this.inlineStack.length;
	  },

	  popStack: function popStack(wrapped) {
	    var inline = this.isInline(),
	        item = (inline ? this.inlineStack : this.compileStack).pop();

	    if (!wrapped && item instanceof Literal) {
	      return item.value;
	    } else {
	      if (!inline) {
	        /* istanbul ignore next */
	        if (!this.stackSlot) {
	          throw new _exception2['default']('Invalid stack pop');
	        }
	        this.stackSlot--;
	      }
	      return item;
	    }
	  },

	  topStack: function topStack() {
	    var stack = this.isInline() ? this.inlineStack : this.compileStack,
	        item = stack[stack.length - 1];

	    /* istanbul ignore if */
	    if (item instanceof Literal) {
	      return item.value;
	    } else {
	      return item;
	    }
	  },

	  contextName: function contextName(context) {
	    if (this.useDepths && context) {
	      return 'depths[' + context + ']';
	    } else {
	      return 'depth' + context;
	    }
	  },

	  quotedString: function quotedString(str) {
	    return this.source.quotedString(str);
	  },

	  objectLiteral: function objectLiteral(obj) {
	    return this.source.objectLiteral(obj);
	  },

	  aliasable: function aliasable(name) {
	    var ret = this.aliases[name];
	    if (ret) {
	      ret.referenceCount++;
	      return ret;
	    }

	    ret = this.aliases[name] = this.source.wrap(name);
	    ret.aliasable = true;
	    ret.referenceCount = 1;

	    return ret;
	  },

	  setupHelper: function setupHelper(paramSize, name, blockHelper) {
	    var params = [],
	        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
	    var foundHelper = this.nameLookup('helpers', name, 'helper'),
	        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');

	    return {
	      params: params,
	      paramsInit: paramsInit,
	      name: foundHelper,
	      callParams: [callContext].concat(params)
	    };
	  },

	  setupParams: function setupParams(helper, paramSize, params) {
	    var options = {},
	        contexts = [],
	        types = [],
	        ids = [],
	        objectArgs = !params,
	        param = undefined;

	    if (objectArgs) {
	      params = [];
	    }

	    options.name = this.quotedString(helper);
	    options.hash = this.popStack();

	    if (this.trackIds) {
	      options.hashIds = this.popStack();
	    }
	    if (this.stringParams) {
	      options.hashTypes = this.popStack();
	      options.hashContexts = this.popStack();
	    }

	    var inverse = this.popStack(),
	        program = this.popStack();

	    // Avoid setting fn and inverse if neither are set. This allows
	    // helpers to do a check for `if (options.fn)`
	    if (program || inverse) {
	      options.fn = program || 'container.noop';
	      options.inverse = inverse || 'container.noop';
	    }

	    // The parameters go on to the stack in order (making sure that they are evaluated in order)
	    // so we need to pop them off the stack in reverse order
	    var i = paramSize;
	    while (i--) {
	      param = this.popStack();
	      params[i] = param;

	      if (this.trackIds) {
	        ids[i] = this.popStack();
	      }
	      if (this.stringParams) {
	        types[i] = this.popStack();
	        contexts[i] = this.popStack();
	      }
	    }

	    if (objectArgs) {
	      options.args = this.source.generateArray(params);
	    }

	    if (this.trackIds) {
	      options.ids = this.source.generateArray(ids);
	    }
	    if (this.stringParams) {
	      options.types = this.source.generateArray(types);
	      options.contexts = this.source.generateArray(contexts);
	    }

	    if (this.options.data) {
	      options.data = 'data';
	    }
	    if (this.useBlockParams) {
	      options.blockParams = 'blockParams';
	    }
	    return options;
	  },

	  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
	    var options = this.setupParams(helper, paramSize, params);
	    options = this.objectLiteral(options);
	    if (useRegister) {
	      this.useRegister('options');
	      params.push('options');
	      return ['options=', options];
	    } else if (params) {
	      params.push(options);
	      return '';
	    } else {
	      return options;
	    }
	  }
	};

	(function () {
	  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

	  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

	  for (var i = 0, l = reservedWords.length; i < l; i++) {
	    compilerWords[reservedWords[i]] = true;
	  }
	})();

	JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
	  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
	};

	function strictLookup(requireTerminal, compiler, parts, type) {
	  var stack = compiler.popStack(),
	      i = 0,
	      len = parts.length;
	  if (requireTerminal) {
	    len--;
	  }

	  for (; i < len; i++) {
	    stack = compiler.nameLookup(stack, parts[i], type);
	  }

	  if (requireTerminal) {
	    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
	  } else {
	    return stack;
	  }
	}

	exports['default'] = JavaScriptCompiler;
	module.exports = exports['default'];

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* global define */
	'use strict';

	exports.__esModule = true;

	var _utils = __webpack_require__(5);

	var SourceNode = undefined;

	try {
	  /* istanbul ignore next */
	  if (false) {
	    // We don't support this in AMD environments. For these environments, we asusme that
	    // they are running on the browser and thus have no need for the source-map library.
	    var SourceMap = require('source-map');
	    SourceNode = SourceMap.SourceNode;
	  }
	} catch (err) {}
	/* NOP */

	/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
	if (!SourceNode) {
	  SourceNode = function (line, column, srcFile, chunks) {
	    this.src = '';
	    if (chunks) {
	      this.add(chunks);
	    }
	  };
	  /* istanbul ignore next */
	  SourceNode.prototype = {
	    add: function add(chunks) {
	      if (_utils.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src += chunks;
	    },
	    prepend: function prepend(chunks) {
	      if (_utils.isArray(chunks)) {
	        chunks = chunks.join('');
	      }
	      this.src = chunks + this.src;
	    },
	    toStringWithSourceMap: function toStringWithSourceMap() {
	      return { code: this.toString() };
	    },
	    toString: function toString() {
	      return this.src;
	    }
	  };
	}

	function castChunk(chunk, codeGen, loc) {
	  if (_utils.isArray(chunk)) {
	    var ret = [];

	    for (var i = 0, len = chunk.length; i < len; i++) {
	      ret.push(codeGen.wrap(chunk[i], loc));
	    }
	    return ret;
	  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
	    // Handle primitives that the SourceNode will throw up on
	    return chunk + '';
	  }
	  return chunk;
	}

	function CodeGen(srcFile) {
	  this.srcFile = srcFile;
	  this.source = [];
	}

	CodeGen.prototype = {
	  isEmpty: function isEmpty() {
	    return !this.source.length;
	  },
	  prepend: function prepend(source, loc) {
	    this.source.unshift(this.wrap(source, loc));
	  },
	  push: function push(source, loc) {
	    this.source.push(this.wrap(source, loc));
	  },

	  merge: function merge() {
	    var source = this.empty();
	    this.each(function (line) {
	      source.add(['  ', line, '\n']);
	    });
	    return source;
	  },

	  each: function each(iter) {
	    for (var i = 0, len = this.source.length; i < len; i++) {
	      iter(this.source[i]);
	    }
	  },

	  empty: function empty() {
	    var loc = this.currentLocation || { start: {} };
	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
	  },
	  wrap: function wrap(chunk) {
	    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

	    if (chunk instanceof SourceNode) {
	      return chunk;
	    }

	    chunk = castChunk(chunk, this, loc);

	    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
	  },

	  functionCall: function functionCall(fn, type, params) {
	    params = this.generateList(params);
	    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
	  },

	  quotedString: function quotedString(str) {
	    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
	    .replace(/\u2029/g, '\\u2029') + '"';
	  },

	  objectLiteral: function objectLiteral(obj) {
	    var pairs = [];

	    for (var key in obj) {
	      if (obj.hasOwnProperty(key)) {
	        var value = castChunk(obj[key], this);
	        if (value !== 'undefined') {
	          pairs.push([this.quotedString(key), ':', value]);
	        }
	      }
	    }

	    var ret = this.generateList(pairs);
	    ret.prepend('{');
	    ret.add('}');
	    return ret;
	  },

	  generateList: function generateList(entries) {
	    var ret = this.empty();

	    for (var i = 0, len = entries.length; i < len; i++) {
	      if (i) {
	        ret.add(',');
	      }

	      ret.add(castChunk(entries[i], this));
	    }

	    return ret;
	  },

	  generateArray: function generateArray(entries) {
	    var ret = this.generateList(entries);
	    ret.prepend('[');
	    ret.add(']');

	    return ret;
	  }
	};

	exports['default'] = CodeGen;
	module.exports = exports['default'];

/***/ }
/******/ ])
});
;
define('directories/directory-utils/template-cache',[
  'directories/vendor/handlebars'
], function (Handlebars) {

  function TemplateCache() {
    this.cache = {};
  }

  TemplateCache.prototype = {
    hasTemplate: function(key) {
      return this.cache.hasOwnProperty(key);
    },

    getTemplate: function(key) {
      return this.cache[key];
    },

    // Low-level method to cache a compiled template
    putTemplate: function(key, template) {
      this.cache[key] = template;

      return template;
    },

    // High-level method to compile and cache a template
    cacheTemplate: function(key, source) {
      var template = Handlebars.compile(source);
      this.putTemplate(key, template);

      return template;
    }
  };

  return TemplateCache;
});

define('directories/directory-utils/component-proxy',[
  'directories/directory-utils/template-cache',
  'librastandardlib/logger/logger'
],
function (TemplateCache, Logger) {

  var logger = new Logger('Directories');
  var defaults = {
    containerClass: '.aws-directories-container'
  };

  function ComponentProxy(elem, templateCache, options) {
    this.options = $.extend({}, defaults, options);

    this.$elem = $(elem);
    this.$directoriesContainer = this.$elem.find(this.options.containerClass);
    this.$listOfItems = this.$directoriesContainer.find('ul');

    this.$container = (this.$listOfItems.length > 0) ? this.$listOfItems : this.$directoriesContainer;
    this.templateCache = templateCache;
  }

  ComponentProxy.prototype = {
    getContainerElem: function() {
      return this.$container;
    },

    // Load the template for the given component
    loadTemplate: function() {
      var template;

      var key = this.$elem;
      if (this.templateCache.hasTemplate(key)) {
        logger.debug('Using cached template for key', key);
        template = this.templateCache.getTemplate(key);
      } else {
        var $template = this.$elem.find('script[type="text/x-handlebars-template"]');

        if ($template.length <= 0) {
          logger.debug('No template element found for key', key);
          return;
        }

        logger.debug('Found template for key', key, $template);

        var source = $template.html();
        template = this.templateCache.cacheTemplate(key, source);
      }

      return template;
    },

    // Load data for the component and return the XHR promise
    loadData: function(url, params) {
      logger.debug('Fetching data', url, params);

      return $.get(url, params);
    },

    handleError: function(message) {
      logger.debug(message);
      this.$container.append('<p>Oops, something went wrong. We have been notified and are working to fix this issue.</p>');
    }
  };

  return ComponentProxy;
});

define('directories/directory-utils/cards-utils',[],function () {

  var CardsUtils = {
    // Remove empty string at the end of the key names
    removeEmptyString: function(objArr) {
      objArr.map(function(obj) {
        var fields = obj.additionalFields;
        obj.additionalFields = Object.keys(fields).reduce(function(additionalFields, key) {
          additionalFields[key.trim()] = fields[key];
          return additionalFields;
        }, {});
      });

      return objArr;
    },

    // If a filter component is on the page, it attaches an event to the document.
    // This returns true if that event is attached.
    isFilterAvailable: function() {
      var events = $._data(document, 'events');
      return events !== undefined && events.aws_filter_data_ready !== undefined;
    },

    strToBool: function(value){
      switch(value){
        case '1':
          return true;
        case '0':
          return false;
        default:
          return false;
      }
    },

    getMappedFields: function(data, fieldsData) {
      fieldsData = fieldsData || {};
      var requiredFields = fieldsData.requiredFields || {};
      var optionalFields = fieldsData.optionalFields || {};
      var dialogFields = fieldsData.dialogFields || {};
      var items = data.items || [];

      var fields = $.extend({}, requiredFields, optionalFields);

      if (!$.isEmptyObject(fields) || !$.isEmptyObject(dialogFields)) {
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          item.mappedFields = {};

          for (var key in fields) {
            if (fields.hasOwnProperty(key)) {
              var value = fields[key];
              value = $.trim(value);

              if (value !== '' && item.additionalFields.hasOwnProperty(value)) {
                this.addToMappedFields(item, key, value, data.fieldTypes);
              }
            }
          }

          for (var fld in item.additionalFields) {
            if (item.additionalFields.hasOwnProperty(fld) && !item.mappedFields.hasOwnProperty(fld)) {
              this.addToMappedFields(item, fld, fld, data.fieldTypes);
            }
          }

          for (var field in dialogFields) {
            if (dialogFields.hasOwnProperty(field) && dialogFields[field] !== '') {
              item.mappedFields[field] = dialogFields[field];
            }
          }
        }
      }

      return items;
    },

    addToMappedFields: function(item, key, fldName, fieldTypes) {
      var isMapped = false;

      if (fieldTypes && fieldTypes.hasOwnProperty(fldName)) {
        if (fieldTypes[fldName] === 'LongText') {
          isMapped = true;

          item.mappedFields[key] = {
            value: item.additionalFields[fldName],
            type: fieldTypes[fldName]
          };

        } else if (fieldTypes[fldName] === 'Boolean') {
          isMapped = true;
          item.mappedFields[key] = this.strToBool(item.additionalFields[fldName]);
        }
      }

      if (!isMapped) {
        item.mappedFields[key] = item.additionalFields[fldName];
      }
    }
  };

  return CardsUtils;
});

define('directories/directory-items/items-component',[
  'directories/directory-utils/component-proxy',
  'directories/directory-utils/path-utils',
  'directories/directory-utils/cards-utils',
  'librastandardlib/logger/logger',
  'directories/vendor/handlebars'
], function (ComponentProxy, PathUtils, CardsUtils, Logger, Handlebars) {

  var logger = new Logger('Directories');

  var defaults = {
    eventNamespace: 'aws_directories_items',
    activeClass: 'lb-active',
    defaultParams: {
      order_by: 'DateCreated',
      sort_ascending: false,
      limit: 25,
      locale: 'en_US'
    }
  };

  function ItemsComponent(elem, templateCache, options) {
    this.options = $.extend(true, {}, defaults, options);
    this.$elem = $(elem);
    this.data = this.$elem.data();
    this.directoryId = this.data.directoryId;

    this.setUrl(this.options.endpoint);
    this.proxy = new ComponentProxy(elem, templateCache, options);

    this.isFilterAvailable = CardsUtils.isFilterAvailable();
  }

  // Load the template for the given component
  ItemsComponent.prototype = {

    // Set the directory endpoint url
    setUrl: function(endpoint) {
      var urlTemplate = Handlebars.compile(endpoint);
      this.url = urlTemplate({ directoryId: this.directoryId });
    },

    // If the filter is available, initialize the filter which will trigger loadData.
    // Otherwise, load the data.
    show: function(params) {
      if (this.isFilterAvailable) {
        this.initializeFilter();
      } else {
        this.loadData(params);
      }
    },

    // Make an ajax call to the directory endpoint.
    // When the data is returned, display it and set up the theme if the theme is available.
    loadData: function(params, replaceContent) {
      var that = this;
      var updatedParams = this.addDefaultParams(params);

      this.proxy.loadData(this.url, updatedParams)
        .done(function(data) {
          logger.debug('Fetched data', data);

          that.displayItems(data, updatedParams, !!replaceContent);
          that.$elem.trigger(that.options.eventDataLoad);
        })
        .fail(function(xhr, status, error) {
          logger.debug('Error loading Items', status, error);
          that.proxy.handleError('Error loading items');
        });
    },

    // Set parameters for the ajax call to the directory
    addDefaultParams: function(params) {
      params = $.extend({}, this.options.defaultParams, params);

      // If undefined, order_by will point to the default value
      if (this.data.orderBy !== undefined) {
        params.order_by = this.data.orderBy;
      }

      if (this.data.sortAscending === true) {
        params.sort_ascending = true;
      }

      if (this.data.limit !== undefined) {
        params.limit = this.data.limit;
      }

      if (this.options.locale !== '') {
        params.locale = this.options.locale;
      }

      if (this.data.tag !== undefined) {
        params.tag = this.data.tag;
      }

      if (this.data.urlAsTag !== undefined) {
        params.tag = this.directoryId + '#' + PathUtils.getTagFromURL(location.pathname, this.data.rootPath);
      }

      return params;
    },

    // Sometimes directory field names have trailing whitespaces.
    // So we remove all trailing whitespaces from the key names.
    // Also, getItems API returns all fields' values as strings.
    // Which means boolean value is returned as "0" and "1".These are converted to booleans.
    // Then map the directory fields to the cards component fields.
    cleanUpData: function(data) {
      var cleanData = $.extend(true, {}, data);
      var items = cleanData.items;
      var themeConfig = this.$elem.data('themeConfig');

      items = CardsUtils.removeEmptyString(items);

      if (themeConfig !== undefined) {
        items = CardsUtils.getMappedFields(cleanData, themeConfig.mappings);
      }

      return cleanData;
    },

    // Load the template with the data
    displayItems: function(data, params, replaceContent) {
      var template = this.proxy.loadTemplate();

      var itemsData = {
        directoryId: this.directoryId,
        orderBy: params.order_by,
        sortAscending: params.sort_ascending,
        tag: params.tag,
        locale: params.locale
      };

      if (template) {
        data = this.cleanUpData(data);
        logger.debug('Cleaned data', data.items);

        var html = template(data);

        var $container = this.proxy.getContainerElem();

        logger.debug('Filled template; adding to page', html);

        if (replaceContent === true) {
          logger.debug('Replacing content in container', $container);
          $container.html(html);
        } else {
          logger.debug('Appending content to container', $container);
          $container.append(html);
        }

        // Fire a custom event for DA
        this.$elem.trigger('custom_' + this.options.eventNamespace + '_items-rendered', itemsData);

        // Fire an event to put persistent side nav in the right place
        $(window).trigger('custom_' + this.options.eventNamespace + '_filled-template');

        this.handlePagination(data.metadata);

      } else {
        // Silent error for unconfigured components
        logger.debug('Error loading template for element', this.$elem);
      }
    },

    // Set filter event handler
    initializeFilter: function() {

      // When aws_filter_update event is triggered and the event data has filters object,
      // a tag parameter is created from the filters data and passed with the XHR call.
      $(document).on('aws_filter_update', function(e, data) {
        var params = {};
        var eventData = typeof data === 'object' ? data : JSON.parse(data);
        var filterScope = eventData.filterScope;

        logger.debug('Event data', eventData);

        if (filterScope !== this.directoryId || !eventData.hasOwnProperty('filters')) {
          return;
        }

        if (eventData.filters.length > 0) {
          var filter = eventData.filters[0];

          if (filter.key && filter.filterValue) {
            var tagId = [this.directoryId, filter.key, filter.filterValue].join('#').toLowerCase();
            params = { tag: tagId };
          }
        }

        this.loadData(params, true);
      }.bind(this));

      // Fire an event to trigger the filter to send the default value
      $(document).trigger('aws_filter_data_ready');
    },

    // Only when endMarker metadata is available, pagination event is attached.
    handlePagination: function(metadata) {
      var $button = this.$elem.find('a.aws-directories-more');
      var eventName = 'click.' + this.eventNamespace + '_more';

      if (metadata.hasOwnProperty('endMarker')) {

        $button.off(eventName);
        $button.on(eventName, function(e) {
          e.preventDefault();

          var params = {
            start_marker: metadata.endMarker
          };

          logger.debug('Loading more data', params);
          this.loadData(params);
        }.bind(this));

        $button.addClass(this.options.activeClass);

      } else {
        $button.off(eventName);
        logger.debug('No more data to load');
        $button.removeClass(this.options.activeClass);
      }
    }
  };

  return ItemsComponent;
});

define('aws-blog/directory-items/related-items-component',[
  'aws-blog/tools/collection',
  'directories/directory-items/items-component',
  'librastandardlib/logger/logger'
], function(Collection, ItemsComponent, Logger) {
  'use strict';

  var logger = new Logger('Blog');

  var defaults = {
    eventNamespace: 'aws_directories_related_items',
    defaultParams: {
      order_by: 'SortOrderValue'
    }
  };

  function RelatedItemsComponent(elem, templateCache, options) {
    options = $.extend(true, {}, defaults, options);

    ItemsComponent.call(this, elem, templateCache, options);

    this.itemsToDisplay = new Collection();
    this.relatedTags = [];
    this.startWithItem = 0;
    this.currentItem = this.$elem.data('current-item');
    this.numberOfItems = this.$elem.data('number-of-items') || 10;
    this.relatedTagsQueue = this.$elem.data('related-tags');
  }

  RelatedItemsComponent.prototype = Object.create(ItemsComponent.prototype);
  RelatedItemsComponent.constructor = RelatedItemsComponent;


  // Load the template for the given component
  RelatedItemsComponent.prototype.show = function(params) {
    var that = this;

    this.loadItemsRecursively(params, true)
      .done(function(itemsToDisplay, params) {
        that.itemsToDisplay.rotate.call(that.itemsToDisplay, that.startWithItem);
        that.displayItems(that.itemsToDisplay, params, true);
      })
      .fail(logger.debug);
  };

  // Load items recursively until we have the requested number of items
  // or until we're out of related tags.
  RelatedItemsComponent.prototype.loadItemsRecursively = function(params) {
    params = params || {};
    var that = this;
    var resolver = $.Deferred();

    this.loadItems(params)
      .done(function(itemsToDisplay, params) {

        if (that.itemsToDisplay.length < that.numberOfItems) {
          that.loadItemsRecursively(params)
            .done(resolver.resolve)
            .fail(function(message, params) {
              // We don't want to fail if an earlier call found items.
              if (that.itemsToDisplay.length) {
                resolver.resolve(itemsToDisplay, params);
              }
              else {
                resolver.reject(message, params);
              }
            });
        }
        else {
          resolver.resolve(that.itemsToDisplay, params);
        }

      })
      .fail(resolver.reject);

    return resolver.promise();
  };

  RelatedItemsComponent.prototype.loadItems = function(params) {
    params = params || {};
    var that = this;
    var resolver = $.Deferred();

    if (this.relatedTagsQueue.length) {
      params.tag = this.relatedTagsQueue.shift();
      this.relatedTags.push(params.tag);

      this.loadData(params)
        .done(function(data, params) {
          that.filterItems(data);
          resolver.resolve(that.itemsToDisplay, params);
        })
        .fail(resolver.reject);
    }
    else {
      resolver.reject('Missing list of related tags.', params);
    }

    return resolver.promise();
  };

  RelatedItemsComponent.prototype.loadData = function(params) {
    params = params || {};
    params = this.addDefaultParams(params);
    var that = this;
    var resolver = $.Deferred();

    this.proxy.loadData(this.url, params)
      .done(function(data) {
        logger.debug('Fetched data', data);
        resolver.resolve(data, params);
      })
      .fail(function(xhr, status, error) {
        logger.debug('Error loading Items', status, error);
        that.proxy.handleError('Error loading items');
        resolver.reject('Error loading Items', params);
      });

    return resolver.promise();
  };

  // Filter items to be displayed
  RelatedItemsComponent.prototype.filterItems = function(data) {
    data.items.forEach(function(item) {
      if (item.id === this.currentItem) {
        // Don't display the current post as a related item
        // Display the related item after the current post first in related posts
        this.startWithItem = this.itemsToDisplay.length;
      }
      else if (this.itemsToDisplay.length < this.numberOfItems) {
        this.itemsToDisplay.add.call(this.itemsToDisplay, item);
      }
    }, this);

    return this;
  };

  // Disable pagination
  RelatedItemsComponent.prototype.handlePagination = function() {};

  return RelatedItemsComponent;
});

define('directories/directory-items/items-controller',[
  'directories/directory-items/items-component',
  'librastandardlib/logger/logger'
], function (ItemsComponent, Logger) {

  var logger = new Logger('Directories');

  function ItemsController(elem, templateCache, options) {
    this.options = $.extend({}, options);
    this.$elem = $(elem);
    this.components = {};
    this.templateCache = templateCache;
    this.registerItemsComponents();
  }

  ItemsController.prototype = {
    // Load and store Items component, one per directory
    registerItemsComponents: function() {
      logger.debug('Loading Items components', this.$elem);

      var directoryId = this.$elem.data('directoryId');

      if (this.components.hasOwnProperty(directoryId)) {
        logger.debug('Only one Items component per directory supported', directoryId);
      } else if (!!directoryId) {
        logger.debug('Registering Items component', directoryId);
        this.components[directoryId] = new ItemsComponent(this.$elem, this.templateCache, this.options);

      } else {
        logger.debug('Found Items component, but it is not configured for a directory', this.$elem);
      }
    },

    renderComponents: function() {
      for (var directoryId in this.components) {
        if (this.components.hasOwnProperty(directoryId)) {
          var component = this.components[directoryId];

          logger.debug('Showing Items component', component);
          component.show();
        }
      }
    }
  };

  return ItemsController;
});

define('aws-blog/directory-items/related-items-controller',[
  'aws-blog/directory-items/related-items-component',
  'directories/directory-items/items-controller',
  'librastandardlib/logger/logger'
], function(RelatedItemsComponent, ItemsController, Logger) {
  'use strict';

  var logger = new Logger('Blog.RelatedItemsController');

  function RelatedItemsController(elem, templateCache, options) {
    ItemsController.call(this, elem, templateCache, options);
  }

  RelatedItemsController.prototype = Object.create(ItemsController.prototype);
  RelatedItemsController.constructor = RelatedItemsController;

  // Load and store component to render items
  RelatedItemsController.prototype.registerItemsComponents = function() {
    logger.debug('Loading Related Items components', this.$elem);
    var directoryId = this.$elem.data('directory-id');

    if (this.components.hasOwnProperty(directoryId)) {
      logger.debug('Only one Items component per directory supported', directoryId);
    }
    else if (!!directoryId) {
      logger.debug('Registering Related Items component', directoryId);
      this.components[directoryId] = new RelatedItemsComponent(this.$elem, this.templateCache, this.options);
    }
    else {
      logger.debug('Found Related Items component, but it is not configured for a directory', this.$elem);
    }
  };

  return RelatedItemsController;
});

define('aws-blog/tools/utils',[
  'directories/directory-utils/path-utils'
], function(Utils) {
  'use strict';

  Utils.addQueryParam = function(url, key, value) {
    var a = document.createElement('a');
    a.href = url;

    // Make sure a.pathname has a leading slash. IE11 does not have the slash while other browsers do.
    var baseUrl = a.protocol + '//' + a.host + this.ensureLeadingSlash(a.pathname);
    var hash = a.hash;
    var urlQueryString = a.search;

    key = encodeURIComponent(key);
    value = encodeURIComponent(value);

    var newParam = key + '=' + value;
    var params = '?' + newParam;

    // If query string exists, build params from it
    if (urlQueryString) {
      var updateRegex = new RegExp('([?&])' + key + '=([^&#]*)');
      var removeRegex = new RegExp('([?&])' + key + '=[^&#]+[&#]?');

      // Remove param if value is empty
      if (value === '') {
        params = urlQueryString.replace(removeRegex, '$1');
        params = params.replace(/[&?]$/, '');

        // If param exists already, update it
      }
      else if (urlQueryString.match(updateRegex) !== null) {
        params = urlQueryString.replace(updateRegex, '$1' + newParam);

        // If param does not exist, add it to end of query string
      }
      else {
        params = urlQueryString + '&' + newParam;
      }

      // Query string does not exist and value is empty
    }
    else if (value === '') {
      return baseUrl + hash;
    }

    return baseUrl + params + hash;
  };

  // Add a trailing slash to string
  Utils.ensureLeadingSlash = function(str) {
    if (str.substr(0, 1) !== '/') {
      str = '/' + str;
    }

    return str;
  };

  return Utils;
});

define('aws-blog/tools/template-helpers',[
  'aws-blog/tools/utils',
  'directories/vendor/handlebars'
], function(Utils, handlebars) {
  'use strict';

  var defaults = {
    tracker_key: 'nc1',
    tracker_value: 'd_ri'
  };

  function TemplateHelpers(options) {
    this.options = $.extend({}, defaults, options);

    this.registerHelpers();
  }

  TemplateHelpers.prototype = {
    registerHelpers: function() {
      var that = this;

      handlebars.registerHelper('track_url', function(url, tracker_value) {
        tracker_value = tracker_value || that.options.tracker_value;

        return Utils.addQueryParam(url, that.options.tracker_key, tracker_value);
      });
    }
  };

  return new TemplateHelpers();
});

define('aws-blog/related-items',[
  'directories/directory-utils/directory-default-config',
  'aws-blog/directory-items/related-items-controller',
  'directories/directory-utils/template-cache',
  'aws-blog/tools/template-helpers'
], function(defaultConfig, RelatedItemsController, TemplateCache) {
  'use strict';

  var RelatedItems = (function() {

    function RelatedItems(elem, options) {
      this.$elem = $(elem);
      this.options = $.extend(true, {}, defaultConfig, options);
      this.templateCache = new TemplateCache();
      this.itemsController = new RelatedItemsController(this.$elem, this.templateCache, this.options.ItemsController);

      this.render();
    }

    RelatedItems.prototype = {
      render: function() {
        this.itemsController.renderComponents();
      }
    };

    return RelatedItems;
  })();

  Libra.Comp.register({
    name: 'aws-blog:related-items',
    initFct: function(elem) {
      new RelatedItems(elem);
    },
    initTime: 'immediate'
  });

  return RelatedItems;
});

define('aws-blog/next-related-item',[
  'aws-blog/article-arrow',
  'aws-blog/related-items'
], function(ArticleArrow, RelatedItems) {
  'use strict';

  var NextRelatedItem = (function() {

    var defaults = {
      ItemsController: {
        eventNamespace: 'aws_blog_next_related_item'
      }
    };

    function NextRelatedItem(elem, options) {
      options = $.extend(true, {}, defaults, options);

      RelatedItems.call(this, elem, options);

      this.initEvents();
    }

    NextRelatedItem.prototype = Object.create(RelatedItems.prototype);
    NextRelatedItem.constructor = NextRelatedItem;

    NextRelatedItem.prototype.initEvents = function() {
      this.$elem.on('custom_' + this.options.ItemsController.eventNamespace + '_items-rendered', this.initNextItem.bind(this));
    };

    NextRelatedItem.prototype.initNextItem = function() {
      new ArticleArrow(this.$elem.find('[data-next-related-item]'));
    };

    return NextRelatedItem;
  })();

  Libra.Comp.register({
    name: 'aws-blog:next-related-item',
    initFct: function(elem) {
      new NextRelatedItem(elem);
    },
    initTime: 'immediate'
  });

  return NextRelatedItem;
});

define('aws-blog/share-dialog',[],function() {
  'use strict';

  function ShareDialog($container) {
    this.$elem = $container.find('[data-share-dialog]');
    this.$toggle = $container.find('[data-share-dialog-toggle]');
    this.$url = $container.find('[data-share-dialog-url]');

    this.$toggle.on('click', $.proxy(function(e) {
      e.preventDefault();
      this.toggle();
    }, this));
    this.$url.on('focus', $.proxy(this, 'selectUrl'));
  }

  ShareDialog.prototype = {
    hide: function() {
      this.$elem.hide();
    },

    show: function() {
      // Hide all occurrences
      $('[data-share-dialog]:visible').hide();
      this.$elem.show($.proxy(this, 'selectUrl'));
    },

    toggle: function() {
      if (this.$elem.is(':visible')) {
        this.hide();
      }
      else {
        this.show();
      }
    },

    selectUrl: function() {
      if ( ! this.$url.is(':focus') ) {
        this.$url.focus();
      }
      this.$url.select();
    }
  };

  Libra.Comp.register({
    name: 'aws-blog:share-dialog',
    initFct: function(elem) {
      new ShareDialog($(elem));
    },
    initTime: 'immediate'
  });

  return ShareDialog;
});

define('aws-blog/blog-bundle',[
  'libra/core/libra-require',
  'libra/navigation/navigation',
  'libra/components/popover',
  'libra/components/tracking-pixel',
  'aws-blog/article-arrow',
  'aws-blog/commenting',
  'aws-blog/next-related-item',
  'aws-blog/related-items',
  'aws-blog/share-dialog'
], function(LibraRequire) {
  'use strict';

  LibraRequire.init();
});

}());